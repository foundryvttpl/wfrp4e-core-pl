Hooks.on("init", async () => {
    await new Promise(resolve => setTimeout(resolve, 250));
    foundry.utils.mergeObject(game.wfrp4e.config.effectScripts, {
  "00ZCnahnTGvzG9KA": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.weczkAMPlTjX7lqU\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item])",
  "01VFjGVxkjb5P1ve": "return args.item?.system?.isRanged && args.data.targets[0]?.actor?.sizeNum < 3",
  "03mJu59V4iByWlsO": "// The imbiber immediately\r\n// takes 3 Poisoned Conditions that cannot be resisted at first,\r\nawait this.actor.addCondition(\"poisoned\", 3)\r\n\r\n// recovers a number of Wounds equal to their Toughness Bonus, \r\nawait this.actor.modifyWounds(this.actor.system.characteristics.t.bonus)\r\n\r\n// and acquires the Regenerate Creature Trait.\r\nconst hasRegenerate = this.actor.has(\"Regeneracja\")\r\nif (hasRegenerate === undefined) {\r\n  fromUuid(\"Compendium.wfrp4e-core.items.SfUUdOGjdYpr3KSR\").then(trait => {\r\n    let traitItem = trait.toObject()\r\n    this.actor.createEmbeddedDocuments(\"Item\", [traitItem], {fromEffect: this.effect.id})\r\n  })\r\n}\r\n\r\nthis.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> otrzymuje: \r\n    <ul>\r\n      <li>3 Stany Zatrucia, których początkowo nie można usunąć</li>\r\n      <li>odzyskano liczbę ran: ${this.actor.system.characteristics.t.bonus}</li>\r\n      <li>otrzymano cechę stworzenia \"Regeneracja\".</li>\r\n    </ul>\r\n    od Łaski Ranalda zależy, czy regeneracja okaże się silniejsza niż zatrucie.</p>\r\n    <p>Kiedy wszystkie Stany Zatrucia zostaną usunięte, usuwana jest również cecha stworzenia Regeneracja.</p>`, \r\n    { whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })   \r\n",
  "04bAiHISSW53w94Y": "this.actor.addCondition(\"blinded\", 3)",
  "06IaVCOC0RCJbxEf": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.8piWcBKFlQ2J1E3A\")\r\nlet data = item.toObject();\r\ndata.system.location.key= this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])",
  "08S8Ozi5b4EdwZp5": "args.fields.slBonus += this.actor.system.characteristics.wp.bonus;",
  "09sSpnW8z2zcVEdf": "if (!args.flags.quietenedApplied)\n{\n   args.fields.modifier += 10;\n   args.flags.quietenedApplied = true\n}",
  "0abwNjpzo3SbEOeO": "if (args.applyAP && args.modifiers.ap.metal) \r\n{\r\n    args.modifiers.ap.ignored += args.modifiers.ap.metal\r\n    args.modifiers.ap.details.push(\"<strong>\" + this.effect.name + \"</strong>: Zignorowano Metalowy Pancerz (\" + args.modifiers.ap.metal + \")\");\r\n    args.modifiers.ap.metal = 0\r\n}",
  "0amHqfjTRp5ff6Op": "let wounds = this.effect.sourceActor.system.characteristics.wp.bonus;\r\nthis.actor.modifyWounds(wounds);\r\nthis.script.message(`Uleczone rany: $[wounds}`);",
  "0BP5l7bIkf744G1k": "return !args.context.terror  && !args.extendedTest?.flags.wfrp4e?.fear",
  "0e0UZT2FodOJDdgW": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.GbDyBCu8ZjDp6dkj\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "0e7OkamNAaAk4Oit": "let item1 = await fromUuid(\"Compendium.wfrp4e-core.items.3S4OYOZLauXctmev\")\r\nlet item2 = await fromUuid(\"Compendium.wfrp4e-core.items.7mCcI3q7hgWcmbBU\")\r\n\r\nlet data1 = item1.toObject();\r\ndata1.system.location.key = this.item.system.location.key\r\n\r\nlet data2 = item2.toObject();\r\ndata2.system.location.key = this.item.system.location.key\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data1, data2], {fromEffect: this.effect.id})\r\n",
  "0FNOq4J1AdPd2A0q": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Row\")) && !args.skill?.name.includes(game.i18n.localize(\"NAME.Sail\"));",
  "0FWto1oEr3jbWggw": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Ładowanie Zaklęć\", true, [\"system.lore.value\"])\r\n\r\nlet text = (await game.wfrp4e.tables.rollTable(\"random-caster\", {hideDSN: true})).result\r\n\r\nlore = Array.from(text.matchAll(/{(.+?)}/gm))[0][1]\r\n\r\nif (text == \"Wybór GMa\")\r\n{\r\n    return this.script.notification(text)\r\n}\r\n\r\nif (spellsWithLore.length > 0)\r\n{\r\n    let spellsWithLore = spells.filter(i => game.wfrp4e.config.magicLores[i.system.lore.value] == lore)\r\n    let selectedSpell = spellsWithLore[Math.floor(CONFIG.Dice.randomUniform() * spellsWithLore.length)]\r\n    this.script.notification(selectedSpell.name);\r\n    this.actor.createEmbeddedDocuments(\"Item\", [(await fromUuid(selectedSpell)).toObject()])\r\n}\r\nelse\r\n{\r\n    ui.notifications.notify(`Nie udało się odnaleźć zaklęcia w Tradycji ${lore}. Spróbuj ponownie.`)\r\n}",
  "0H2syk6qc0sCY0pj": "if ( args.actor.has(game.i18n.localize(\"NAME.AA\"), \"talent\") ||\r\nargs.actor.has(game.i18n.localize(\"NAME.SecondSight\"), \"talent\") ) {\r\n\targs.modifiers.other.push({label : this.effect.name, value : 5, details : \"Cel posiada Zmysł Magii lub Percepcję Magiczną\"});\r\n}",
  "0hAbiNR1nFkpFMRz": "if (!this.actor.has(game.i18n.localize(\"NAME.SecondSight\"),\"talent\")) this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.OEjUvJKi0xmBwbS2\", this.effect)",
  "0iTLDgFHO9Rgc010": "args.fields.modifier -= 20;",
  "0jTqyz0wRlK6XPF7": "if (args.test.spell)\n{\n\targs.test.result.other.push(`<strong>${this.effect.name}</strong>: Automatic Failure`)\n}",
  "0KG3HoTNoZhaINIj": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.4CMKeDTDrRQZbPIJ\")\nlet fixation = (await game.wfrp4e.tables.rollTable(\"fixations\"))\nlet data = item.toObject();\ndata.system.specification.value = fixation.result;\nthis.item.updateSource({name : this.item.name += ` (${fixation.result})`});\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "0LCQtsiK2aUfYRmD": "return ![\"t\", \"wp\"].includes(args.characteristic)",
  "0mrUnxzufYgsR0Ph": "this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test => {\n    await test.roll()\n    if (test.failed)\n    {\n        this.actor.addCondition(\"stunned\")\n    }\n})\n",
  "0NAD1LNcVyAZ1fC7": "return args.skill?.name !== game.i18n.localize(\"NAME.Cool\") && args.skill?.name !== game.i18n.localize(\"NAME.Endurance\");",
  "0PzfGjGhHQbxEwlb": "this.item.update({\"system.AP\" : {lArm : 0, rArm : 0, lLeg : 0, rLeg: 0}});",
  "0R0QAr3D024kWPfo": "let table = game.wfrp4e.tables.findTable(\"mutatephys\");\r\nif (!table)\r\n{\r\n\treturn ui.notifications.error(\"Nieodnaleziono tabeli Mutacji, upewnij się, że tabla o kluczu `mutatephys` jest zaimportowana do świata.\")\r\n}\r\nlet result = (await table.roll()).results[0];\r\nlet uuid = `Compendium.${result.documentCollection}.${result.documentId}`\r\nlet item = await fromUuid(uuid);\r\n\r\nif (item)\r\n{\r\n    this.script.notification(`Dodano: ${item.name}`)\r\n    this.actor.createEmbeddedDocuments(\"Item\", [item])\r\n}\r\nelse \r\n{\r\n    ui.notifications.error(\"Nie odnaleziono przedmiotu: \" + uuid)\r\n}",
  "0Uly7OmkH0zqYbxQ": "let location = this.item.system.location.key;\r\n\r\nif (location)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}\r\n\r\nlet roll = await new Roll(\"max(1, 1d10 - @system.characteristics.t.bonus)\", this.actor).roll()\r\n\r\nroll.toMessage(this.script.getChatData({flavor : `${this.effect.name} (Czas Trwania)`}));\r\n\r\nthis.effect.updateSource({\"duration.rounds\" : roll.total})",
  "0vaYwAlMWTmOBl8k": "if (!args.flags.strikeToStun)\r\n{\r\n    args.flags.strikeToStun = true\r\n    args.fields.modifier += 20;\r\n    args.fields.hitLocation = \"head\";\r\n}\r\nargs.fields.successBonus++;",
  "0wmIC2MssUX6LW3N": "if (args.test.options.doomboltRolled)\r\n{\r\n\targs.test.result.damage += 4;\r\n}",
  "0YKQGbsKdHSmYGE7": "if (args.skill?.name != game.i18n.localize(\"NAME.Gossip\"))\r\n{\r\n\treturn true;\r\n}\r\nelse \r\n{\r\n\targs.data.canReverse = true; // Kind of a kludge here, the talent Tests has a specific condition, but the description simply says \"any gossip test can be reversed\" so check it here instead of submission\r\n}\r\n    ",
  "0yyofYHeDRQlFliO": "return args.context.terror  || args.extendedTest?.flags.wfrp4e?.fear",
  "11uCC0mK2uL783al": "let type = this.item.getFlag(\"wfrp4e\", \"breath\");\r\n\r\nif ([\"fire\", \"electricity\", \"poison\"].includes(type))\r\n{\r\n    args.applyAP = false;\r\n}",
  "15C6LbCUmQgPEoDM": "await args.actor.addCondition(\"ablaze\");",
  "16nCOByUaSFDym1V": "args.fields.modifier -= 20\n",
  "18MeEQ0As3JvER71": "let state = !this.effect.disabled;\nthis.effect.update({\"disabled\": state});\n\nif (state)\n  return ui.notifications.info(\"EFFECT.CreatureBackInWater\", {localize: true})\n\nreturn ui.notifications.info(\"EFFECT.CreatureOutOfWater\", {localize: true});",
  "190PHSHKGaJ74wsR": "if (!this.item.name.includes(\"(\") || this.item.system.tests.value.toLowerCase().includes(\"teren\") || this.item.system.tests.value.toLowerCase().includes(\"wybrany\"))\r\n{\r\n    let tests = this.item.system.tests.value\r\n    let name = this.item.name\r\n\r\n    // If name already specifies, make sure tests value reflects that\r\n    if (name.includes(\"(\") && !name.toLowerCase().includes(\"wybrany\"))\r\n    {\r\n        let terrain = name.split(\"(\")[1].split(\")\")[0]\r\n        tests = tests.replace(\"Wybrany Teren\", terrain)\r\n    }\r\n    else // If no sense specified, provide dialog choice\r\n    {\r\n        let choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n            coastal : \"Wybrzeża\",\r\n            deserts : \"Pustynie\",\r\n            marshes : \"Bagna\",\r\n            rocky : \"Teren Skalisty\",\r\n            tundra : \"Tundra\",\r\n            woodlands : \"Lasy\"\r\n        }, this.item.img), 1, \"Wybierz teren:\");\r\n        if (choice[0])\r\n        {\r\n            name = `${name.split(\"(\")[0].trim()} (${choice[0].name})`\r\n            tests = tests.replace(\"Wybrany Teren\", choice[0].name)\r\n        }\r\n    }\r\n\r\n    this.effect.updateSource({name})\r\n    this.item.updateSource({name, \"system.tests.value\" : tests})\r\n}",
  "1A87vGLh2PXH0rG0": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Language\"));",
  "1BT0MWM2cbhlEnrn": "        let characteristics = {\r\n            \"ws\" : 5,\r\n            \"bs\" : 5,\r\n            \"s\" : 5,\r\n            \"t\" : 0,\r\n            \"i\" : 5,\r\n            \"ag\" : 5,\r\n            \"dex\" : 5,\r\n            \"int\" : 0,\r\n            \"wp\" : 5,\r\n            \"fel\" : 5\r\n        }\r\n        let items = []\r\n\r\n        let updateObj = this.actor.toObject();\r\n\r\n        let talents = (await Promise.all([game.wfrp4e.tables.rollTable(\"talents\"), game.wfrp4e.tables.rollTable(\"talents\"), game.wfrp4e.tables.rollTable(\"talents\")])).map(i => i.text)\r\n        \r\n        for (let ch in characteristics)\r\n        {\r\n            updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n        }\r\n        \r\n        for (let talent of talents)\r\n        {\r\n            let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n            if (talentItem)\r\n            {\r\n                items.push(talentItem.toObject());\r\n            }\r\n            else \r\n            {\r\n                ui.notifications.warn(`Nie odnaleziono talentu: ${talent}`, {permanent : true})\r\n            }\r\n        }\r\n      \r\n        \r\n        await this.actor.update(updateObj)\r\n        this.actor.createEmbeddedDocuments(\"Item\", items);\r\n    \r\n",
  "1CeYp5MlPcH68UIw": "let characteristics = {\r\n    \"ws\" : 15,\r\n    \"bs\" : 10,\r\n    \"s\" : 10,\r\n    \"t\" : 15,\r\n    \"i\" : 10,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 10,\r\n    \"wp\" : 10,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [game.i18n.localize(\"NAME.Intimidate\"), game.i18n.localize(\"NAME.Leadership\"), game.i18n.localize(\"NAME.Perception\")]\r\nlet skillAdvancements = [10, 10, 10]\r\nlet talents = [\"Zmysł Bitewny\", \"Musztra\", \"Groźny\", \"Krzepki\"]\r\nlet trappings = [\"Broń ręczna\", \"Kolczuga\", \"Nogawice kolcze\"]\r\nlet specialItems = [ \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "1Du4e27M8WgP2iui": "if (args.equipped === true && this.actor.name !== \"Kurgorn Three-eyes\") \r\n{\r\n    this.actor.addCondition(\"blinded\", 1, {\"statuses\" : [\"blinded\", \"blind\"]})\r\n    this.script.notification(`Blinded while wearing the ${this.item.name}`);\r\n} \r\n\r\nif (args.equipped === false && this.actor.name !== \"Kurgorn Three-eyes\") \r\n{\r\n  this.actor.removeCondition(\"blinded\")\r\n}",
  "1E47r2ba6IGe8uFK": "return args.characteristic != \"t\"",
  "1exiWlVUHsXDLLAH": "this.script.notification(`Nie można wkroczyć: ${this.effect.name}!`);",
  "1fQr1Dg7DX0vfz3r": "let healed = parseInt(this.effect.sourceTest.result.SL)\r\nthis.actor.modifyWounds(healed)\r\nthis.script.message(`Uleczono Rany: ${healed}`)",
  "1IodsW9ImamYoEYz": "args.actor.details.move.run += 4",
  "1jQq9v8fXK8zuEBU": "let damage = this.effect.sourceActor.hasCondition(\"fatigued\") ? 6 : 10;\r\n\r\nlet loc = \"body\"\r\n\r\nlet APatLoc = this.actor.system.status.armour[loc];\r\n\r\nlet metalAP = APatLoc.layers.reduce((metal, layer) => metal += ((layer.metal && !layer.magical) ? layer.value : 0), 0)\r\n\r\nlet APused = Math.max(0, APatLoc.value - metalAP); // remove metal AP at location;\r\n\r\ndamage -= (APused + this.actor.system.characteristics.t.bonus)\r\n\r\nlet msg = await this.actor.applyBasicDamage(damage, {suppressMsg : true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL});\r\nmsg += ` (Zignorowano metalowy pancerz: ${metalAP} PP na lokalizacji: ${game.wfrp4e.config.locations[loc]})`\r\nthis.script.message(msg)\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"difficult\"}, appendTitle : ` - ${this.effect.name}`});\r\nawait test.roll();\r\nif (test.failed)\r\n\tthis.actor.addCondition(\"stunned\");",
  "1JwxZujbDcueLWBL": "await this.actor.addCondition(\"ablaze\", 2)\nawait this.script.message(await this.actor.applyBasicDamage(this.effect.sourceTest.result.damage, {suppressMsg: true}))",
  "1kB2su7hLRYDhZ2H": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\nif (!test.succeeded)\r\n{\r\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.ZhMADOqoo0y8Q9bx\")\r\n    let data = item.toObject();\r\n    if (this.item.system.location.key == \"rLeg\")\r\n    {\r\n        data.system.location.value = \"Prawy Palec u nogi\"\r\n\tdata.system.location.key = \"rToe\";\r\n    }\r\n    else if (this.item.system.location.key == \"lLeg\")\r\n    {\r\n        data.system.location.value = \"Lewu Palec u nogi\"\r\n\tdata.system.location.key = \"lToe\";\r\n    }\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data])\r\n}\r\nthis.effect.delete();",
  "1l7Jz2ZHbAWko7Vm": "args.context.ballockKnife = true;",
  "1LDm3OB32skZe6Xv": "return args.characteristic != \"wp\"",
  "1LDSzXeO5CzXgTOc": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) || args.skill?.name == `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`",
  "1MDOKny7IirJPoI6": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` ${this.effect.name}`})\nawait test.roll()\nif (test.succeeded)\n{\n    this.effect.delete();\n}\n",
  "1mNkLj9JYNr3ofC6": "this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test => {\n    await test.roll();\n    if (test.failed)\n    {\n        this.actor.addCondition(\"stunned\", 3)\n    }\n})",
  "1OpT3CXs07XFWWCT": "args.context.cardsharp = true;",
  "1PQPxFjmRlulHHzo": "if (args.opposedTest.result.hitloc.value == this.item.system.location.key && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 2);\r\n}\r\n    ",
  "1UalUmNzjB4rp3SZ": "return [\"ws\", \"bs\", \"s\", \"ag\", \"t\", \"dex\"].includes(args.characteristic)",
  "1wEjrgff7ASxKVmy": "if (args.effect.conditionId == \"bleeding\")\r\n    args.data.damage -= 1",
  "1wKVvxRTHOyV4Qdv": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Sail\"))",
  "1wrPvP6lJwIAfmsl": "let choice = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.locations), 1, \"Wybierz Lokację\");\r\n\r\nlet location = choice[0].id;\r\n\r\nlet itemTargeted = this.actor.items.get(this.effect.getFlag(\"wfrp4e\", \"itemTargets\")[0])\r\n\r\nif (itemTargeted)\r\n{\r\n    itemTargeted.update({[`system.APdamage.${location}`] : itemTargeted.system.APdamage[location] + 1})\r\n}",
  "1yOvw74jzFfaI87b": "return args.context.reload\r\n",
  "1ZArMNUI8qqH6zkX": "let test = await args.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  \" - \" + this.effect.name, context : {failure: \"Otrzymano Stan Oszołoemienia\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    args.actor.addCondition(\"stunned\")\r\n}\r\n\r\n",
  "1ZrzpfVwPJHdwp23": "this.actor.status.addArmour(1, {source: this.effect, magical : true})",
  "20fvE9nJmcfGYVzw": "if ( args.totalWoundLoss > 0 ) {\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {difficulty: \"average\"})\n    await test.roll();\n    if (!test.succeeded)\n    {   \n        this.actor.addSystemEffect(\"gangrene\");\n    }\n}",
  "22bW97lkvCqisfHX": "return args.type != \"channelling\" && !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\"))",
  "22PMOW0G5MWiBQmg": "let fear = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\nfear = fear.toObject();\nfear.system.specification.value = 1;\nawait this.actor.createEmbeddedDocuments(\"Item\", [fear], {fromEffect : this.effect.id})",
  "23HgjCB1oecxANvA": "if (args.item.range && args.item.range.bands)\r\n{\r\nargs.item.range.bands[game.i18n.localize(\"Long Range\")].modifier = 0\r\nargs.item.range.bands[game.i18n.localize(\"Extreme\")].modifier /= 2\r\n}",
  "23vWiHUjxtRQ3Efz": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.eWPN3CV2Eddwz8aM\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Plecy\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "29wHhLMnuoVjfQtN": "const sl = this.effect.getFlag(\"wfrp4e-archives3\", \"sl\");\nargs.item.system.damage.value += `+${sl}`;",
  "2AdSBXw7IwCiqawQ": "return args.skill?.name == game.i18n.localize(\"NAME.Bribery\") || args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "2AOo7KUyzMrgIlgM": "CorruptionMessageModel.createCorruptionMessage(this.item.system.specification.value, {speaker : {alias: this.actor.prototypeToken.name}})",
  "2cKarG9ToyW2ptCd": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.update({\"system.quantity.value\" : this.item.system.quantity.value - 0.25})\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n\tactor.applyEffect({effectData : [this.item.effects.contents[1].convertToApplied()]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "2Cw5j0iGAnFNegWr": "return args.item?.system.attackType\n",
  "2EAYX5G9Fh3HJwiP": "let broken = this.actor.hasCondition(\"broken\");\r\n\r\nif (broken) {\r\n    broken.delete();\r\n    this.script.notification(\"Removed Broken.\");\r\n}",
  "2Ej6LUqn8frTRURo": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {difficulty: \"hard\"})\nawait test.roll();\nif (!test.succeeded)\n{\n    await this.actor.addCondition(\"unconscious\");\n}",
  "2GYAd4OC888oQFBp": "return ![\"fel\"].includes(args.characteristic)",
  "2hzDv8ROulOe1elK": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Lore\"));",
  "2kRwCc31fuZgrsy8": "CorruptionMessageModel.createCorruptionMessage(\"major\", this.script.getChatData());",
  "2mFNelLOAQ6iJsZl": "if (args.test.isFumble)\n{\n    args.test.result.other.push(\"@Table[doomrocket-fumble]\")\n}",
  "2miWWeRrEpq1beG4": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.qn4ZpvTQIX4rcJDl\");\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n",
  "2NLINicPQWbuvp2n": "return args.item?.name != game.i18n.localize(\"NAME.Navigation\")",
  "2OqLHRqEBEjBm2LW": "args.fields.slBonus += this.actor.system.characteristics.wp.bonus",
  "2p9IK6Y5Z4NQD6FY": "args.prefillModifiers.difficulty = \"hard\"",
  "2QB0LjueuJcIaHaC": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = this.item.specifier;\r\n    if (!value)\r\n    {\r\n        value = await ValueDialog.create({text : \"Podaj wartość pancerza\", title : this.effect.name});\r\n    }\r\n    if (value)\r\n    {\r\n        this.item.updateSource({\"system.specification.value\" : value, name : this.item.baseName});\r\n    }\r\n}",
  "2Qi1hwLYhdE6v6Hs": "if (![\"rLeg\", \"lLeg\"].includes(this.effect.getFlag(\"wfrp4e\", \"location\")))\r\n\treturn true;\r\n\r\nif (args.context.dodge)\r\n{\r\n\targs.abort = true;\r\n\tthis.script.notification(\"Nie można unikać!\")\r\n}\r\nreturn [\"t\", \"int\", \"wp\", \"fel\"].includes(args.characteristic)",
  "2rzxQlL7A9ujZ9uK": "if (args.opposedTest.result.winner == \"attacker\") {\r\n  if (args.opposedTest.defenderTest.weapon && args.opposedTest.defenderTest.item.properties.qualities.shield) {\r\n    ui.notifications.notify(`<b>${this.effect.name}</b>: Otrzymano Punkty Przewag: ${this.item.Advances}`)\r\n    this.actor.setAdvantage(this.item.Advances)\r\n  }\r\n}",
  "2S6XlGCdRlXuaaVw": "this.actor.system.status.corruption.value += 1",
  "2sDH6RvoOAR40oqH": "\r\nif (![\"Goblin\", \"Ork\"].includes(this.actor.system.details.species.value)) {\r\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), { appendTitle: ` - ${this.effect.name}` })\r\n    await test.roll();\r\n    if (test.failed) {\r\n        let infection = await fromUuid(\"Compendium.wfrp4e-core.items.Item.1hQuVFZt9QnnbWzg\")\r\n        this.actor.createEmbeddedDocuments(\"Item\", [infection])\r\n    }\r\n}\r\n\r\n// Since wounds change when the effect is deleted, need to wait until after \r\n// the max wounds have been recalculated to apply damage\r\nwarhammer.utility.sleep(1000).then(async () => {\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n\r\n    roll.toMessage(this.script.getChatData());\r\n    this.script.message(await this.actor.applyBasicDamage(roll.total, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true }))\r\n\r\n})",
  "2VNnVrtktdGUqXEV": "if (args.totalWoundLoss > 0)\n{\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\n    await test.roll();\n    if (test.failed && parseInt(args.opposedTest.attackerTest.result.SL) > 0)\n    {\n        args.actor.addCondition(\"stunned\", parseInt(args.opposedTest.attackerTest.result.SL))\n    }\n}   ",
  "2vTVR0quRZQtjNfQ": "let currentCareer = this.actor.system.currentCareer;\r\nif (!currentCareer)\r\n{\r\n    return;\r\n}\r\n\r\nlet talents = [game.i18n.localize(\"NAME.AA\"),\r\n`${game.i18n.localize(\"NAME.ArcaneMagic\")} (${game.i18n.localize(\"SPEC.Any\")})`,\r\ngame.i18n.localize(\"NAME.ChaosMagic\") + \" \" +  \"(Tzeentch)\",\r\ngame.i18n.localize(\"NAME.FastHands\"),\r\ngame.i18n.localize(\"NAME.ID\"),\r\ngame.i18n.localize(\"NAME.MagicalSense\"),\r\ngame.i18n.localize(\"NAME.PettyMagic\"),\r\ngame.i18n.localize(\"NAME.SecondSight\"),\r\ngame.i18n.localize(\"NAME.WarWizard\"),\r\ngame.i18n.localize(\"NAME.Witch\")].filter(t => !currentCareer.system.talents.includes(t))\r\n\r\ncurrentCareer.system.talents = currentCareer.system.talents.concat(talents)",
  "2W9uMTT6iJhfQ044": "let skill = `${game.i18n.localize(\"NAME.Trade\")} (${this.item.parenthesesText})`\r\nlet currentCareer = this.actor.system.currentCareer;\r\nlet existingSkill = this.actor.itemTypes.skill.find(i => i.name == skill);\r\n\r\nif (!currentCareer) return\r\n\r\n\r\nlet inCurrentCareer = currentCareer.system.skills.concat(currentCareer.system.addedSkills).includes(skill);\r\nlet craftsmanAdded = this.actor.getFlag(\"wfrp4e\", \"craftsmanAdded\") || {};\r\nif (existingSkill && inCurrentCareer && !craftsmanAdded[existingSkill.name])\r\n{\r\n\texistingSkill.system.advances.costModifier = -5;\r\n}\r\nelse \r\n{\r\n\tcraftsmanAdded[skill] = true;\r\n\tcurrentCareer.system.addedSkills.push(skill);\r\n\tfoundry.utils.setProperty(this.actor, \"flags.wfrp4e.craftsmanAdded\", craftsmanAdded)\r\n}",
  "2WBq5gW780C6zfCp": "if (args.weapon && this.item.system.usesLocation(args.weapon))\r\n{\r\n    args.bleedingHand = true;\r\n    let success = await this.effect.manualScripts[0].execute({actor: this.actor})\r\n    if (!success)\r\n    {\r\n        args.abort = true;\r\n    }\r\n}",
  "2wk0yrRPlPsdqr3L": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9GNpAqgsKzxZKJpp\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "2WSN306tL4apjRtD": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9h82z72XGo9tfgQS\")\r\nlet data = item.toObject();\r\ndata.name = data.name += ` (${game.i18n.localize(\"SPEC.Hearing\")})`\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "2XaJNYUMQAmSOsqi": "const {targetUuid} = this.effect.flags.wfrp4e;\r\n\r\nif (args.attacker.uuid !== targetUuid) return;\r\n\r\nlet recordedWounds = this.effect.getFlag(\"wfrp4e\", \"damageToReturn\") ?? 0;\r\n\r\nrecordedWounds += args.totalWoundLoss;\r\n\r\nthis.effect.setFlag(\"wfrp4e\", \"damageToReturn\", recordedWounds);",
  "2XXqxAF5s5Sws6qj": "this.actor.system.status.corruption.value += 2",
  "2yctEihGmdCfTTVx": "args.data.canReverse = true;\r\nargs.context.fieldDressing = true;",
  "2Yh4vQm0ZJukRH1x": "return !args.skill?.name.includes(\"Channelling\");",
  "2yW0kuwLfgRzJR2S": "const duration = 3600 * (1 + Number(this.effect.sourceTest.result.SL));\r\nthis.effect.update({\"duration.seconds\": duration});",
  "2zeP2nMSURjxrqYz": "let wounds = this.actor.system.status.wounds\r\nif (wounds.value == 0)\r\n  return this.script.notification(\"Brak efektu, ponieważ Żywotność wynosi 0\", \"error\")\r\n\r\nthis.script.notification(`Wyleczone Punkty Żywotności: ${this.actor.characteristics.t.bonus}`)\r\nawait this.actor.modifyWounds(this.actor.characteristics.t.bonus)",
  "33PWizq5F7pkKnQT": "if (args.item.type == \"spell\")\n{\n    args.item.cn.value = Math.floor(args.item.cn.value / 2)\n}",
  "33US8YRgaMqYu2We": "return !args.context.handling",
  "37UN17gb8suFeZIW": "this.script.message(await this.actor.applyBasicDamage(8, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))",
  "3aEzK0DehSHtVykd": "this.effect.manualScripts[0].execute({actor : this.actor});",
  "3CdYFcInQVCIBUiE": "args.actor.system.details.move.value += 2;\nargs.actor.system.status.carries.max = Math.floor(args.actor.system.status.carries.max * 0.5);\nargs.actor.system.details.price.gc *= 1.1;",
  "3CeKfDcMEVgQlcXm": "await this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.5hH73j2NgPdsLCZN\", this.effect, {name: \"Hatred (All enemies)\"});",
  "3Cn2TlRahlm5LkSj": "args.fields.successBonus += 1;",
  "3D5ImpMgpOTPucvv": "if (args.test.options.cardsharp && args.test.succeeded)\r\n{\r\n\r\nlet SL = Math.floor(args.test.target / 10) - Math.floor(args.test.result.roll / 10)\r\nlet ones = Number(args.test.result.roll.toString().split(\"\").pop())\r\n\r\nif (ones > SL)\r\n   args.test.result.other.push(`<span class=\"hide-option\"><b>${this.effect.name}</b>: ${ones + args.test.successBonus + args.test.slBonus} PS</span>`)\r\n}",
  "3eSaX0BeaUalNkEP": "return args.context.mutate",
  "3fdCQ3h3iVuhdDs9": "args.fields.slBonus += this.actor.characteristics.ag.bonus;",
  "3hfMQkUKYI4rCuBy": "return args.skill?.name != game.i18n.localize(\"NAME.CharmAnimal\") && !args.skill?.name.includes(game.i18n.localize(\"NAME.AnimalTraining\"));",
  "3IGO7xEjRjat937X": "let fatigue = this.actor.hasCondition(\"fatigued\")\r\nif (fatigue)\r\n{\r\n   this.script.notification(\"Usunięto Stan Zmęczenia, efekt zdeaktywowany.\")\r\n    this.effect.update({disabled : true})\r\n   await this.actor.removeCondition(\"fatigued\")\r\n}",
  "3ixqbsEMfSSTzAXU": "const test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {\r\n  difficulty: \"challenging\",\r\n  context: {\r\n    failure: \"Otrzymuje stan @Condition[Zmęczenie] z powodu koszmarów.\",\r\n    success: \"Cierpiał na koszmary, ale spał wystarczająco dobrze.\"\r\n  }\r\n});\r\nawait test.roll();\r\n\r\nif (test.failed) {\r\n  await this.actor.addCondition(\"fatigued\");\r\n}",
  "3JEzEzF1SeYA9lsV": "let choice = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.locations, this.effect.img), 1, \"Wybierz Lokację\");\r\nif (choice[0])\r\n{\r\n    this.effect.updateSource({name : `${this.effect.name} (${choice[0].name})`})\r\nthis.effect.updateSource({\"flags.wfrp4e.location\" : choice[0].id})\r\n}\r\n\r\nlet location = choice[0].id;\r\n\r\nif ([\"lArm\", \"rArm\"].includes(location))\r\n{\r\n    let dropped = this.actor.itemTypes.weapon.filter(i => i.isEquipped & i.system.usesHands.includes(location));\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}\r\n\r\nif (location == \"body\")\r\n{\r\n    await this.actor.addCondition(\"fatigued\");\r\n    test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\n    await test.roll();\r\n    if (test.failed)\r\n    {\r\n        this.actor.addCondition(\"prone\");\r\n    }\r\n}\r\n\r\nif (location == \"head\")\r\n{\r\n    await this.actor.addCondition(\"stunned\");\r\n    test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\n    await test.roll();\r\n    if (test.failed)\r\n    {\r\n        this.actor.addCondition(\"unconscious\");\r\n    }\r\n}",
  "3jm0NoYpgB6ZuUSl": "args.context.useOnesAttractive = true;",
  "3l7MQSa10Kve2K3P": "this.script.message(await this.actor.applyBasicDamage(Math.ceil(CONFIG.Dice.randomUniform() * 10) + 6, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true}))\r\nthis.actor.addCondition(\"ablaze\");",
  "3LLiSgj6KGtgqcmo": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Language\"));",
  "3na3lnAt3bfysvcD": "const blinded = this.actor.hasCondition(\"blinded\");\r\nif (!blinded)\r\n  this.actor.addCondition(\"blinded\");",
  "3nTSOcCmNZpQWK8b": "this.actor.addCondition(\"blinded\", 3);",
  "3plV9WFqs2prfAdp": "return ![\"NAME.Evaluate\", \"NAME.Gamble\"].map(i => game.i18n.localize(i)).includes(args.skill?.name)",
  "3R6Y4NpNTqPc83wh": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.IPKRMGry6WotuS1G\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "3sfD1nedXLzuYoXJ": "if (this.actor.hasCondition(\"surprised\"))\n{\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"average\"}, skipTargets: true, appendTitle :  \" - \" + this.effect.name}).then(test => test.roll())\n}\n",
  "3SuLF6SImYWEHMo2": "args.context.doombolt = true;",
  "3tE8gFSl28EhCmo5": "await args.actor.addCondition(\"ablaze\")\r\nawait args.actor.addCondition(\"prone\")",
  "3TesBGh8HnlGuafu": "let modifier = this.effect.sourceTest?.result.overcast.usage.other.current || 0\r\n\r\nlet test = await this.actor.setupCharacteristic(\"dex\", {fields: {modifier}, skipTargets: true, appendTitle :  \" - \" + this.script.label});\r\n\r\ntest.roll();",
  "3Vbe6gdW8N0bIvXJ": "if (args.item.type == \"weapon\" || args.item.type == \"trait\")\n{\n    args.item.qualities.value.push({name : \"penetrating\"})\n    args.item.qualities.value.push({name : \"impale\"})\n}",
  "42UATqzohYML6a9t": "if ( !this.actor.hasCondition(\"poisoned\") ) {\n\tthis.effect.delete();\n}",
  "454x3Q95pLvZm0Kx": "return args.skill?.name == game.i18n.localize(\"NAME.ConsumeAlcohol\");",
  "4AO7Fowek5sSmE4g": "const venomUUID = \"Compendium.wfrp4e-core.items.gFkRm9wS65qe18Xv\";\r\nconst venom = this.actor.itemTags.trait.find(t => t.name === \"Venom\");\r\n\r\nif (venom) {\r\n  await this.effect.setFlag(\"wfrp4e-tribes\", \"venom\", {\r\n    _id: venom.id,\r\n    \"system.specification.value\": venom.system.specification.value\r\n  });\r\n  await venom.update({\"system.specification.value\": \"Difficult\"});\r\n} else {\r\n  await this.actor.addEffectItems(venomUUID, this.effect, {\r\n    \"system.specification.value\": \"Challenging\"\r\n  });\r\n}",
  "4cOZzUvu1nytcqNn": "args.initiative = \"-10\"",
  "4cumLUlcuJ7m8C6t": "let item = args.actor.items.find(i => i.name.includes(\"Smoothing\"));\nlet smoothing = item?.effects.find(e => e.name === \"Smoothing\");\nif (smoothing)\n  smoothing.disabled = true;",
  "4drWKXjMgasxY7Jy": "args.actor.system.details.price.gc += Math.floor(args.actor.system.details.price.gc * 0.1);",
  "4FGKZk2f0xrmIDnp": "return args.skill?.name != game.i18n.localize(\"NAME.Research\") && !args.skill?.name?.includes(game.i18n.localize(\"NAME.Language\"));",
  "4fnTKgl0HW9ZrWyJ": "this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty : \"average\"}}).then(async test =>\r\n{\r\n     await test.roll()\r\n     if (test.failed)\r\n     {\r\n         let char = Math.ceil(CONFIG.Dice.randomUniform() * 2) == 2 ? \"s\" : \"t\";\r\n         this.script.message(`<strong>${this.actor.name}</strong> Utracono 1 punkt cechy: ${game.wfrp4e.config.characteristics[char]}`)\r\n         this.actor.update({[`system.characteristics.${char}.initial`] : this.actor.system.characteristics[char].initial - 1})\r\n     }\r\n})",
  "4gkz3LR7CK1b8ulK": "return args.item?.system.attackType != \"ranged\" || this.actor.uuid != this.effect.sourceActor.uuid",
  "4HN98hMdQJxM35pA": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.gz2xy41OSVZ8YBgI\");\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])\r\n",
  "4iu3CmOI19soOYuA": "let characteristics = {\n    \"ws\" : -10,\n    \"bs\" : -10,\n    \"s\" : 0,\n    \"t\" : 0,\n    \"i\" : -10,\n    \"ag\" : -10,\n    \"dex\" : 0,\n    \"int\" : -200,\n    \"wp\" : -200,\n    \"fel\" : -200\n}\nlet traits = [ {name:\"Armour\", value: 2}, {name:\"Construct\"}, {name:\"Dark Vision\"}, {name:\"Fear\", value: 2}, {name:\"Painless\"},{name:\"Undead\"},{name:\"Unstable\"} ];\nlet items = [];\n\nlet updateObj = this.actor.toObject();\nfor (let ch in characteristics)\n{\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\n}\n\nupdateObj.system.characteristics.int.initial = 0;\nupdateObj.system.characteristics.wp.initial = 0;\nupdateObj.system.characteristics.fel.initial = 0;\n\nfor (let trait of traits)\n{\n    let traitItem = await game.wfrp4e.utility.find(trait.name, \"trait\")\n    if (traitItem)\n    {   \n        let t = traitItem.toObject();\n        t.system.specification.value = trait.value;\n        if (trait.disabled)\n        {\n            t.system.disabled = true;\n        }\n        items.push(t);\n    }\n    else \n    {\n        ui.notifications.warn(`Could not find ${trait.name}`, {permanent : true})\n    }\n}\n    \n\n\nupdateObj.name = updateObj.name += \" \" + this.effect.name\n\nawait this.actor.update(updateObj)\nthis.actor.createEmbeddedDocuments(\"Item\", items);\n\n",
  "4iuTz0uInAfMaoGl": "return args.skill?.name?.includes(game.i18n.localize(\"NAME.Language\")) || args.type == \"cast\"",
  "4jLe2XZQVUB8LztP": "args.fields.slBonus += this.effect.getFlag(\"wfrp4e\", \"slBonus\") || 0;",
  "4JVIy5xtVwvadoqv": "this.actor.details.move.run *= 2",
  "4MQ7u4INxp51oyyR": "let characteristics = {\r\n    \"ws\" : 25,\r\n    \"bs\" : 10,\r\n    \"s\" : 15,\r\n    \"t\" : 15,\r\n    \"i\" : 25,\r\n    \"ag\" : 20,\r\n    \"dex\" : 0,\r\n    \"int\" : 10,\r\n    \"wp\" : 25,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [\"Opanowanie\", \"Unik\", \"Zastraszanie\", \"Intuicja\", \"Dowodzenie\", \"Wiedza (Wojenna)\", \"Percepcja\"]\r\nlet skillAdvancements = [15, 15, 15, 15, 15, 10, 10]\r\nlet talents = [\"Zmysł Bitewny\", \"Bitewny Refleks\", \"Finta\", \"Inspirujący\", \"Nieugięty\", \"Wódz\"]\r\nlet trappings = [\"Broń ręczna\", \"Tarcza\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć talentu: ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć przedmiotu: ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "4OlwxU60UqKg81yb": "const target = args.actor;\n\nif (target.has(\"Ethereal\") || target.has(\"Corruption\")) {\n  args.totalWoundLoss += 6;\n  args.modifiers.other.push({label: this.effect.name, value: 6})\n}",
  "4otpLq2TnDdgzpvc": "args.actor.system.details.man -= 3;",
  "4pQW4WLyhjbZR85k": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"average\"}, context : {failure: \"1 Corruption Point Gained\"}})\r\nawait test.roll();\r\nif (test.failed && this.actor.type == \"character\")\r\n{\r\n    this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + 1})\r\n    this.script.message(\"Otrzymano Punkt Zepsucia\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "4QoxhoekgVeZcQA7": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.M5QSWOYt2Rbv2yxW\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "4rb7LfMq9CTnlrpn": "if (args.totalWoundLoss > 0)\n{\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name})\n    await test.roll();\n    if (test.failed)\n    {\n        args.totalWoundLoss += 5;\n        args.modifiers.other.push({label : this.effect.name, value : 5})\n    }\n}",
  "4rhxLzau7jZ4SDxg": "await args.actor.addCondition(\"grappling\")\nawait args.actor.addCondition(\"entangled\")",
  "4rTmV3TNxctUe0ly": "let test = await this.actor.setupCharacteristic(\"ag\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\nawait test.roll();\nif (test.failed)\n{\n   this.actor.addCondition(\"bleeding\");\n}\n",
  "4uAUUZmLgxBKSmXA": "if (args.totalWoundLoss > 0) \n  this.effect.delete();",
  "4XrAeL2DitxE8OaK": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.0hn6UaKq8CoZP2zD\")\nlet data = item.toObject();    \nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "4ylzjgUdHY5D0yVh": "let characteristics = {\r\n    \"ws\" : 25,\r\n    \"bs\" : 10,\r\n    \"s\" : 15,\r\n    \"t\" : 15,\r\n    \"i\" : 25,\r\n    \"ag\" : 20,\r\n    \"dex\" : 0,\r\n    \"int\" : 10,\r\n    \"wp\" : 25,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [game.i18n.localize(\"NAME.Cool\"), game.i18n.localize(\"NAME.Dodge\"), game.i18n.localize(\"NAME.Intimidate\"), game.i18n.localize(\"NAME.Intuition\"), \"Język (Bitewny)\", game.i18n.localize(\"NAME.Leadership\"), \"Wiedza (Sztuka Wojenna)\", game.i18n.localize(\"NAME.Perception\")]\r\nlet skillAdvancements = [15, 15, 15, 15, 10, 15, 10, 10]\r\n\r\nlet talents = [\"Zmysł Bitewny\", \"Mistrz Walki\", \"Bitewny Refleks\", \"Inspirujący\", \"Nieugięty\", \"Wódz\"]\r\nlet trappings = [\"Broń ręczna\",  \"Tarcza\", \"Płytowy napierśnik\", \"Płytowe Naramienniki\", \"Hełm płytowy\", \"Płytowe Nagolenniki\"]\r\nlet specialItems = []    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nlet filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"weapon\"\r\n    },\r\n    {\r\n        property : \"system.weaponGroup.value\",\r\n        value : [\"twohanded\", \"polearm\"]\r\n    }\r\n]\r\n\r\nitems = items.concat(await ItemDialog.createFromFilters(filters, 1, {text : \"Choose an appropriate Polearm or Two-Handed Weapon\"}))\r\n\r\nlet ride = await foundry.applications.api.DialogV2.confirm({title : \"Skill\", content : \"Add Chaos Steed and +20 Ride (Horse)?\", window : {title : this.effect.name}})\r\n\r\nif (ride)\r\n{\r\n    let skill = await game.wfrp4e.utility.findSkill(\"Ride (Horse)\")\r\n    skill = skill.toObject();\r\n    skill.system.advances.value = 20;\r\n    items = items.concat({name : \"Chaos Steed\", type: \"trapping\", \"system.trappingType.value\" : \"misc\"}, skill)\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "4ZR7p8G3OzOBWx0L": "return args.skill?.name !== game.i18n.localize(\"NAME.Endurance\");",
  "52kbfuWrOh6dsTtd": "if (!this.actor.hasCondition(\"blinded\"))\r\n\tthis.actor.addCondition(\"blinded\", 1, {\"flags.wfrp4e.flockOfDoom\" : true})",
  "52mwb33mGrQjq89B": "return args.skill?.name != game.i18n.localize(\"NAME.Research\");",
  "53HFDNuMnX1Aw1a4": "return [\"ws\", \"bs\", \"s\", \"ag\", \"dex\", \"int\", \"wp\", \"fel\"].includes(args.characteristic)",
  "55eYGvSXetDMK80S": "const diseaseIds = this.actor.items.filter(i => i.type == \"disease\").map(i => i.id)\r\nthis.actor.deleteEmbeddedDocuments(\"Item\", diseaseIds)",
  "58rFc9HiBoX66J6p": "let sourceActor = this.effect.sourceActor;\r\nlet damage = args.totalWoundLoss;\r\nlet tb = sourceActor.system.characteristics.t.bonus\r\nargs.abort = `<strong>${this.effect.name}</strong>: Zadano obrażenia: ${sourceActor.name}`;\r\n\r\nlet message = await sourceActor.applyBasicDamage(damage - tb, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true})\r\n\r\nthis.script.message(message.replace(`${tb} Bomnus Wt`, `${tb} × 2 Bonus Wt`))\r\nargs.abort = true;",
  "5DI6cHAg1LHo54Yv": "if (args.opposedTest.result.differenceSL >= 0 && args.opposedTest.result.differenceSL <= 2 && args.opposedTest.result.winner == \"attacker\")\r\n{ \r\n   this.actor.update({\"system.status.fortune.value\" : Math.max(0, (this.actor.system.status.fortune?.value - 1) || 0)})\r\n    this.script.message(`Skradziono 1 Punkt Szczęścia od <strong>${this.actor.name}</strong>`, {blind : true, whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n\r\n}",
  "5dR7Erj3nwsxLAV7": "let characteristics = {\r\n    \"ws\" : 35,\r\n    \"bs\" : 10,\r\n    \"s\" : 25,\r\n    \"t\" : 30,\r\n    \"i\" : 30,\r\n    \"ag\" : 25,\r\n    \"dex\" : 0,\r\n    \"int\" : 15,\r\n    \"wp\" : 35,\r\n    \"fel\" : 15\r\n}\r\nlet skills = [\"Opanowanie\", \"Unik\", \"Zastraszanie\", \"Intuicja\", \"Dowodzenie\", \"Wiedza (Wojenna)\", \"Percepcja\"]\r\nlet skillAdvancements = [25, 15, 25, 25, 30, 20, 20]\r\nlet talents = [\"Zmysł Bitewny\", \"Bitewny Refleks\", \"Finta\", \"Inspirujący\", \"Szczęście\", \"Nieugięty\", \"Niewzruszony\", \"Wódz\"]\r\nlet trappings = [\"Broń ręczna\", \"Tarcza\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć talentu: ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć przedmiotu: ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "5Fe1ELaS6Gnvy0Cj": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) || args.type == \"channelling\" || args.skill?.name == game.i18n.localize(\"NAME.Charm\") || args.skill?.name.includes(`${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`) || args.type == \"cast\"",
  "5GHQxfxlmjyt1fNq": "let item1 = await fromUuid(\"Compendium.wfrp4e-core.items.Item.EO05HX7jql0g605A\")\nlet item2 = await fromUuid(\"Compendium.wfrp4e-core.items.Item.Bvd2aZ0gQUXHfCTh\")\nlet ids = await this.actor.createEmbeddedDocuments(\"Item\", [item1, item2], {fromEffect : this.effect.id})\nthis.actor.updateEmbeddedDocuments('Item', [ {_id: ids[0].id, 'system.specification.value': 16} ] )",
  "5GP9UJMvBZv6kWtI": "this.script.message(await this.actor.applyBasicDamage(8, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))\r\n\r\n\r\nlet msg = ``\r\nlet weapons = args.actor.itemTypes.weapon.filter(i => !i.system.location.value);\r\nlet armour = args.actor.itemTypes.armour.filter(i => !i.system.location.value);\r\nfor(let item of weapons)\r\n{\r\n\tif (item.system.properties.qualities.shield)\r\n\t{\r\n\t\tawait item.system.damageItem(1, \"shield\");\r\n\t}\r\n\telse \r\n\t{\r\n\t\tawait item.system.damageItem(1);\r\n\t}\r\n\tmsg += `<p><strong>${item.name}</strong> damage by 1</p>`\r\n}\r\nfor(let item of armour)\r\n{\r\n\tawait item.system.damageItem(1);\r\n\tmsg += `<p><strong>${item.name}</strong> damage by 1</p>`\r\n}\r\nif (msg)\r\n{\r\n\tthis.script.message(msg, {speaker : {alias : args.actor.name}});\r\n}",
  "5gPAT5Bb2FvQwYNQ": "args.test.preData.other.push(`Dzięki '${this.effect.name}' możesz odwrócić wynik tego testu.`);\r\nargs.test.preData.canReverse = true;\r\nthis.effect.delete();",
  "5IoYTyedCMYwt3ys": "args.fields.slBonus += 2;",
  "5JvKJZPcd6Hz5zvn": "let characteristics = {\r\n    \"ws\" : 10,\r\n    \"bs\" : 0,\r\n    \"s\" : 10,\r\n    \"t\" : 10,\r\n    \"i\" : 20,\r\n    \"ag\" : 10,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 15,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [\"Opanowanie\", \"Unik\", \"Zastraszanie\", \"Dowodzenie\"]\r\nlet skillAdvancements = [15, 15, 10, 5]\r\nlet talents = [\"Zmysł Bitewny\", \"Bitewny Refleks\", \"Finta\", \"Nieugięty\"]\r\nlet trappings = [\"Kolczuga\", \"Nogawice kolcze\", \"Czepiec kolczy\", \"Broń ręczna\", \"Tarcza\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć talentu: ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć przedmiotu: ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = this.effect.name + \" \" + updateObj.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "5JWC0l3JEpOsqbR9": "let characteristics = {\r\n    \"ws\" : 0,\r\n    \"bs\" : 5,\r\n    \"s\" : 0,\r\n    \"t\" : 0,\r\n    \"i\" : 10,\r\n    \"ag\" : 10,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 5,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [\"Unik\", \"Percepcja\"]\r\nlet skillAdvancements = [10, 10]\r\nlet talents = [\"Chodu!\", \"Strzelec Wyborowy\"]\r\nlet trappings = [\"Broń ręczna\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć talentu: ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Nie udało się znaleźć przedmiotu: ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "5KVslRqhqzuFLyk4": "if (!this.actor.has(\"Błogosławieństwo (Taal)\", \"talent\")) return;\r\n\r\nthis.actor.system.characteristics.wp.modifier += 15;",
  "5lc1eHIYQNpSRWip": "if ([\"death\", \"necromancy\"].includes(args.spell?.system.lore.value))\n{\n    args.fields.successBonus += 1\n}\nelse if([\"life\", \"light\", \"heavens\"].includes(args.spell?.system.lore.value))\n{\n    args.fields.modifier -= 10;\n}",
  "5LdJCKfQem1AQK24": "\nif (!args.flags.howlingWarpGale)\n{\n    args.fields.modifier -= 10;\n    args.flags.howlingWarpGale = true; // prevent double application\n}",
  "5lpR78CLhYH6Mjnu": "if (this.actor.has(\"Arboreal\",\"trait\")) return\r\n\r\nthis.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.rOV2s6PQBBrhpMOv\", this.effect)",
  "5M6IgCUncCwyxHok": "let etiquette = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.sYbgpSnRqSZWgwFP\")).toObject();\r\netiquette.name += ` (Słudzy Tzeentch)`;\r\n\r\nlet animosity = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.0VpT5yubw4UL7j6f\")).toObject();\r\nanimosity.system.specification.value = \"Słudzy Nurgle'a\";\r\n\r\nlet roll = await new Roll(\"ceil(1d10 / 3)\").roll({allowInteractive : false});\r\n\r\nroll.toMessage(this.script.getChatData());\r\n\r\nlet mutations = [];\r\nlet msg = `<p><strong>Otrzymaono Mutację</strong></p>`\r\nfor(let i = 0; i < roll.total; i++)\r\n{\r\n    let item;\r\n    let uuid;\r\n    let result;\r\n    if (i % 2 == 0)\r\n    {\r\n        result = await game.wfrp4e.tables.rollTable(\"mutatemental\", {hideDSN: true}, \"Tzeentch\")\r\n    }\r\n    else \r\n    {\r\n        result = await game.wfrp4e.tables.rollTable(\"mutatephys\", {hideDSN: true}, \"Tzeentch\")\r\n    }\r\n    uuid = `Compendium.${result.object.documentCollection}.${result.object.documentId}`;\r\n    item = await fromUuid(uuid);\r\n    if (item)\r\n    {\r\n        msg += `<p>@UUID[${uuid}]{${item.name}}</p>`\r\n        mutations.push(item.toObject());\r\n    }\r\n}\r\nthis.actor.createEmbeddedDocuments(\"Item\", mutations.concat([etiquette, animosity]), {fromEffect : this.effect.id})\r\nthis.script.message(msg);",
  "5MxRDXzUBPfp2KKD": "args.context.useOnesSupportive = true;",
  "5o1XiceC4rutjMms": "return !args.item?.name.includes(game.i18n.localize(\"NAME.Stealth\"))",
  "5ScjIdRUOxblHdWS": "const repaired_message = `<p>Zakończono naprawę: <em>${this.item.name}</em>.</p>`;\r\nconst test = 'Rzemiosło (Stolarstwo)';\r\nconst difficulty = 'challenging';\r\nconst target = 40;\r\n\r\nconst extendedTestData = {\r\n  name: this.item.name,\r\n  type: \"extendedTest\",\r\n  img: this.item.img,\r\n  system: {\r\n    SL: {\r\n      current: 0,\r\n      target: target\r\n    },\r\n    test: {\r\n      value: test\r\n    },\r\n    completion: {\r\n      value: \"remove\"\r\n    },\r\n    difficulty: {\r\n      value: difficulty\r\n    }\r\n  },\r\n  effects: [\r\n    {\r\n      name: `Napraw: ${this.item.name}`,\r\n      img: this.item.img,\r\n      system: {\r\n        transferData : {\r\n            type: \"document\",\r\n            documentType: \"Item\"\r\n          },\r\n          scriptData: [\r\n            {\r\n              label: this.item.name,\r\n              script: `\r\n              let id = this.item.flags.wfrp4e.fromEffect;\r\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\r\n              this.script.message(\"${repaired_message}\");\r\n              await effect.item.delete();\r\n            `,\r\n              trigger: \"deleteEffect\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n  ]\r\n};\r\n\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\r\n",
  "5sI9iYh5j2nx2XyT": "return !([game.i18n.localize(\"NAME.AnimalCare\"), game.i18n.localize(\"NAME.CharmAnimal\")].includes(args.item?.name) || args.item?.name.includes(game.i18n.localize(\"NAME.Ride\")) || args.item?.name.includes(game.i18n.localize(\"NAME.AnimalTraining\")));",
  "5sYpJkT2WXIe0gIZ": "const rating = parseInt(this.effect.name.match(/\\d+/)?.[0]) || 1;\n\nlet crewList = foundry.utils.duplicate(this.actor.system.passengers.list);\nlet selectedCrew = [];\n\nwhile (selectedCrew.length < rating && crewList.length) {\n  selectedCrew.push(crewList.splice(crewList.length * Math.random() | 0, 1)[0]);\n} \n\nfor (let member of selectedCrew) {\n  let actor = game.actors.get(member.id);\n  actor.applyBasicDamage(9, {\n    damageType: game.wfrp4e.config.DAMAGE_TYPE.NORMAL, \n    minimumOne: true, \n    loc: \"roll\", \n    suppressMsg: false, \n    hideDSN: false \n  });\n}",
  "5XAYjiq1i4M7Ky7j": "const trait = this.actor.itemTags.trait.find(t => t.name === \"Regeneracja\");\r\nconst name = \"Zgniła Regeneracja\";\r\n\r\nif (!trait) return;\r\n\r\nconst effect = trait.effects.find(e => e.name === \"Regeneracja\");\r\nconst scriptData = effect.system.scriptData;\r\n\r\nscriptData[0].script = `  \r\n  let chatData = {whisper: ChatMessage.getWhisperRecipients(\"GM\")};\r\n  let message = \"\";\r\n  \r\n  let wounds = foundry.utils.duplicate(this.actor.status.wounds);\r\n  let regenRoll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n  let regen = regenRoll.total;\r\n  \r\n  if (wounds.value >= wounds.max)\r\n    return;\r\n  \r\n  if (wounds.value > 0) {\r\n    wounds.value += Math.floor(regen / 2);\r\n    if (wounds.value > wounds.max) {\r\n      wounds.value = wounds.max;\r\n    }\r\n    message += \\`<b>\\${this.actor.name}</b> Odzyskane punkty Żywotności: \\${regen}.\\`;\r\n  \r\n    if (regen === 10) {\r\n      message += \"<br>Dodatkowo zregenerowano krytyczną ranę.\";\r\n    }\r\n  } else if (regen >= 8) {\r\n    message += \\`<b>\\${this.actor.name}</b> wylosowano \\${regen} i odzyskano 1 punkt Żywotności.\\`;\r\n    wounds.value += 1;\r\n    if (regen === 10) {\r\n      message += \"<br>Dodatkowo zregenerowano krytyczną ranę.\";\r\n    }\r\n  } else {\r\n    message += \\`<b>\\${this.actor.name}</b> wylosowano \\${regen} - brak efektu.\\`;\r\n  }\r\n  \r\n  await this.actor.update({\"system.status.wounds\": wounds});\r\n  this.script.message(message, {whisper: ChatMessage.getWhisperRecipients(\"GM\")});\r\n`\r\n\r\nawait effect.update({\r\n  name,\r\n  \"system.scriptData\": scriptData\r\n});\r\n\r\nawait trait.update({name});",
  "5Zxc13GBaJaxCf48": "const visor = this.item.getFlag('wfrp4e', 'visor');\n\nif (!visor)\n  args.fields.modifier -= 10;\nelse\n  args.fields.modifier -= 20;",
  "6136BMmiGLwZ16H1": "return !!args.skill",
  "62Ky6bC1EnTllSJA": "if (this.effect.sourceActor.uuid != args.actor.uuid)\n{\n    this.script.message(await this.actor.applyBasicDamage(this.effect.sourceTest.result.overcast.usage.other.current, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true}));\n}",
  "65o8pQj6oGNnXce6": "let ch = this.effect.getFlag(\"wfrp4e\", \"characteristic\")\nthis.actor.system.characteristics[ch].modifier += 10;",
  "65xE9OV5sA1ZWT7j": "if (args.test.options.diceman && args.test.succeeded)\r\n{\r\n\r\nlet SL = Math.floor(args.test.target / 10) - Math.floor(args.test.result.roll / 10)\r\nlet ones = Number(args.test.result.roll.toString().split(\"\").pop())\r\n\r\nif (ones > SL)\r\n   args.test.result.other.push(`<span class=\"hide-option\"><b>${this.effect.name}</b>: ${ones + args.test.successBonus + args.test.slBonus} PS</span>`)\r\n}",
  "6A6ddQDJo23oOWtK": "const SL = this.effect.getFlag(\"wfrp4e\", \"SL\") ?? 0;\r\n\r\nargs.fields.slBonus += SL;",
  "6Aqq4F4Xui923sc6": "// Imbibing this substance grants the user the Painless Creature Trait.\r\nconst hasColdBlooded = this.actor.has(\"Zimnokrwisty\")\r\nif (hasColdBlooded === undefined) \r\n{\r\n  let item = await fromUuid(\"Compendium.wfrp4e-core.items.mCh1KK9jomwFZcLB\");\r\n  this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id});\r\n  \r\n  this.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> otrzymuje Cechę Stworzeń \"Zimnokrwisty\" i może odwrócić dowolny nieudany test oparty na Sile Woli.</p>\r\n  <p>Jeśli postać otrzyma Stan Zaskoczenie, ten stan nie znika za pierwszym razem, gdy pownien być usunięty (zwykle na koniec Rundy, gdy ofiara jest zaatakowana).</p>`, \r\n  {whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })   \r\n}",
  "6AsCMHZ4IYPq7Uxf": "return args.skill?.name.includes(\"Channelling\");",
  "6BmvV9c03FkfisnE": "// Apply changes when the mask is worn\r\n\r\nif (args.equipped) {  \r\n  this.actor.createEmbeddedDocuments(\"ActiveEffect\", [this.item.effects.contents[1]?.convertToApplied()])  \r\n  this.script.message(`<strong>${this.item.name}</strong> została założona przez ${this.actor.name}. <br>\r\n      Otzymano +1 poziom Zepsucia, jeśli test na ekspozycję zakończy się niepowodzeniem, co będzie musiało zostać ręcznie zaaplikowane.<br>\r\n      Jeśli maska jest noszona przez ponad godzinę lub wykorzystane są jej efekty, postać jest wystawiona na @Corruption[moderate]{Przeciętne Zepsucie}`,\r\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \r\n}\r\n\r\n// Notify of lingering effects when mask is removed\r\nelse if (!args.equipped)\r\n{\r\n    await this.item.effects.contents[0].delete();\r\n    await this.item.update({name : this.item.name += \" (Wykorzystana)\"})\r\n    this.script.message(`<strong>${this.item.name}</strong> noszona przez ${this.actor.name} została zdjęta i utraciła swoje właściwości. Jednak jej efekty trwają przez [[1d10+4]] dni, po czym powinny zostać ręcznie usunięte.`, \r\n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\r\n    )\r\n    \r\n}",
  "6elUNF58TaiYjxcx": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  \" - \" + this.effect.name, context : {failure: \"Otrzymano Stan Oszołoemienia\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"stunned\");\r\n}",
  "6EXkbVTRBhKTEu81": "if (!args.flags.bothEyes)\r\n{\r\n\targs.flags.bothEyes = true;\r\n\targs.fields.modifier -= 30\r\n}",
  "6Fe8M5MdklKS2olx": "return args.characteristic != \"fel\"",
  "6fElmBxTjdAaubbK": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"average\"}});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}\r\n",
  "6frithfMs7Nbv0IZ": "args.fields.slBonus += this.effect.sourceActor.system.characteristics.fel.bonus;",
  "6gRixT3zIOAberJb": "const disease = await fromUuid(\"Compendium.wfrp4e-soc.items.Item.8Q9JYtR1y3B5J6UH\");\nconst data = disease.toObject();\ndata.system.incubation.value = 0;\ndata.system.duration.active = true;\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});",
  "6H6vNjzvMGl2ZqCR": "if (args.totalWoundLoss > 0)\r\n     this.script.message(`<b>Ostrze Nurglitch: ${args.actor.name}</b> musi zdać <b>Prosty (+40) Test Odporności</b> lub otrzyma @UUID[Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb]{Ropiejącą Ranę}`, {whisper: ChatMessage.getWhisperRecipients(\"GM\") })",
  "6hAgggYpNR3r4QWC": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Q2MCUrG2HppMcvN0\")\r\nitem = item.toObject()\r\nlet species = args.actor.Species || \" twojego gatunku\"\r\nitem.name = `Wrogość (wszyscy oprócz ${species})`\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "6jcTzK1XEuWqAacN": "args.abort = true;\r\nthis.script.notification(`Nie można używać: ${game.wfrp4e.config.locations[this.effect.getFlag(\"wfrp4e\", \"location\")]}!`, \"error\")",
  "6jp8slPU33oBQe1V": "return args.context.crewTest?.system.handling !== true;",
  "6JrUjs3g5x6bFnj3": "let bite = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\r\nlet sense = await fromUuid(\"Compendium.wfrp4e-core.items.9h82z72XGo9tfgQS\")\r\nlet biteData = bite.toObject();\r\nlet senseData = sense.toObject();\r\n\r\nbiteData.system.specification.value = 6 - this.actor.characteristics.s.bonus;\r\nsenseData.name = senseData.name += game.i18n.localize(\"SPEC.Smell\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [biteData, senseData], {fromEffect : this.effect.id})",
  "6kifXp2jXEaQVJsg": "let useWard = await foundry.applications.api.DialogV2.confirm({\r\n\tcontent : `<p>Czy wziąć pod uwagę Ochronę otrzymaną z: <strong>${this.effect.name}</strong>?`,\r\n\twindow : {\r\n\t\ttitle : this.effect.name,\r\n\t}\r\n})\r\n\r\nif (useWard)\r\n\targs.ward = 9;",
  "6LMzIdmCSYctgmGx": "const stupid = this.actor.items.find(i => i.name === \"Stupid\");\r\n\r\nif (!stupid) return;\r\n\r\nawait stupid.update({\"system.disabled\": true});",
  "6maNAmREdataXmo4": "if (this.actor.system.status?.ward?.value) {\n  this.actor.system.status.ward.value = Math.max(7, this.actor.system.status.ward.value-1);\n} else {\n  this.actor.system.status.ward.value = 9;\n}",
  "6Mjy0jDqczA8BxhS": "return ![\"roll\", \"none\"].includes(args.fields.hitLocation)",
  "6mpw9cGseG4W4eyd": "if (this.actor.system.status.advantage.value >= 2)\r\n{\r\n    await this.actor.modifyAdvantage(-2);\r\n    this.script.notification(\"Zmniejszono Punkty Przewag\")\r\n}\r\nelse \r\n{\r\n    return this.script.notification(\"Brak Wymaganych Punktów Przewag!\", \"error\")\r\n}\r\n\r\nlet test = await this.actor.setupTrait(this.item)\r\nawait test.roll();",
  "6MSodMuZ5xk2JJJ9": "if (!this.actor.hasCondition(\"ablaze\"))\n{\n    this.effect.delete();\n}",
  "6nA5LPXneAahHX2W": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle : ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\tlet sourceActor = this.effect.sourceActor;\r\n\tthis.script.message(await this.actor.applyBasicDamage(4 + sourceActor.system.characteristics.s.bonus, {suppressMsg : true}))\r\n}",
  "6oSs8qKFNFz2lSmh": "if (args.actorsystem.details.move.sail.value > 0)\n  args.actor.system.details.move.sail.value = 0;\n",
  "6P2QNPKfwQ1xwxZT": "args.fields.slBonus ++",
  "6qJP0hpShEM43ohx": "const actor = args.actor;\n\nif (actor.itemTypes.skill.find(s => s.name === \"Lore (Oceans)\")) {\n  const loreTest = await actor.setupSkill('Lore (Oceans)',  {\n    appendTitle: ` – ${this.effect.name}`,\n    skipTargets: true,\n    fields: {difficulty: 'hard'},\n    characteristic: 'int',\n  });\n  await loreTest.roll();\n\n  if (loreTest.succeeded) {\n    loreTest.result.other.push(`<b>${actor.name}</b> recognizes lure of the Leviathan.`);\n    loreTest.renderRollCard();\n    return;\n  } \n}\n\nlet test = await actor.setupSkill('Cool',  {\n  appendTitle: ` – ${this.effect.name}`,\n  skipTargets: true,\n  fields: {difficulty: 'easy'},\n  characteristic: 'wp',\n});\nawait test.roll();\n\nif (!test.succeeded) {\n  test.result.other.push(`<b>${actor.name}</b> became @Condition[Stunned] by the sight.`);\n  test.renderRollCard();\n  actor.addCondition(\"stunned\");\n}",
  "6qUKKep5vhFYmo1J": "return args.type == \"channelling\" || args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\"))",
  "6QZUX7ZrFxOzqI0b": "let regenerate = this.actor.items.getName('Regeneracja')\r\n\r\nif (regenerate)\r\n{\r\n    let effect = regenerate.effects.contents[0]\r\n    let scriptData = effect.system.scriptData;\r\n    \r\n    scriptData[0].script = scriptData[0].script.replace(\"1d10\", \"1d10 * 2\")\r\n}",
  "6tjn0RH4VyOPFneS": "return [\"NAME.Row\", \"NAME.Swim\"].map(i => game.i18n.localize(i)).includes(args.skill?.name);",
  "6U8xox4mBrn5eYIp": "if (args.totalWoundLoss > 0)\n   args.actor.addCondition(\"ablaze\")",
  "6ubojp9zwbfJnosT": "args.actor.system.details.move.value += 1;",
  "6uldpFvKOCoW92cC": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.uqGxFOEqeurwkAO3\")\r\nitem = item.toObject()\r\n\r\nitem.system.specification.value = 10;\r\nitem.name += \" (Ogień)\"\r\nfoundry.utils.setProperty(item, \"flags.wfrp4e.breath\",  \"fire\")\r\n\r\nItem.create(item, {parent : this.actor, fromEffect: this.effect.id})",
  "6V3qHON3mcerlBlB": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\");\r\n}",
  "6Ws3ieQ7pG5poUyT": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = await ValueDialog.create({text : \"Podaj Tradycję Magiczną\", title : this.effect.name}, \"\", Object.values(game.wfrp4e.config.magicLores));\r\n    if (value)\r\n    {\r\n     this.item.updateSource({\"system.specification.value\" : value});\r\n    }\r\n}",
  "6xTtJEhRc4OjcDTf": "if (getProperty(args.data, \"system.status.fortune.value\"))\r\n{\r\n\tthis.script.notification(\"Nie można zmienić liczby Punktów Szczęścia!\");\r\n\tdelete args.data.system.status.wounds.value;\r\n}",
  "6XWJWOUQPgKMsFul": "return args.item?.system.attackType != \"ranged\" || args.flags.howlingWarpGale",
  "6ZS1rQLkNvMDO0Fp": "let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\nif (args.test.isFumble && roll == 1 && !args.test.result.misfire)\r\n{\r\n  args.test.result.misfire = game.i18n.localize(\"Misfire\") + \" (Wyrzucono 1)\"\r\n  args.test.result.misfireDamage = eval(parseInt(args.test.result.roll.toString().split('').pop()) + args.test.item.Damage)\r\n}\r\nelse if (args.test.isFumble && roll != 1)\r\n{\r\n    args.test.result.other.push(\"Rzut na Niewybuch: \" + roll)\r\n}\r\n\r\n",
  "715G1Bf0haOHvmYQ": "return !(args.skill?.name == game.i18n.localize(\"NAME.Bribery\") || args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\")))",
  "71DmrxCTKGYL4Z7X": "return [\"fel\"].includes(args.characteristic)",
  "7ateEtT5HXg1vObY": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.AcnFuDKRemLI9ey7\",     // Nose for Trouble\n  \"Compendium.wfrp4e-core.items.Item.WoXShzaYkV5F6c48\",         // Master of Disguise\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "7Ck0fkzE4WQ62qVe": "if (args.item.type  == \"skill\" && args.item.name == game.i18n.localize(`NAME.Melee (${game.i18n.localize(\"SPEC.Basic\")})`))\r\n{\r\n     args.item.system.modifier.value += 20;\r\n}",
  "7e8FgQUF2oANANmx": "return args.skill?.name == game.i18n.localize(\"NAME.MeleeBrawling\") || args.item?.weaponGroup?.value == \"brawling\"",
  "7F3miqRA0ceMUBIu": "return args.characteristic != \"int\" || args.skill",
  "7F6aGxZJjwxm5e5P": "if (args.test.result.castOutcome == \"failure\")\r\n{\r\n    ValueDialog.create({text : \"Wprowadź utracone punkty żywotności, aby zyskać liczbę PS\", title : this.effect.name}, \"0\").then(async value => {\r\n        value = Math.clamped(value, 0, 3)\r\n        if (value == 0)\r\n        {\r\n            return;          \r\n        }\r\n        else if (Number.isNumeric(value))\r\n        {\r\n            this.script.notification(`Utrcone Punkty Żywotności: ${value}`)\r\n            this.actor.modifyWounds(-1 * value)\r\n            await this.item.system.toggleEquip();\r\n            args.test.addSL(value);\r\n            args.test.preData.other.push(`<strong>${this.effect.name}</strong>: +${value} PS`)\r\n        }\r\n    })\r\n}",
  "7f6OsttTzE7Hvzfk": "if (this.actor.statuses.has(\"infighting\")) // Only add +10 if already infighting\r\n    args.prefillModifiers.modifier += 10; \r\n\r\n\r\nargs.prefillModifiers.successBonus += 1; \r\n",
  "7H6wYyJ6cpaoc2QQ": "return args.skill?.name == game.i18n.localize(\"NAME.Cool\");",
  "7JW9t8AYSDkkzG2V": "// Apply changes when the mask is worn\r\n\r\nif (args.equipped) \r\n{  \r\n  this.actor.createEmbeddedDocuments(\"ActiveEffect\", [this.item.effects.contents[1]?.convertToApplied()])  \r\n  this.script.message(`<strong>${this.item.name}</strong> została założona przez ${this.actor.name}. <br>\r\n      Jeśli maska jest noszona przez ponad godzinę lub wykorzystane są jej efekty, postać jest wystawiona na @Corruption[moderate]{Przeciętne Zepsucie}`,\r\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \r\n}\r\n\r\n// Notify of lingering effects when mask is removed\r\nelse if (!args.equipped)\r\n{\r\n    await this.item.effects.contents[0].delete();\r\n    await this.item.update({name : this.item.name += \" (Wykorzystana)\"})\r\n    this.script.message(`<strong>${this.item.name}</strong> noszona przez ${this.actor.name} została zdjęta i utraciła swoje właściwości. Jednak jej efekty trwają przez [[1d10+4]] dni, po czym powinny zostać ręcznie usunięte.`, \r\n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\r\n    )\r\n    \r\n}",
  "7n3SEAGRA5ESK8gV": "args.context.disarm = true;",
  "7OmrMjaU48o2FEZi": "\nthis.actor.characteristics.t.bonus = 10\n\nthis.actor.details.move.value = 0;\nthis.actor.details.move.walk= 0;\nthis.actor.details.move.run = 0;",
  "7ScfB4o1QhXnNUfq": "return ![\"int\", \"wp\"].includes(args.characteristic)",
  "7szLG4VALuuy1cPm": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"easy\"}})\nawait test.roll();\nif (test.failed)\n{ \n  await this.actor.addCondition(\"fatigued\")\n} ",
  "7T3iXgrL72fea67C": "const bloodyFluxUUID = \"Compendium.wfrp4e-core.items.Item.herUmN51D9TiL2Vn\";\r\n\r\nconst test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"easy\"},\r\n  context: {\r\n    success: `Butcher is healed.`,\r\n    failure: `Butcher contracts @UUID[${bloodyFluxUUID}].`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed) {\r\n  await this.actor.addEffectItems(bloodyFluxUUID, this.effect);\r\n} else {\r\n  const SL = test.result.SL;\r\n  const heal = 1 + SL;\r\n  await this.actor.modifyWounds(heal);\r\n  this.script.message(`Butcher healed ${heal} Wounds.`);\r\n}",
  "7UUS0gX2Pbi0HHiz": "return args.skill?.name !== game.i18n.localize(\"NAME.Swim\");",
  "7VAhXHov6pR1SkgD": "return args.item?.name == game.i18n.localize(\"NAME.Endurance\");",
  "7w7QA7GBhzZ98OS0": "const sin = this.effect.sourceActor.system.status.sin.value;\nconst result = await WFRP_Tables.rollTable(\"manann-mood-made-meaningless\", sin);\nlet match = result.text.match(/b>([^<]+)/i);\nlet key = match[1];\nlet roll = new Roll(\"5d10\");\nlet value = undefined;\n\nawait this.script.message(result.text, {flavor: result.title});\n\nswitch (key) {\n  case 'Stromfels Triumphant!':\n    value = 0;\n    break;\n  case 'Stromfels Ascends!':\n    await roll.evaluate();\n    if (this.actor.system.status.mood.value > 0)\n      value = -roll.total;\n    else if (this.actor.system.status.mood.value < 0)\n      value = roll.total;\n    break;\n  case 'No effect.':\n    break;\n  case 'Manann Provoked!':\n    await roll.evaluate();\n    value = -roll.total;\n    break;\n}\n\nif (roll._evaluated)\n  await roll.toMessage();\n\nawait this.effect.setFlag(\"wfrp4e-soc\", \"m4result\", {result: key, value});",
  "7wBWUw05q0igh508": "// Imbibing this substance grants the user the Painless Creature Trait.\r\nconst hasPainless = this.actor.has(\"Nie Czuje Bólu\");\r\nif (hasPainless === undefined) \r\n{\r\n  let item = await fromUuid(\"Compendium.wfrp4e-core.items.wMwSRDmgiF2IdCJr\");\r\n  let data = item.toObject()\r\n  this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n  \r\n  this.script.message(\r\n  `<p><strong>${this.actor.prototypeToken.name}</strong>: Otrzymano cechę stworzenia \"Nie Czuje Bólu\". Ten efekt trwa przez godzinę, po czym znika, a wszystkie powstrzymywane dotychczas efekty ran uderzają jednocześnie.</p>\r\n    <p>Uwaga: ten efekt nie chroni przed otrzymaniem trafienia krytycznego lub śmierci. Po prostu pozwala zignorować część efektów wynikających z Ran Krytycznych.</p>`, \r\n    { whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true})\r\n}",
  "7WR2hJjHPhHhHxAq": "let poisoned = args.actor.hasCondition(\"poisoned\")\r\nif (poisoned)\r\n{\r\n   this.script.notification(`Usunięto liczbę stanów Zatrucia: ${poisoned.conditionValue}`)\r\n   poisoned.delete();  \r\n}\r\nelse\r\n  this.script.notification(`Brak stanów Zatrucia`)",
  "7ZoFUMDG2WJd8RMg": "this.script.message(`Otrzymano <strong>${this.effect.name}</strong> Bonus`);",
  "84IB8CWa55XzoAkv": "return ([game.i18n.localize(\"NAME.AnimalCare\"), game.i18n.localize(\"NAME.CharmAnimal\")].includes(args.item?.name) || args.item?.name.includes(game.i18n.localize(\"NAME.Ride\")) || args.item?.name.includes(game.i18n.localize(\"NAME.AnimalTraining\")));",
  "86ivOsBQAuu0UmFg": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, appendTitle : ` - ${this.effect.name}`, skipTargets: true});\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"poisoned\");\n}",
  "87rrZ3ojHrXa3lCn": "this.actor.modifyWounds(1)",
  "8AoA4bnstBtglRGZ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.wMwSRDmgiF2IdCJr\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "8araLuwmBq8GKEw3": "let APIgnored = args.AP.layers.reduce((prev, current) => prev + ((current.weakpoints && !current.ignored) ? current.value : 0), 0)\r\n\r\nif (APIgnored)\r\n{\r\n    args.modifiers.ap.ignored += APIgnored\r\n    args.modifiers.ap.details.push(`<strong>${this.effect.name}</strong>: zignorowano PP z wadą \"Wrażliwe Punkty\" (${APIgnored})`)\r\n}",
  "8ByuHnUZ4RNTdGVv": "let strLoss = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\nlet tghLoss = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n\r\nif (!this.actor.has(game.i18n.localize(\"NAME.Undead\")) && !this.actor.has(game.i18n.localize(\"NAME.Daemonic\"))) \r\n{\r\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), { appendTitle: \" - \" + this.effect.name, fields: { difficulty: \"average\" }, context: { failure: `Utracono ${strLoss} punktów Siły oraz ${tghLoss} punktów Wytrzymałości` } }).then(async test => {\r\n        await test.roll();\r\n        if (test.failed) {\r\n            this.actor.update({ \"system.characteristics.s.initial\": this.actor.system.characteristics.s.initial - strLoss, \"system.characteristics.t.initial\": this.actor.system.characteristics.t.initial - tghLoss })\r\n        }\r\n    })\r\n\r\n}\r\nelse {\r\n    this.script.notification(`<strong>${this.actor.name}</strong> jest odprony na: ${this.effect.name}`)\r\n}\r\n",
  "8fefDfiYKFOWdPER": "args.update({texture : {scaleX : 2, scaleY: 2, src: \"modules/wfrp4e-core/tokens/popout/gor.webp\"}});",
  "8g2iitsgaJarKQpr": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.V0c3qBU1CMm8bmsW\")\nlet data = item.toObject()\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n",
  "8gCja0mfKt4nYVZc": "args.fields.slBonus += 2 ",
  "8GyJgdHVBaLrHCY8": "let type = this.item.getFlag(\"wfrp4e\", \"breath\")\r\nlet types = {\r\n    none : \"Brak\",\r\n    cold : \"Zimno\",\r\n    corrosion : \"Kwas\",\r\n    fire : \"Ogień\",\r\n    electricity : \"Elektryczność\",\r\n    poison : \"Trucizna\",\r\n    smoke : \"Dym\",\r\n    various : \"Różne\"\r\n}\r\nif (!type)\r\n{\r\n    type = (await ItemDialog.create(ItemDialog.objectToArray(types, this.item.img), 1, \"Wybierz rodzaj Zionięcia\"))[0]?.id;\r\n    this.item.updateSource({\"flags.wfrp4e.breath\" : type})\r\n}\r\n\r\nif (!this.item.name.includes(\"(\") && types[type] && type != \"none\")\r\n{\r\n    this.item.updateSource({name : this.item.name += ` (${types[type]})`, \"system.specification.value\" : this.item.system.specification.value.replace(\"(Typ)\", \"\").trim()})\r\n}",
  "8hIyWDyfbgGAig65": "return [\"ws\", \"bs\", \"s\", \"t\", \"ag\", \"dex\"].includes(args.characteristic)",
  "8jvEVPUCg3rKG48Y": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9fq6p9Q6H02LjaSi\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "8K9tpCwvFC9INk5V": "if ([\"t\", \"wp\"].includes(args.characteristic))\r\n{\r\n\targs.fields.modifier += 10;\r\n}\r\nelse if ([\"ag\", \"i\", \"int\"].includes(args.characteristic))\r\n{\r\n\targs.fields.modifier -= 10;\r\n}",
  "8LmUVQxOwTLSeabg": "return args.data.targets.length > 0 || !args.weapon?.system.qualities.value.find(i => i.name == \"shield\") // Should count even if they don't have the skill",
  "8N3Uqjq1ZxPxo4pk": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Lore\"))",
  "8noxHUQKR55Kx1YN": "this.actor.system.status.corruption.max += 1",
  "8oE0DTzz0krOfFlV": "args.item.system.qualities.value.push({name : \"magical\"})\r\nargs.item.system.qualities.value.push({name : \"impact\"})\r\n",
  "8RNziYGGb4sp3BGQ": "if (!args.test.weapon?.name.includes(\"Drakefire\"))\r\n{\r\n    args.test.result.misfire = game.i18n.localize(\"Misfire\");\r\n    args.test.result.misfireDamage = (0, eval)(parseInt(args.test.result.roll.toString().split('').pop()) + args.test.weapon.system.Damage);\r\n}",
  "8rq4GL5d5nCn4kO7": "let caster = this.effect.sourceActor\r\nif (caster)\r\n{\r\n    let healed = caster.characteristics.wp.bonus\r\n    this.actor.modifyWounds(healed);\r\n    this.script.message(`<strong>${this.actor.prototypeToken.name}</strong> Odzyskuje Punkty Żywotności: ${healed}`)\r\n}",
  "8ShLVT0bK1eQpinj": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.k00PimCWkff11IA0\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])",
  "8ThudCYRqkjQIwJH": "if (args.opposedTest.attackerTest.result.critical)\r\n{\r\n   args.actor.addCondition(\"ablaze\")\r\n}",
  "8TRiAJ8thIKE4IoL": "\nlet SL = Number(getProperty(this.item, \"flags.wfrp4e.sourceTest.result.SL\") || 1)\n\nargs.actor.characteristics.i.modifier += 10 * SL\nargs.actor.characteristics.ag.modifier += 10 * SL",
  "8tyMXDfHR8AJBdDu": "let weakpointsAP = args.AP.layers.filter(i => !i.ignored && i.weakpoints).reduce((ap, layer) => ap + layer.value, 0);\r\n\r\nif (weakpointsAP > 0)\r\n{\r\n    args.modifiers.ap.ignored += weakpointsAP;\r\n    args.modifiers.ap.details.push(`${this.effect.name} - Ignoruje Wrażliwe Punkty (${weakpointsAP})`);\r\n}",
  "8vpAtJ93GIeye1qj": "return args.type == \"cast\"",
  "8WeYU5e5LN9UeWFs": "if (args.item.type == \"spell\")\n{\n   let range = parseInt(args.item.Range)\n   if (Number.isNumeric(range))\n   {\n          args.item.system.range.value = \"2 * \" + args.item.system.range.value\n   }\n}",
  "8wG9l4T9fc1bM0TN": "let item = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.kJNAY1YRaCy9IgmT\")).toObject();\r\nitem.system.specification.value = 1;\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "8WJsecxdndaHRxxS": "this.actor.status.addArmour(this.actor.characteristics.wp.bonus, {source: this.effect, magical : true})",
  "8xqYrBIf1Zhlwizg": "const repaired_message = `<p>Zakończono podnoszenie <em>kotwicy</em>.</p>`;\r\nconst test = 'Siła';\r\nconst difficulty = 'vhard';\r\nconst target = 20;\r\n\r\nconst extendedTestData = {\r\n  name: this.item.name,\r\n  type: \"extendedTest\",\r\n  img: this.item.img,\r\n  system: {\r\n    SL: {\r\n      current: 0,\r\n      target: target\r\n    },\r\n    test: {\r\n      value: test\r\n    },\r\n    completion: {\r\n      value: \"remove\"\r\n    },\r\n    difficulty: {\r\n      value: difficulty\r\n    }\r\n  },\r\n  effects: [\r\n    {\r\n      name: `Podnieś kotwicę ${this.item.name}`,\r\n      img: this.item.img,\r\n      system: {\r\n        transferData : {\r\n            type: \"document\",\r\n            documentType: \"Item\"\r\n          },\r\n          scriptData: [\r\n            {\r\n              label: this.item.name,\r\n              script: `\r\n              let id = this.item.flags.wfrp4e.fromEffect;\r\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\r\n              this.script.message(\"${repaired_message}\");\r\n              await effect.item.delete();\r\n            `,\r\n              trigger: \"deleteEffect\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n  ]\r\n};\r\n\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\r\n",
  "8yBr6VbdKcrWUuqw": "this.actor.characteristics.i.value= \"-\"\nthis.actor.characteristics.int.value= \"-\"\nthis.actor.characteristics.wp.value= \"-\"\nthis.actor.characteristics.fel.value = \"-\"",
  "8ZAUBSH9CM9OTpTL": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Perception\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"easy\"}});\r\nawait test.roll();\r\n\r\nif (test.succeeded)\r\n{\r\n    this.actor.addCondition(\"stunned\")   \r\n}\r\nelse if (test.failed)\r\n{\r\n    this.actor.addCondition(\"poisoned\", 2);\r\n}",
  "8zTkDVziBPaNbMQX": "let filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = await ItemDialog.createFromFilters(filters, 6, {text :\"Wybierz 6 Zaklęć Magii Prostej\"})\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"\"\r\n    }\r\n]\r\n\r\nlet arcane = await ItemDialog.createFromFilters(filters, 9, {text : \"Wybierz 9 Zaklęć Magii Tajemnej\"})\r\n\r\nlet items = petty.concat(arcane).map(i => i.toObject())\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "91S2GnBFYFbxmOCK": "this.actor.characteristics.s.bonus += 1\r\nthis.actor.characteristics.s.calculationBonusModifier -= 1",
  "93K85NnVwjVNXlZq": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Trade\"));",
  "94eDAi6pkMhG3Ex9": "this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [this.effect.id]);",
  "956dUb5sd6OtbWZR": "args.fields.successBonus++;",
  "96Y1yIH1lRjTs5hL": "if (args.test.failed && args.test.characteristicKey == \"wp\")\r\n{\r\n    this.actor.addCondition(\"broken\")\r\n}",
  "98nKfcimlaPeM9h5": "await this.actor.addCondition(\"bleeding\")\nawait this.script.message(await this.actor.applyBasicDamage(10, {suppressMsg : true}));",
  "9A7rYY3FKi5XLihG": "fromUuid(\"Compendium.wfrp4e-core.items.5QcrpLQWWrsbKR79\").then(item => {\r\n     let data = item.toObject();\r\n     data.system.tests.value = data.system.tests.value.replace(\"monet\", \"metalowych przedmiotów\");\r\n     data.system.description.value += \"<p>Ten talent jest rozszerzony również na dowolny metalowy obiekt ze względu na <strong>Metaliczne powinowactwo</strong></p>\"\r\n     this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\r\n})",
  "9AMoFRATTAfdKlKN": "const test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"challenging\"},\r\n  context: {\r\n    failure: `Received @Condition[Poisoned] Condition.`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed) {\r\n  args.actor.addCondition(\"poisoned\");\r\n  const speaker = ChatMessage.getSpeaker({actor: args.actor});\r\n  this.script.message(`<p>${speaker.alias} received 1 @Condition[Poisoned] Condition from Spider Venom.</p><p>Targets reduced to 0 wounds while suffering a @Condition[Poisoned] condition from these arrows become @Condition[Unconcious], but are not at risk of death from any remaining @Condition[Poisoned] conditions as would normally be the case.</p>`);\r\n}",
  "9bJGJrLqslV5lBya": " return args.characteristic == \"bs\"",
  "9eL5JbQQmCY030ba": "this.actor.addCondition(\"poisoned\");",
  "9EVj4bmZJex45Mt7": "return args.skill?.name != game.i18n.localize(\"NAME.Athletics\");",
  "9eWR4mdaoCSQawDT": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.GlShFJF2TpsNh1FX\");\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n",
  "9fK07tqqZyPg7dpx": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty: \"veasy\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n      this.script.notification(\"Otrzymano <strong>Ropiejącą Ranę</strong>\")\r\n      let item = await fromUuid(\"Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb\")\r\n      this.actor.createEmbeddedDocuments(\"Item\", [item.toObject()])\r\n}\r\nelse \r\n{\r\n    this.script.notification(\"Uniknięto <strong>Ropiejącej Rany</strong>\")\r\n}\r\n",
  "9fNHye2N2DORR0A3": "return !args.item.name.includes(\"Weapon\")",
  "9HWEDsnNxSykqbF5": "args.actor.system.details.move.value += 3;\nargs.actor.system.status.carries.max = Math.floor(args.actor.system.status.carries.max * 0.25);\nargs.actor.system.details.price.gc *= 1.1;",
  "9JnPK1jNUEso7Pv8": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9h82z72XGo9tfgQS\")\r\nlet data = item.toObject();\r\ndata.name += ` (${game.i18n.localize(\"SPEC.Smell\")})`\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "9MDi3ok9gPwtbALf": "args.actor.details.move.value /= 2",
  "9MwRUzRinhq1IjhG": "args.actor.addCondition(\"grappling\");",
  "9nroaZDkW3WXNkB7": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.4MJJCiOKPkBByYwW\");\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "9ob2lPnk3PDot9Tx": "this.actor.addCondition(\"blinded\", this.effect.sourceTest.result.SL)",
  "9qWUuEF8F5nehF1y": "args.item.system.qualities.value = args.item.system.qualities.value.concat([{name : \"magical\"}, {name : \"unbreakable\"}])\r\nargs.item.system.damage.value += ` + ${this.effect.sourceActor.system.characteristics.wp.bonus}`",
  "9RFoasDcFnYZ1txR": "return args.skill?.name == game.i18n.localize(\"NAME.Perception\");",
  "9VfeubiCV83LN9iY": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")\r\nlet data = item.toObject();\r\ndata.name += ` (Podczas Szarży)`\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "9WZa63lr0K3SsP4G": "let sourceItem = this.effect.sourceItem;\r\n\r\nif (sourceItem)\r\n{\r\n\tthis.actor.applyEffect({effectUuids : [sourceItem.effects.contents[2].uuid]})\r\n\tthis.script.notification(\"Applied after effects\");\r\n}",
  "9Yn9uViEjcuaESJ2": "if (this.item.getFlag(\"wfrp4e\", \"failedCool\"))\r\n{\r\n    this.item.name += \" (Brak PP)\"\r\n    this.item.system.AP = {\r\n        \"head\": 0,\r\n        \"lArm\": 0,\r\n        \"rArm\": 0,\r\n        \"lLeg\": 0,\r\n        \"rLeg\": 0,\r\n        \"body\": 0\r\n      }\r\n}",
  "9ZFPDCk8M2TQxh7x": "args.fields.modifier += 20\r\n",
  "a02tlRCXpaoaDjSN": "let careers = await warhammer.utility.findAllItems(\"career\", \"Wyszukiwanie Profesji...\", true);\r\ncareers.forEach(c => {\r\n    if (!c.id)\r\n    {\r\n        c.id = c._id;\r\n    }\r\n});\r\nlet choice = await ItemDialog.create(careers, 1, {text : \"Wybierz profesję dla 'Podwójne Życie'\", title : this.effect.name, indexed : true});\r\nif (choice[0])\r\n{\r\n    let career = choice[0];\r\n    let data = career.toObject();\r\n    foundry.utils.setProperty(data, \"flags.wfrp4e.doubleLife\", true);\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n    this.effect.updateSource({name : this.effect.setSpecifier(data.name)})\r\n}\r\n",
  "A0OK0qAMmnf8iNJf": "if (args.test.result.SL < 0)\r\n{\r\n    this.script.message(`Otrzymano punkty zepsucia: ${Math.abs(args.test.result.SL)}`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    if (args.test.failed && this.actor.type == \"character\")\r\n    {\r\n        this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + Math.abs(args.test.result.SL)})\r\n    }\r\n}",
  "a0YU3whUm16wGBNu": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"average\"}})\nawait test.roll();\n\nif (test.failed)\n{\n    this.actor.addCondition(\"fatigued\");\n}",
  "A1odAcuRbq9797ZB": "let choice1 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Broń Biała (Podstawowa)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 10\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\nlet choice2 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Broń Biała (Drzewcowa)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 10\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\nlet choice =  await foundry.applications.api.DialogV2.wait({\r\n    window : {\r\n        title : \"Wybór umiejętności\",\r\n    },\r\n    content : \r\n    `<p>\r\n    Wybierz Umiejętność, której chcesz używać\r\n    </p>\r\n    <ol>\r\n    <li>Broń Biała (Podstawowa)</li>\r\n    <li>Broń Biała (Drzewcowa)</li>\r\n    </ol> \r\n    `,\r\n    buttons : [\r\n        {\r\n            label : \"Podstawowa\",\r\n            callback : () => {\r\n                return choice1;\r\n            }\r\n        },\r\n        {\r\n            label : \"Drzewcowa\",\r\n            callback : () => {\r\n                return choice2;\r\n            }\r\n        }\r\n    ]\r\n})\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Nie odnaleziono umiejętności ${c.name}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "A3fvV69RS1lYgma0": "if (this.actor.type == \"character\")  \r\n  this.actor.corruptionDialog(\"minor\")\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\nif(test.failed)\r\n{\r\n    await this.actor.addCondition(\"unconscious\");\r\n    let secondTest = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"easy\"}, skipTargets: true, appendTitle :  \" - Rozpacz\"})\r\n    await secondTest.roll();\r\n    if(secondTest.failed)\r\n    {\r\n         await this.actor.addCondition(\"fatigued\");\r\n    }\r\n}",
  "A3MW0UksYrHGa0Qw": "return [\"fel\", \"wp\", \"int\", \"t\"].includes(args.characteristic);",
  "a4Aza4a9v8JMU8dC": "const talents = await Promise.all([game.i18n.localize(\"NAME.Frenzy\"), game.i18n.localize(\"NAME.MagicResistanceTalent\")].map(game.wfrp4e.utility.findTalent))\r\nthis.actor.createEmbeddedDocuments(\"Item\", talents, {fromEffect : this.effect.id})",
  "A6DcKPzAGntzSCil": "let roll = await new Roll(\"1d10\").roll()\r\n\r\nroll.toMessage(this.script.getChatData({flavor : `${this.effect.name} (Czas trwania)`}));\r\n\r\nthis.effect.updateSource({\"duration.rounds\" : roll.total})",
  "a6gacHsvgwtsIFSQ": "if (args.test.item && args.test.item.name == game.i18n.localize(\"NAME.Research\"))\r\n    args.test.preData.canReverse = true",
  "a7pEvCycVnFBXGAQ": "let test = await this.actor.setupCharacteristic(\"i\", {skipTargets: true, appendTitle :  \" - Oszołomienie\", fields : {difficulty : \"easy\"}})\r\nawait test.roll();\r\n\r\nif (!test.succeeded)\r\n{\r\n\tthis.actor.addCondition(\"stunned\");\r\n}",
  "a8i0sA1RBnD8nHZt": "let caster = this.effect.sourceActor\r\nlet targetedItem = this.effect.system.itemTargets[0];\r\n\r\nlet qualities = foundry.utils.deepClone(game.wfrp4e.config.itemQualities);\r\nlet flaws = foundry.utils.deepClone(game.wfrp4e.config.itemFlaws);\r\n\r\nif (targetedItem.type == \"weapon\")\r\n{\r\n    foundry.utils.mergeObject(qualities, game.wfrp4e.config.weaponQualities)\r\n    foundry.utils.mergeObject(flaws, game.wfrp4e.config.weaponFlaws)\r\n}\r\nelse if (targetedItem.type == \"armour\")\r\n{\r\n    foundry.utils.mergeObject(qualities, game.wfrp4e.config.armorQualities)\r\n    foundry.utils.mergeObject(flaws, game.wfrp4e.config.armorFlaws)\r\n}\r\n\r\nfor(let q in qualities)\r\n{\r\n    // If the weapon already has a flaw, don't put it in the dialog\r\n    if (targetedItem.system.properties.qualities[q])\r\n    {\r\n        delete qualities[q]\r\n    }\r\n}\r\nfor(let f in flaws)\r\n{\r\n    // If a weapon doesn't have a flaw, don't put it in the dialog\r\n    if (!targetedItem.system.properties.flaws[f])\r\n    {\r\n        delete flaws[f]\r\n    }\r\n}\r\n            \r\nlet added = await ItemDialog.create(ItemDialog.objectToArray(qualities), \"unlimited\", \"Wybierz Zalety do dodania\");\r\nlet removed = []\r\nif (!foundry.utils.isEmpty(flaws))\r\n{\r\n    removed = await ItemDialog.create(ItemDialog.objectToArray(flaws), \"unlimited\", \"Wybierz Wady do usunięcia\");\r\n}\r\n\r\nthis.effect.updateSource({\"flags.wfrp4e.propertiesChanged\" : {added : added.map(i => i.id), removed : removed.map(i => i.id)}})\r\n",
  "a8RabrnJ08O07rDX": "if (args.totalWoundLoss > 0)\r\n{\r\n    // I'm assuming the endurance test specified is for the end-round check\r\n    await args.actor.addCondition(\"poisoned\", 2);\r\n}",
  "AaPPmnv7AtxsRVUs": "args.actor.details.move.value = 1;",
  "aAvJrAKLzXhS9qN6": "return args.item?.name == game.i18n.localize(\"NAME.Climb\")",
  "abLWYtNTu1UVDQAs": "if (args.opposedTest.result.hitloc.value == this.effect.flags.wfrp4e.location) // e.g. 'head', rLeg, 'lArm'\r\n{\r\n     this.script.message(`Otrzymano Stan @Condition[Oślepienie] ponieważ trafiono w: <strong>${this.item.name}</strong>`);\r\n     this.actor.addCondition(\"blinded\");\r\n}",
  "abVIvJBzuskNzCQv": "let amount = this.effect.sourceTest.result.overcast.usage.other.current;\n\nlet sss = await fromUuid(\"Compendium.wfrp4e-core.items.MGEPI4jNhymNIRVz\");\nlet strider = await fromUuid(\"Compendium.wfrp4e-core.items.1dUizIgLBgn4jICC\");\n\nlet items = Array(amount).fill(sss).concat(Array(amount).fill(strider))\n\nthis.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id})",
  "ACgKpKrEEHoNGG0h": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) && args.type != \"channelling\"",
  "ACtDCTLZXmd5uXjX": "let halve;\r\nif (args.opposedTest.attackerTest.item?.type != \"spell\")\r\n{\r\n    halve = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content : \"Obrażenia obniżone o połowę? (Zmniejsza obrażenia, które nie pochodzą od ognia, zimna i magii)\"})\r\n}\r\nelse\r\n{\r\n    halve = false;\r\n}\r\n\r\nif (halve)\r\n{\r\n    args.totalWoundLoss /= 2;\r\n    args.modifiers.other.push({label : this.effect.name, details : \"Zmniejszono o Połowę\", value : \"× 0.5\"})\r\n}",
  "aCVtaW8ag1WibcAr": "args.attacker.modifyWounds(1)\r\nthis.script.message(`<strong>${args.attacker.prototypeToken.name}</strong> Odzyskuje 1 Punkt Żywotności.`)",
  "Adgs6Zs0FdefO6qx": "if (args.test.options.pilot && args.test.result.reversed)\r\n{\r\n\targs.test.data.result.SL = \"+\" + Math.min(1, Number(args.test.data.result.SL))\r\n\targs.test.result.other.push(`<b>${this.effect.name}</b>: PS ograniczone do 1`)\r\n}",
  "aeBetniKqq5SD9Ou": "let characteristics = {\r\n    \"ws\" : 30,\r\n    \"bs\" : 20,\r\n    \"s\" : 20,\r\n    \"t\" : 25,\r\n    \"i\" : 20,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 30,\r\n    \"wp\" : 40,\r\n    \"fel\" : 30\r\n}\r\nlet skills = [game.i18n.localize(\"NAME.Intimidate\"), \"Język (Klasyczny)\", game.i18n.localize(\"NAME.Leadership\"), \"Wiedza (Sztuka Wojenna)\", \"Wiedza (Historia)\", game.i18n.localize(\"NAME.Perception\")]\r\nlet skillAdvancements = [20, 30, 20, 30, 20, 20]\r\nlet talents = [\"Zmysł Bitewny\", \"Bitewny Refleks\", \"Musztra\", \"Groźny\", \"Krzepki\", \"Silny Cios\", \"Silny Cios\", \"Wódz\"]\r\nlet trappings = [\"Broń ręczna\", \"Płytowy napierśnik\", \"Hełm płytowy\", \"Płytowe Nagolenniki\"]\r\nlet specialItems = [ \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nconsole.log(\">>>>>>><\", items)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "afdmOvPGMpEdZvCb": "return (args.skill?.name == game.i18n.localize(\"NAME.Perception\") || args.characteristic == \"fel\")",
  "AFiB20FaOBmBv2Kz": "if (args.actorsystem.details.move.sail.value > 0)\n  args.actor.system.details.move.sail.value = Math.floor(args.actor.system.details.move.sail.value * .5);\n",
  "AGD7zCyV4zruvnWu": "return args.type != \"cast\" || ![\"death\", \"necromancy\", \"life\", \"light\", \"heavens\"].includes(args.spell?.system.lore.value)",
  "agsm3NI1NDtHRG4y": "this.actor.getActiveTokens().forEach(t => t.document.update({texture : this.actor.prototypeToken.texture}, {animate : false}));",
  "Ah2wyywkL8hjJNXM": "args.context.healWounds = true;",
  "ahbA7o5G9dzMFl76": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.SfUUdOGjdYpr3KSR\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "AHZ8f7dfN8jNsYk6": "let token = this.actor.getActiveTokens()[0];\r\nlet target = args.data.targets[0];\r\nlet weapon = args.weapon;\r\n\r\nif(!target || !token)\r\n{\r\n    return;\r\n}\r\n\r\nlet distance = canvas.grid.measureDistances([{ ray: new foundry.canvas.geometry.Ray({ x: token.center.x, y: token.center.y }, { x: target.center.x, y: target.center.y }) }], { gridSpaces: true })[0]\r\nlet currentBand\r\n\r\nfor (let band in weapon.range.bands) \r\n{\r\n  if (distance >= weapon.range.bands[band].range[0] && distance <= weapon.range.bands[band].range[1]) \r\n  {\r\n    currentBand = band;\r\n    break;\r\n  }\r\n}\r\n\r\nreturn [game.i18n.localize(\"Long Range\"), game.i18n.localize(\"Extreme\")].includes(currentBand)",
  "AI6bFrjWk4NH9FBd": "this.actor.addCondition(\"entangled\", this.effect.sourceTest.result.overcast.usage.other.current)",
  "AI7iVbQMPzXMP5on": "const hours = new Roll(\"2d10\");\r\nawait hours.toMessage({flavor: this.effect.name + \" (hours)\"});\r\n\r\nconst bonus = new Roll(\"2d10\");\r\nawait bonus.toMessage({flavor: this.effect.name + \" (bonus)\"});\r\n\r\n\r\nawait this.effect.update({\r\n  \"duration.seconds\": hours.total * 3600\r\n});\r\nawait this.effect.setFlag(\"wfrp4e-tribes\", \"bonus\", bonus.total);",
  "aIYUsBIDKWJ3CEtj": "this.script.message(await this.actor.applyBasicDamage(20, {suppressMsg: true}));",
  "AjC4dsiuhVCOnRGI": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MVI0lXcg6vvtooAF\")\nlet data = item.toObject();    \nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "alJgj25l3239h2SW": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.hTgrGkWnmIR4xhVe\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "ALuPRzf85dmkEfLo": "return args.skill?.name == game.i18n.localize(\"NAME.Intuition\");",
  "aMHGjWyn6BXCI4pw": "let frenzy = await fromUuid(\"Compendium.wfrp4e-core.items.Item.hXcfygzujgyMN1uI\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [frenzy], {fromEffect: this.effect.id})",
  "AMI2wDJqsIZsoq1e": "if (args.opposedTest.result.differenceSL >= 0 && args.opposedTest.result.differenceSL <= 2 && args.opposedTest.result.winner == \"attacker\")\r\n{ \r\n    this.script.message(`Emituje chmurę śmierdzącego proszku. Aktywuj Efekt <strong>Kary do Ogłady</strong> na @UUID[${this.actor.uuid}].`, {blind : true, whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "AmOMCUaWLJ2iJAt5": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.IFKWu98qmWpaSfUi\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "AmpDbT0BkDHeaRzf": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\");\r\nlet data = item.toObject();\r\ndata.system.specification.value = 1;\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "AMxezwtYnWCF6Oza": "return args.skill?.name == `${game.i18n.localize(\"NAME.Ranged\")} (${game.i18n.localize(\"SPEC.Blackpowder\")})`",
  "ApaLcUhuty3EzJoP": "let fortunePoints = this.effect.sourceTest.result.overcast.usage.other.current\r\nlet current = this.actor.status.fortune.value\r\n\r\nthis.actor.update({\"system.status.fortune.value\" : fortunePoints + current})\r\n\r\nthis.script.message(`<b>${this.actor.prototypeToken.name}</b> Punkty Szczęścia wzrosły z ${current} do ${fortunePoints + current}`)",
  "aPZiVhgwR0Xql6AM": "let effectsToEnable = this.actor.items.filter(i => i.type == \"disease\").reduce((effects, item) => effects.concat(item.effects.contents), []).concat(this.actor.effects.contents.filter(i => i.isCondition)).filter(i => i.disabled);\r\n\r\nif (effectsToEnable.length)\r\n{\r\n    this.script.notification(`Re-enabling ${effectsToEnable.map(i => i.name).join(\", \")}.`);\r\n    effectsToEnable.forEach(i => i.update({disabled : false}))\r\n}",
  "AqHLHp4kH6KULk3e": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n    let effectData = this.item.effects.contents[0].convertToApplied();\r\n\teffectData.system.sourceData.item = this.item.uuid\r\n\tactor.applyEffect({effectData : [effectData]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "araS9qYWOAVrV8F7": "args.actor.system.details.man -= 3;\nargs.actor.system.details.move.value -= 2;",
  "aRvJUcgYqhRmmWYC": "this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.e3McIND4Rrsn5cE6\", this.effect, {\"system.advances.value\" : 1}, {skipExperienceChecks : true})",
  "AS7CstSosuCrwZ19": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\r\n      \"dim\": 20,\r\n      \"bright\": 10,\r\n      \"angle\": 360,\r\n      \"alpha\": 0.4,\r\n      \"animation\": {\r\n          \"speed\": 3,\r\n          \"intensity\": 3,\r\n          \"type\": \"torch\",\r\n      },\r\n      \"color\": \"#ffcc66\",\r\n  }}));",
  "AV2Kj6jgmIc45zKi": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "AVROqafFhKjN6TPR": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.DrNUTPeodEgpWTnT\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "AWgZnm9xLyIWCDnp": "let robust = args.modifiers.other.find(i => i.key == \"robust\")\r\nif (robust)\r\n{\r\n\trobust.value--;\r\n}\r\nelse \r\n{\r\n\targs.modifiers.other.push({key: \"robust\", label : this.effect.name, value : -1})\r\n}\r\n",
  "AYEiCx2Es3QtMY28": "let choice1 = [\r\n    {\r\n        type: \"trait\",\r\n        name: \"Zwierzęcy\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Regeneracja\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Rozmiar (Duży)\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Terytorialny\",\r\n    }\r\n]\r\n\r\nlet updateObj;\r\nlet actor;\r\n\r\nasync function addTrait(c) {\r\n    let items = [];\r\n    let existing;\r\n    if (c.type == \"trait\") {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type);\r\n    }\r\n    if (!existing) {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type);\r\n        if (item) {\r\n            item = item.toObject();\r\n            items.push(item);\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${c}`, { permanent: true });\r\n    }\r\n    actor.createEmbeddedDocuments(\"Item\", items);\r\n}\r\n\r\nasync function dialogChoice() {\r\n    for (let c of choice1) \r\n    {\r\n        if (await foundry.applications.api.DialogV2.confirm({window : {title: \"Opcje\"}, content:`<p>Dodajć opcje?</p><ol><li>${c.name}</li></ol>`}))\r\n        {\r\n            addTrait(c)\r\n            c.valid = true;\r\n        }\r\n    }\r\n}\r\n\r\nupdateObj = this.actor.toObject();\r\nactor = this.actor\r\nawait dialogChoice();\r\n\r\n",
  "ayIbw2Vw2t9xg33P": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.EaqlLRQigwnsEAXX\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "AyNb5sj6FD2Z3Q5T": "this.actor.addCondition(\"dead\")\r\nthis.actor.setWounds(0);\r\nthis.script.message(await game.wfrp4e.tables.formatChatRoll(\"scatter\"))",
  "AyS3iLljxHRKsHg4": "let broken = this.actor.hasCondition(\"broken\");\r\nlet fatigued = this.actor.hasCondition(\"fatigued\");\r\nawait broken?.delete();\r\nawait fatigued?.delete()\r\nlet drilled = await fromUuid(\"Compendium.wfrp4e-core.items.Item.J9MK0AIaTbvd5oF6\")\r\nlet fearless = await fromUuid(\"Compendium.wfrp4e-core.items.Item.8pVzgPkgWpTJvfhG\")\r\nlet stout = await fromUuid(\"Compendium.wfrp4e-core.items.Item.IogM5gnsoOX63w7j\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [drilled, fearless, stout], {fromEffect : this.effect.id})",
  "AZGXrZOQ4EzjxRL9": "return true;",
  "B063u4vrbvzMaCQt": "args.item.system.flaws.value = args.item.system.flaws.value.concat([{name : \"bulky\"}, {name : \"unreliable\"}])",
  "B1xgRS00RcTIZLnO": "return [\"cast\", \"channelling\"].includes(args.type) && this.actor.hasCondition(\"fatigued\")",
  "b1zMefdoZYtzCm7i": "return [\"roll\", \"none\"].includes(args.fields.hitLocation) || args.item?.attackType != \"ranged\"",
  "b2Kb4IuD22RhKhR0": "let actor = Array.from(game.user.targets)[0]?.actor;\n\nif (actor)\n{\n    actor.applyEffect({effectUuids : this.effect.sourceItem.effects.contents[0].uuid})\n}\nelse\n{\n    this.script.notification(\"No target!\", \"error\")\n}",
  "b2WaqRna5CFXmbDG": "args.context.stag = true;",
  "b4CIeJF2L4E1qikC": "return !args.skill",
  "b5DfAWtpV1x2R8If": "this.script.message(await this.actor.applyBasicDamage(this.effect.sourceTest.result.damage, {suppressMsg: true}))",
  "b5prg1FLjCAvBjLy": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.zyocWSzEZEC826NS\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])\r\n\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"hard\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    await this.actor.addCondition(\"prone\")\r\n    await this.actor.addCondition(\"stunned\")\r\n}",
  "B6ZbY3bxTPg6nCng": "return args.skill?.name == game.i18n.localize(\"NAME.Bribery\");",
  "b787rIfyHF5LnALd": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.HbrwGhUl0ZXz4kLA\")\nlet hardy = item.toObject();\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.VUJUZVN3VYhOaPjj\")\nlet armour = item.toObject();\narmour.system.specification.value = 1;\nthis.actor.createEmbeddedDocuments(\"Item\", [armour, hardy], {fromEffect : this.effect.id});",
  "B87v1twc65qyvUWi": "args.fields.modifier += 10 * this.effect.conditionValue",
  "b8G4cjfn3RG2tEYX": "this.actor.addCondition(\"ablaze\", 3);",
  "b8XFmEUu1d2YNQ7F": "const {targetUuid, characteristicsToSwap} = this.effect.flags.wfrp4e;\r\n\r\nif (!characteristicsToSwap) return;\r\n\r\nconst target = fromUuidSync(targetUuid);\r\n\r\nif (!target) return;\r\n\r\nfor (const char of characteristicsToSwap) {\r\n  args.actor.system.characteristics[char].advances = target.system.characteristics[char].advances;\r\n  args.actor.system.characteristics[char].bonus = target.system.characteristics[char].bonus;\r\n  args.actor.system.characteristics[char].bonusMod = target.system.characteristics[char].bonusMod;\r\n  args.actor.system.characteristics[char].calculationBonusModifier = target.system.characteristics[char].calculationBonusModifier;\r\n  args.actor.system.characteristics[char].initial = target.system.characteristics[char].initial;\r\n  args.actor.system.characteristics[char].modifier = target.system.characteristics[char].modifier;\r\n  args.actor.system.characteristics[char].value = target.system.characteristics[char].value;\r\n}",
  "B950b0XnIUYCdVwu": "let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\n\r\nif (test.succeeded)\r\n{\r\n    if (args.totalWoundLoss <= parseInt(test.result.SL))\r\n    {\r\n        args.abort = `<strong>${this.effect.name}</strong>: Atak odbity i odwzajemniony`\r\n    }\r\n    args.modifiers.other.push({label : this.effect.name, value : -1 * parseInt(test.result.SL)})\r\n}",
  "BAOv7moTxsKlT3JS": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"easy\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"broken\")\n}",
  "bBdXzBmxgFFBwMMS": "if(args.opposedTest.attackerTest.item?.isRanged && args.applyAP && !args.sureShot)\r\n{\r\n   if (args.modifiers.ap.value)\r\n   {\r\n    args.sureShot = true;\r\n    args.modifiers.ap.details.push(`${this.effect.name} (Ignoruje ${this.item.Advances})`)\r\n    args.modifiers.ap.ignored += this.item.Advances;\r\n   }\r\n}",
  "BcXTujburrHpjpwa": "args.fields.slBonus -= 3;",
  "BD7bVTU2pVoRSRBe": "let symptoms = {\r\n    convulsions : \"Konwulsje\",\r\n    coughsandsneezes : \"Kaszel i Katar\",\r\n    fever : \"Gorączka\",\r\n    flux : \"Biegunka\",\r\n    nausea : \"Mdłości\"\r\n}\r\n\r\nlet roll = await (new Roll(`max(0, 1d10 - ${this.actor.characteristics.wp.bonus})`).roll())\r\nroll.toMessage(this.script.getChatData());\r\n\r\nlet choices = await ItemDialog.create(ItemDialog.objectToArray(symptoms), roll.total, \"Wybierz Symptom\");\r\n\r\nif (choices.length)\r\n{\r\n    let symptomEffects = foundry.utils.duplicate(game.wfrp4e.config.symptomEffects)\r\n    let added = []\r\n    for(let choice of choices)\r\n    {\r\n        let symptom = symptomEffects[choice.id];\r\n        symptom.origin = this.effect.uuid;\r\n        added.push(symptom);\r\n    }\r\n    this.actor.createEmbeddedDocuments(\"ActiveEffect\", added)\r\n}\r\nelse \r\n{\r\n    this.effect.delete();\r\n}\r\n\r\n",
  "bDS62ctjfnTU4xIu": "return args.skill.name !== game.i18n.localize(\"NAME.Leadership\")",
  "Be5rdfnZorbILhpC": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\nlet data = item.toObject();\ndata.system.specification.value = 3 - this.actor.characteristics.s.bonus\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "BEEvU2hE5ymcNOH9": "let fatigued = this.actor.hasCondition(\"fatigued\")\n                            if (!fatigued)\n                            {\n                                this.actor.addCondition(\"fatigued\")\n                                ui.notifications.notify(\"Fatigued added to \" + this.actor.name + \" which cannot be removed until the Malaise symptom is gone.\")\n                            }",
  "bEVlJOOA1kLlzpWx": "let characteristics = {\r\n    \"ws\" : 10,\r\n    \"bs\" : 0,\r\n    \"s\" : 5,\r\n    \"t\" : 15,\r\n    \"i\" : 20,\r\n    \"ag\" : 15,\r\n    \"dex\" : 20,\r\n    \"int\" : 35,\r\n    \"wp\" : 30,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [\"Splatanie Magii\", \"Opanowanie\", \"Unik\", \"Występy (Gawędziarstwo)\", \"Intuicja\", \"Język (Magiczny)\", \"Dowodzenie\", \"Wiedza (Magia)\", \"Wiedza (Teologia)\", \"Percepcja\"]\r\nlet skillAdvancements = [20, 25, 20, 25, 30, 25, 15, 20, 10, 30]\r\nlet talents = [\"Zmysł Magii\", \"Magia Tajemna (Dowolna Tradycja)\", \"Precyzyjne Inkantowanie\", \"Precyzyjne Inkantowanie\", \"Szczęście\", \"Wykrywanie Magii\", \"Groźny\", \"Magia Prosta\", \"Percepcja Magiczna\", \"Szósty Zmysł\"]\r\nlet trappings = [\"Broń ręczna\", \"Kostur\", \"Rytualna szata zawierająca wiele ornamentów i zdobień\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        items.push({name : trapping, type : \"trapping\", \"system.trappingType.value\" : \"clothingAccessories\"})\r\n        //ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "Bexspr5viPhHiFmU": "let fatigued = this.actor.hasCondition(\"fatigued\");\nlet value = fatigued?.conditionValue || 0;\nargs.fields.modifier += value * 10;",
  "bgLeMqihLya2iobP": "const river = this.actor.itemTags.template.find(t => t.name === \"River Troll\");\r\n\r\nif (!river) { \r\n  args.options.abortItemCreation = true;\r\n  this.script.notification(\"Can only be applied to River Troll.\", 'warning');\r\n}",
  "bh2qDCKiAIWM0UPi": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"))",
  "BHbFqhJPzZI2txLs": "let lore = this.effect.name.split(\"(\")[1].split(\")\")[0].toLowerCase();\n\n// If channelling corresponding lore\nif (args.type == \"channelling\" && args.spell.system.lore.value == lore)\n    args.prefillModifiers.slBonus  += 2\n// If channelling or casting different lore\nelse if (args.spell.system.lore.value != lore && args.spell.system.lore.value != \"petty\")\n    args.prefillModifiers.slBonus  -= 1",
  "bhXUW7IJtEaUGAoV": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();  \r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\");\r\n}\r\n  ",
  "bidoOQSAofp4NPf6": "return args?.skill?.name !== game.i18n.localize(\"NAME.Cool\")",
  "Bj6bxItlgtI2sXVN": "let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nroll.toMessage(this.script.getChatData());\r\nargs.totalWoundLoss = Math.max(0, args.totalWoundLoss - roll.total)\r\nargs.modifiers.other.push({label: this.effect.name, value : -1 * roll.total})\r\nthis.effect.update({disabled : true})",
  "bkbWgG9COvZWZbAX": "args.context.addChargingDice = true;",
  "bL98Sr1TRLMPEdlk": "if (args.test.failed)\n{\n\tthis.actor.addCondition(\"fatigued\");\n}",
  "bLkt8VpTTPoTxW0W": "if (args.opposedTest.result.hitloc.value == \"body\" && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 1);\r\n    this.script.notification(\"Dodano Stan Krwawienie\")\r\n}\r\n",
  "bMEFHPCei2evnZZw": "// Victims that take at least 1 Wound from a Fell Dagger\r\n// immediately take a Poisoned Condition \r\n// resisted with a Difficult (-10) Endurance Test. \r\n\r\n// TODO: Add Venom strength to message\r\n\r\nif (args.totalWoundLoss > 0) \r\n{\r\n  args.actor.addCondition(\"poisoned\")\r\n  this.script.message(`\r\n      <strong>${this.effect.name}</strong>:<br>\r\n      <strong>${args.actor.name}</strong>: otrzymano Stan @Condition[Zatrucie], który może zostać odparty <strong>Wymagającym (-10) Testem Odporności </strong>.`, \r\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")})\r\n}\r\n",
  "BNJRV66jlrp51qZK": "args.abort = true;\nthis.script.notification(game.i18n.localize(\"SCRIPT.Sightstep\"));",
  "bQyVajMN1ETwlzvM": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.aE3pyW20Orvdjzj0\")\nlet data = item.toObject();\nlet target = await game.wfrp4e.tables.rollTable(\"fixations\")\nif (target)\n{\n    data.system.specification.value = target.result\n    this.script.notification(target.result);\n}\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "bRiFHPC1StKxqNIC": "if (isNaN(parseInt(this.item.system.specification.value))) {\n  let value = await ValueDialog.create({title : \"Sturdy Value\", text : \"Enter the Sturdy value\"});\n  if (value) {\n    this.item.updateSource({\"system.specification.value\" : value});\n  }\n}",
  "brNRqfpPqD2Ki0cM": "args.prefillModifiers.modifier -= 10",
  "bRtZH0xRh8dgqMeW": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.BqPZn6q3VHn9HUrW\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = 7 - this.actor.characteristics.s.bonus\r\ndata.name = item.name.replace(\"()\", \"\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "btPrQkGRKUkhNe3N": "return args.skill?.name == \"Rzemiosło (Aptekarstwo)\";",
  "BtyFhdGMKiMamGhM": "let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nlet damage = parseInt(this.effect.sourceTest.result.SL)\r\n\r\nif (test.succeded)\r\n{\r\n   damage =  damage + 8 - parseInt(test.result.SL)\r\n}\r\n\r\nelse \r\n{\r\n   damage = damage + 10\r\n   this.actor.addCondition(\"entangled\", 3)\r\n}\r\nthis.script.message(await this.actor.applyBasicDamage(damage, {loc : \"roll\", suppressMsg: true}))\r\n",
  "Bu0KUpGvfmFF7LJs": "let test = await this.actor.setupCharacteristic(\"s\", {appendTitle : ` - ${this.effect.name}`, fields : {difficulty : \"difficult\"}});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n\r\n   if (test.isCriticalFumble == \"fumble\")\r\n   {\r\n\t return this.script.message(`<strong>${this.actor.name}</strong> dies as they are dragged into the Aethyr (unless they spend a Fate point`);\r\n   }\r\n\t\r\n    await this.script.message(await this.actor.applyBasicDamage(3, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true }))\r\n\r\n}",
  "Bv3431tnG3VKaTJr": "if (args.test.result.castOutcome == \"success\")\n{\n    args.test.result.other.push(`@Fear[2,${this.actor.name}]`);\n}",
  "BVNKF9omCppWPLys": "let actor = game.user.character ?? canvas.tokens.controlled[0]?.actor;\nif (!actor || !(actor.system instanceof StandardActorModel))\n  return ui.notifications.warn(\"You must control an Actor capable of performing a Strength Test\");\n\nlet test = await actor.setupCharacteristic(\"s\", {\n  skipTargets: true, \n  appendTitle:  \" - Bailing Out\", \n  fields: {\n    difficulty: \"challenging\"\n  },\n  context: {\n    success: \"Reduced the Holed rating!\"\n  }\n});\n\nawait test.roll();\nif (test.succeeded) {\n  let SL = parseInt(test.result.SL);\n  let name = this.effect.name.replace(/\\d+/, rating => parseInt(rating) - SL);\n  await this.effect.update({name});\n}\n\nlet rating = parseInt(this.effect.name.match(/\\d+/)?.[0]);\nif (rating <= 1) {\n  const scriptData = this.effect.system.scriptData\n  scriptData[2].trigger = '';\n  await this.effect.update({disabled: true, \"system.scriptData\": scriptData});\n}",
  "bWr8leucbWslBCYG": "return args.characteristic != \"s\"",
  "bwtQOSWn120NICkf": "let test = await this.actor.setupCharacteristic(\"ag\", {fields : {difficulty : \"hard\"}});\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n   await this.actor.addCondition(\"bleeding\")\r\n   await this.actor.addCondition(\"entangled\")\r\n}",
  "bwx9wuEOJPF7btD1": "return args.skill?.name != game.i18n.localize(\"NAME.Navigation\");",
  "ByhEa1BxQOyrOmqg": "return args.item?.attackType == 'melee'",
  "bzaoWcieMFaU5B5l": "return !this.actor.flags.useless[this.item.system.location.key] || [\"fel\", \"wp\", \"int\", \"t\"].includes(args.characteristic)",
  "BzDLuxBNw1QNIacg": "if (args.item.type == \"skill\")\r\n   args.item.system.advances.value = 0\r\n\r\nif (args.item.type == \"talent\")\r\n    args.item.system.tests.value = \"\"\r\n\r\nif (args.item.type == \"weapon\") \r\n   args.item.system.qualities.value = []",
  "BZETMpgrI5k1ol5b": "// If the creature currently has a Surprised, Unconscious, or Entangled Condition, it does not gain this Advantage.\nconst surprised = this.actor.hasCondition(\"surprised\")\nconst unconscious = this.actor.hasCondition(\"unconscious\")\nconst entangled = this.actor.hasCondition(\"entangled\")\nif (entangled || unconscious || surprised) return\n\n// If, at the beginning of its turn, this creature does not have at least Rating Advantage points, its Advantage pool immediately increases to Rating.\nconst grimRating = parseInt(this.item.specification.value) || 1\nif (grimRating > this.actor.status.advantage.value) {\n  this.actor.setAdvantage(grimRating)\n}\n",
  "c31hjp7k0hlpdGBC": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.yRhhOlt18COq4e1q\");\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "c3KA1knL2NYNUEww": "return args.skill?.name != game.i18n.localize(\"NAME.Evaluate\");",
  "C4LZnaX0MYgwrszj": "return args.type !== \"channelling\" && !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) && args.skill?.name !== `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})` &&  args.skill?.name !== game.i18n.localize(\"NAME.OutdoorSurvival\");",
  "C5NIkJwXL85Qbpe7": "args.weaponProperties.impale = true;",
  "C69xngEMghfwUx13": "let easier = ['challenging', 'average', 'easy', 'veasy'];\nif (easier.includes(args.fields.difficulty))\n  args.fields.difficulty = \"difficult\";",
  "c7HTWfg3CbjN9e1M": "this.actor.name = this.actor.name.replace(\"Common Troll\", \"Troll\");",
  "c9xxdOCaQSwooK8n": "if (!this.actor.has(\"Blessing of Battle\",\"prayer\")) this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.ElmLfnrXliStS9CP\", this.effect)",
  "Ca1fXHTA1e2QLx0D": "args.fields.modifier += 50;",
  "cAioHYtlxuOCwRLh": "let ablaze = Number(args.opposedTest.attackerTest.result.SL) + 1\r\nargs.actor.addCondition(\"ablaze\", ablaze)",
  "cAKqUBuJBsU85erO": "return args.skill?.name !== game.i18n.localize(\"NAME.Stealth\");",
  "cApfxL7Ic0NKdoSr": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.rOV2s6PQBBrhpMOv\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "CbfUDhUr5R4UnPPq": "if (this.actor && this.actor?.name !== \"Kurgorn Three-eyes\" && !this.actor.hasCondition(\"blinded\") && !args.itemUpdated)\r\n{\r\n  this.script.notification(`Cannot remove Blinded condition.`);\r\n  await this.actor.addCondition(\"blinded\", 1, {statuses : [\"blinded\", \"blind\"]})\r\n}",
  "cBSy9CR5NZvcLRg8": "\n        args.prefillModifiers.modifier += 0;\n        args.prefillModifiers.slBonus += 0;\n        args.prefillModifiers.successBonus += 0;\n        ",
  "CCK1iIfPmB398ziT": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Athletics\"), {fields : {difficulty : \"difficult\"}, skipTargets: true, appendTitle :  \" - Poruszanie się\"})\r\ntest.roll();",
  "CCwuu3bPLCpVGAmb": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\n\n\n",
  "CD4RnDpXZ9hnqVPQ": "if (!this.actor.hasCondition(\"entangled\"))\n  this.actor.addCondition(\"entangled\");",
  "CDASLC4fWKSGQKf9": "let blinded = this.actor.hasCondition(\"blinded\");\r\nif (blinded?.getFlag(\"wfrp4e\", \"flockOfDoom\"))\r\n{\r\n    blinded.delete();\r\n}",
  "cDBhmHn5kjgWBAlT": "let num = (this.effect.sourceTest.result.overcast.usage.other.current || 1)\r\n\r\nthis.actor.addCondition(\"entangled\", num)",
  "cEg09bnvZD6Ysnpc": "let item = await fromUuid(\"Compendium.wfrp4e-archives2.items.anIlqJXFOIEzIOo1\")\nlet data = item.toObject();\ndata.name = this.item.name;\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "cgmA2N0MkjA7qIZy": "return args.type != \"cast\" || args.item?.system.lore?.value != \"shadow\"",
  "ch5SD2XOQfcYo0X5": "if (args.sizeDiff <= -2 && args.opposedTest.attackerTest.result.critical)\r\n        args.damageMultiplier = Math.abs(args.sizeDiff)\r\n\r\n      let sBonusDiff = args.opposedTest.defenderTest.actor.characteristics.t.bonus - args.opposedTest.attackerTest.actor.characteristics.s.bonus\r\n     let weapon = args.opposedTest.attackerTest.item\r\n      if (sBonusDiff > 0 && weapon && weapon.damage.value.includes(\"SB\"))\r\n      {\r\n        args.damage += sBonusDiff\r\n        args.breakdown.other.push({label : this.effect.name, value : sBonusDiff});\r\n      }",
  "CHnaBPHk6HdFS512": "let arm = await fromUuid(\"Compendium.wfrp4e-core.items.MnMZv7ZXoRqoH9dS\");\r\nlet leg = await fromUuid(\"Compendium.wfrp4e-core.items.k00PimCWkff11IA0\");\r\n\r\nlet choice = await ItemDialog.create([arm, leg], 1, \"Wybierz Kończynę\")\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", choice, {fromEffect: this.effect.id})",
  "chUpiI3el8IO8MSs": "if (args.opposedTest.attackerTest.item?.name.includes(\"Ugryzienie\"))\r\n{\r\n    let woundsGained = args.totalWoundLoss;\r\n    this.script.message(`Otrzymano Rany: ${woundsGained}`, { whisper: ChatMessage.getWhisperRecipients(\"GM\") })\r\n    this.actor.modifyWounds(woundsGained)\r\n}",
  "CicQ5REu9tbsc8wW": "const locations = [];\n\nfor (let [key, loc] of Object.entries(args.AP)) {\n  if (loc.layers?.some(i => !i.metal && i.source?.system.tags?.has(\"armour\")))\n    locations.push(key);\n}\n\nthis.actor.status.addArmour(1, {source: this.effect, magical: true, locations})",
  "CiFeduksZJ6PRulx": "return args.skill?.name == `${game.i18n.localize(\"NAME.Ride\")} (${game.i18n.localize(\"SPEC.Horse\")})` || (args.context.dodge && this.actor.isMounted);",
  "cipTp0OS2bfKLjZS": "if (args.totalWoundLoss > 0) {\n    await args.actor.addCondition(\"bleeding\")\n    await args.actor.addCondition(\"poisoned\")\n}",
  "CIxZYkHggBQ6EsHP": "this.script.notification(\"Efekt wykorzystany!\");\r\nthis.effect.delete();",
  "cJFDnq1HI4gXWcJo": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = await ValueDialog.create({text: \"Podaj Wartość Cechy Stworzenia Ochrona\", title : this.effect.name});\r\n    if (value)\r\n    {\r\n     this.item.updateSource({\"system.specification.value\" : value});\r\n    }\r\n}",
  "Cjj4iLkdY1NaZRCi": "if ((args.opposedTest.attackerTest.item && args.opposedTest.attackerTest.item.isMelee) || (args.opposedTest.attackerTest.item && !args.opposedTest.attackerTest.item.name.includes(\"Broń Zasięgowa\")))\r\n{\r\n    let choice = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content : `<p><strong>${this.effect.name}</strong>: Zadać obrażenia atakującemu?`})\r\n\r\n    if (choice)\r\n    {\r\n        this.script.message(await args.attacker.applyBasicDamage(this.actor.system.characteristics.wp.bonus, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true}));\r\n    }\r\n}",
  "cK1Jysfu5IMUUH0C": "if (!args.ward)\r\n{\r\n\targs.ward = (this.effect.getFlag(\"wfrp4e\", \"ward\") || 0);\r\n\tif (args.wardRoll >= args.ward && args.ward > 3)\r\n    {\r\n        let newWard = Math.max(3, args.ward - 1)\r\n        this.script.message(\"<strong>Ochrona</strong> zwiększona do: \" + newWard)\r\n        this.effect.setFlag(\"wfrp4e\", \"ward\", newWard)\r\n    }\r\n\r\n}",
  "CkE8NZOhzPkuRrKJ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MnMZv7ZXoRqoH9dS\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])\r\n\r\n\r\n\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"hard\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\tthis.actor.addCondition(\"unconscious\")\r\n}",
  "ckKbPfaTiQ2qBZdR": "console.log(\"DAMAGE\", this)",
  "ClkT2WG2UjVwQ97T": "if (args.actor.has(\"Daemonic\")) {\n  args.totalWoundLoss += 3;\n  args.modifiers.other.push({label: this.effect.name, value: 3});\n}\n\nlet test = await args.actor.setupSkill(\"Endurance\", {\n  appendTitle: ` – ${this.effect.name}`,\n  skipTargets: true,\n  characteristic: 't',\n  context: {\n    failure: \"Received 1 Blinded Condition\"\n  }\n});\nawait test.roll();\n\nif (test.failed) {\n  args.actor.addCondition(\"blinded\");\n}",
  "CM43kvw5mIIE1OsB": "let key = this.item.system.location.key\r\n\r\nlet lostFingers = this.actor.flags.useless[key] || 0;\r\n\r\nlostFingers += 1\r\n\r\nthis.actor.flags.useless[key] = lostFingers;\r\n\r\nif (lostFingers >= 4)\r\n{\r\n\tthis.actor.flags.useless[key[0] + \"Arm\"] = true;\r\n}",
  "CMUFtmNA1kkD1ay7": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\r\n      \"dim\": 30,\r\n      \"bright\": 20,\r\n      \"angle\": 90,\r\n      \"alpha\": 0.6,\r\n      \"animation\": {\r\n          \"speed\": 3,\r\n          \"intensity\": 3,\r\n          \"type\": \"torch\",\r\n      },\r\n      \"color\": \"#ffcc66\",\r\n  }}));",
  "CoImIH9OCMx9DfQZ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.nbhn2wX35b7Jrcbg\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Szczęka\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "cOuukVo8WakDZIUj": "args.prefillModifiers.slBonus += 1",
  "CPQoK7NjzOwVTFXS": "for(let effect of this.actor.effects.filter(e => e.isCondition))\n{\n    if (effect.isCondition)\n    {\n        effect.delete();\n    }\n}",
  "cqYgZQk1C3kMARy5": "return args.skill?.name !== game.i18n.localize(\"NAME.Haggle\");",
  "Cri5Q7ux6ni7zNVS": "// Cannot be Surprised in combat.\r\n\r\nif (this.actor.hasCondition(\"surprised\"))\r\n{\r\n    this.actor.removeCondition(\"surprised\")\r\n    ui.notifications.notify(`<strong>${this.effect.name}</strong>: Cannot be surprised`);\r\n}",
  "CS6O7UUjQcUJoOUP": "if (args.test.failed)\n                        {\n                          let SL = Number(args.test.result.SL)\n                          if (SL <= -2 && SL > -4)\n                            this.actor.addCondition(\"stunned\")\n                          else if (SL <= -4 && SL > -6)\n                            this.script.message(this.actor.prototypeToken.name + \" must make a <b>Willpower</b> Test or fall @Condition[Prone].\")\n                          else if (SL <= -6)\n                            this.actor.addCondition(\"unconscious\")\n                        }",
  "csLKDJKZaUK9vwLT": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.7rBhIRo96Mydo0Cv\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Plecy\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n",
  "ct6WGaRMfrcnHhyv": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\nlet data = item.toObject();\ndata.system.specification.value = 2;\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "cTYNaKbepMwqYsZ8": "\r\n                            let difficulty = \"\"\r\n                            if (this.effect.name.includes(\"Umiarkowany\"))\r\n                                difficulty = \"easy\"\r\n                            else if (this.effect.name.includes(\"Poważny\"))\r\n                                difficulty = \"average\"\r\n                            else\r\n                                difficulty = \"veasy\"\r\n        \r\n                            let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {context : {failure : this.actor.name + \" umiera z powodu Uwiądu\"}, fields: {difficulty}, appendTitle : \" - Uwiąd\"})\r\n                            await test.roll();\r\n                            if (test.failed)\r\n                            {\r\n                                this.actor.addCondition(\"dead\");\r\n                            }\r\n                            ",
  "cUFCL02JoaZObRcX": "let sl = this.effect.sourceTest.result.slOver;\n\nthis.actor.system.characteristics.s.modifier += sl * 10;\nthis.actor.system.characteristics.s.calculationBonusModifier -= sl;",
  "cUnbADgOQ4fMKgrH": "let group\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.5hH73j2NgPdsLCZN\");\r\nlet data = item.toObject();\r\n\r\nif (this.item.name.includes(\"(\"))\r\n{\r\n\tgroup = this.item.parenthesesText\r\n}\r\n\r\nelse \r\n{\r\n\tgroup = await ValueDialog.create({text : \"Wybierz grupę dażoną nienawiścią\", title : \"Obiekt Nienawiści\"})\r\n\r\n\tthis.item.updateSource({name : this.item.name + ` (${group})`, \"system.tests.value\" : this.item.system.tests.value.replace(\"Grupa\", group)})\r\n\tthis.effect.updateSource({name : this.effect.name + ` (${group})`})\r\n}\r\n\r\n\r\ndata.name = data.name.replace(\"x\", group);\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});",
  "cuqCtQsfLBBAGjnu": "args.fields.slBonus -= (Number(this.item.specification.value) || 0)",
  "cV9JiAgUPOeUHKnS": "args.fields.successBonus++;\r\nif (args.skill?.name != game.i18n.localize(\"NAME.SleightOfHand\"))\r\n{\r\n    args.fields.modifier += 10;\r\n}",
  "CW5Vlr57OaMkKJ8Q": "if (this.actor.system.status.advantage.value >= 3)\r\n{\r\n    this.actor.modifyAdvantage(-3);\r\n    this.script.notification(\"Odjęto Punkty Przewag\")\r\n}\r\nelse \r\n{\r\n    return this.script.notification(\"Niewystarczająca liczba Punktów Przewag!\", \"error\")\r\n}\r\n\r\nlet test = await this.actor.setupTrait(this.item)\r\nawait test.roll();",
  "CWNGrg7se91RC95g": "if (args.totalWoundLoss > 0) {\r\n  args.opposedTest.result.other.push(\r\n  `@Corruption[minor]{Wystawienie na Umiarkowane Zepsucie}`\r\n  )\r\n  this.script.message(`<strong>${this.effect.name}</strong>: \r\n      @Corruption[moderate]{Wystawienie na Umiarkowane Zepsucie} <br/>\r\n      <strong>${args.actor.prototypeToken.name}</strong> musi wykonać test na \r\n      <strong>Zepsucie (Umiarkowane)</strong>`, \r\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\r\n  )\r\n}",
  "CxsKWGwQqtAaQdzX": "return args.characteristic === \"fel\";",
  "CynUM4ZEiB9QbNQq": "const bonus = game.settings.get(\"wfrp4e\", \"homebrew\").advantageBonus;\r\n\r\nargs.fields.modifier += 2 * bonus;",
  "cYPIXzl86a3LFsTE": "if (args.item.type == \"spell\")\n{\n   args.item.cn.value -=2\n   if (args.item.cn.value < 0)\n      args.item.cn.value = 0\n}",
  "cysQDjlDzT8HdNeo": " args.prefillModifiers.slBonus += 1",
  "cZVrzR4fxV86lxNW": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.yrkI7ATjqLPDTFmZ\")\nlet res = item.toObject();\nres.system.specification.value = 1;\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.mNoCuaVbFBflfO6X\")\nlet ss = item.toObject();\nawait this.actor.createEmbeddedDocuments(\"Item\", [res, ss], {fromEffect : this.effect.id})",
  "d29mu8vRt9AQUm0L": "this.actor.characteristics.i.value = Math.min(this.actor.characteristics.i.value, 10);\r\nthis.actor.characteristics.i.bonus = 1;\r\n\r\nfor(let skill of this.actor.itemTypes.skill.filter(i => i.system.characteristic.value == \"i\"))\r\n{\r\n    skill.system.total.value= Math.min(skill.system.total.value, 10)\r\n}",
  "D5XmzrUGFa1JN0cl": "args.prefillModifiers.modifier += 10\n\n",
  "d6mVm08o8SeklAcW": "this.actor.system.status.ward.value = 9;",
  "d9iU08yvqcffF026": "return args.weapon.system.usesHands.includes(this.effect.getFlag(\"wfrp4e\", \"location\"))",
  "dAMtbn3uQwF8KpKU": "return args.skill?.name != game.i18n.localize(\"NAME.Charm\") && args.skill?.name != game.i18n.localize(\"NAME.Gossip\");",
  "DANLE5HxrkTNelhl": "args.wounds += 4;",
  "DBafsY1HrclJRTtA": "return args.type != \"cast\"",
  "dbHv7dAXgB2Oy1Fg": "let nbBleeding = 1 + Number(this.effect.sourceTest.result.SL);\nthis.actor.removeCondition(\"bleeding\", nbBleeding);\nconsole.log(this.actor);\n",
  "dbOSvpgcPjsc2uvq": "let menacing = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.0hn6UaKq8CoZP2zD\")).toObject();\r\nlet sense = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")).toObject();\r\n\r\nsense.name += \" (Wzrok)\";\r\nsense.system.tests.value = sense.system.tests.value.replace(\"Zmysł\", \"Wzrok\")\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", [menacing, sense], {fromEffect : this.effect.id})",
  "dbYjr4oG67Z880To": "if (args.test.isFumble)\n{\n    args.test.result.other.push(\"@Table[warpfire-thrower-fumble]\")\n}",
  "DcSJNRBXE9ZBBY7T": "this.actor.addCondition(\"blinded\", Math.max(0, this.effect.sourceTest.result.SL))",
  "dcwY8dCd3PNCEzk6": "let current = this.actor.status.fate.value\r\n\r\nthis.actor.update({\"system.status.fate.value\" : current + 1})\r\n\r\nthis.script.message(`<b>${this.actor.prototypeToken.name}</b> Punkty Szczęścia zwiększone z ${current} do ${current + 1}`)",
  "Dew3Ks9yC4DynSMi": "return args.characteristic === \"s\" || args.characteristic === \"t\" || args.weapon?.system?.attackType === \"melee\";",
  "dfEgat3jz4EtWszH": "return args.skill?.name == `${game.i18n.localize(\"NAME.Stealth\")} (${game.i18n.localize(\"SPEC.Urban\")})`",
  "dfnCK8jCPXNLM7Gh": "let aoeDamage = this.effect.sourceTest.result.damage - 5 // Easily handle magic missile damage by just subtracting 5 from the item's (which has +10 base)\r\n\r\nthis.script.message(await this.actor.applyBasicDamage(aoeDamage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true}))\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - Podpalenie`})\r\n\r\nawait test.roll();\r\n\r\nif (!test.succeeded)\r\n{\r\n    this.actor.addCondition(\"ablaze\");\r\n}",
  "dh5mAlaOOLCBC0YQ": "args.actor.system.details.length.value += args.actor.system.details.length.value * 0.1;",
  "DHxUKY9LMyifFgCi": "return args.skill?.name == \"Rzemiosło (Aptekarstwo)\" || args.skill?.name == \"Rzemiosło (Alchemia)\"",
  "DhZqJso1JWYtGrKk": "this.actor.addCondition(\"ablaze\")\r\nlet damage = this.effect.sourceTest.result.damage + this.effect.sourceTest.result.additionalDamage\r\nthis.script.message(await this.actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true}))",
  "dIxYt421K010eogY": "\r\n                            let modifier = 0\r\n                            if (this.effect.name.includes(\"Umiark\"))\r\n                                modifier = -20\r\n                            else\r\n                                modifier = -10\r\n                            args.fields.modifier += modifier\r\n                            ",
  "dk02qSJfJaIo3Geh": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.EO05HX7jql0g605A\");\nlet data = item.toObject();\ndata.system.specification.value = this.actor.characteristics.ag.value\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "dkiNmwFXztIVbuxg": "let currentCareer = this.actor.system.currentCareer;\r\n\r\nif (!currentCareer || currentCareer.system.talents.includes(game.i18n.localize(\"NAME.Frenzy\")))\r\n{\r\n    return\r\n}\r\n\r\ncurrentCareer.system.talents.push(game.i18n.localize(\"NAME.Frenzy\"));",
  "dkY7WRYjFVh8GB0m": "return ['ws', 'bs', 'ag'].includes(args.characteristic)",
  "DL9vYNft9aXdV2aW": "let tooth = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\r\ntooth = tooth.toObject()\r\ntooth.system.specification.value = 3\r\ntooth.system.qualities.value = [{name : \"magical\"}]\r\n \r\nlet claw = await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")\r\nclaw = claw.toObject()\r\nclaw.system.specification.value = 4\r\nclaw.system.qualities.value = [{name : \"magical\"}]\r\nclaw.name = \"Szpony\"\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", [tooth, claw], {fromEffect : this.effect.id})",
  "dM449AU0FQRnOc3l": "if (args.opposedTest.result.hitloc.value == \"head\")\r\n{\r\n  args.abort = \"Pudło - Brak Głowy\"\r\n}",
  "dM8FbRH2V8CpOkXw": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.QluSTTTq3viHJJUh\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Żebra\";\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "DmbWR9s5I8LHBwxB": "let column = await ValueDialog.create({text : \"Wybierz kolumnę, aby rzucić i określić głowę Bestii\", title : \"Wybierz Kolumnę\"}, \"\", [\"Niepodzielny\", \"Khorne\", \"Nurgle\", \"Slaanesh\", \"Tzeentch\"]);\r\n\r\nif (column)\r\n{\r\n    let result = await game.wfrp4e.tables.rollTable(\"beasthead\", {}, column);\r\n    this.script.message(`<strong>${result.title}</strong><br>${result.result}`);\r\n    let uuid = `Compendium.${result.object.documentCollection}.${result.object.documentId}`;\r\n    let item = await fromUuid(uuid);\r\n    if (item)\r\n    {\r\n        this.actor.createEmbeddedDocuments(\"Item\", [item])\r\n        this.item.delete();\r\n    }\r\n}",
  "DMQ0taEpBUJU5njV": "args.actor.status.fortune.value = 0",
  "DpdSEHM6NMN1ey6h": "if (parseInt(this.item.system.specification.value) > 0)\r\n{\r\n\tthis.actor.system.status.ward.value = parseInt(this.item.system.specification.value);\r\n}",
  "DqJFo74trI916qXN": "let fatigued = args.actor.hasCondition(\"fatigued\")\nif (fatigued)\n{\n    fatigued.system.scriptData = fatigued.system.scriptData.filter(s => s.trigger != \"dialog\")\n    fatigued.system._scripts = null;\n}",
  "dqvHDMlcitLx1pUx": "this.actor.system.details.move.value /= 2;",
  "dr9VJKGY3TeGuzXj": "this.script.message(`Allies of ${this.actor.name} gain +20 Initiative for the first round.`)",
  "DsE6rTSzxEn6uWMz": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"average\"}})\nawait test.roll();\nif (test.failed)\n{ \n  await this.actor.addCondition(\"blinded\");\n  await this.actor.addCondition(\"fatigued\")\n} ",
  "dSmRhZ6o1bUcOSF9": "return args.skill?.name != game.i18n.localize(\"NAME.Leadership\");",
  "dsXGavzXLerXR8Xg": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Sail\")) && !args.skill?.name.includes(game.i18n.localize(\"NAME.Row\"))",
  "dt85W8pzZ09w1QLi": "if (this.actor.sameSideAs(this.effect.sourceActor))\n    args.fields.slBonus += 2;\nelse\n    args.fields.slBonus -= 2;",
  "dtFvpY96RPzNnphq": "return !(args.skill?.name == `${game.i18n.localize(\"NAME.Melee\")} (${game.i18n.localize(\"SPEC.Basic\")})` || (args.type == \"weapon\" && args.item?.system.weaponGroup.value == \"basic\"))",
  "DTiHS6RfwhF4THbf": "return args.skill?.name != game.i18n.localize(\"NAME.Drive\") && !args.skill?.name.includes(game.i18n.localize(\"NAME.Ride\"));",
  "DUFSlDO38fQWclBE": "// Characters wounded by the ravens gain the ability to read, understand and speak rudimentary Classical. \r\n// This ability does not last beyond this adventure.\r\n\r\nthis.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.61L9aX2z164cjm7K\", this.effect)\r\n\r\nthis.script.message(`<b>${args.actor.name}</b> gains the ability to read, understand and speak rudimentary @UUID[Compendium.wfrp4e-core.items.Item.61L9aX2z164cjm7K]{Classical}. This ability does not last beyond this adventure.`)",
  "dULCkRxtisuzQyuK": "if (args.options.condition) \n  this.effect.delete();",
  "DuM5l2Yb4bdvDeaG": "return args.skill?.name != game.i18n.localize(\"NAME.Athletics\")",
  "dVF5ywnzeiZQx9ke": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) \n{\n\tthis.script.scriptMessage(await this.actor.applyBasicDamage(15, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))\n}",
  "DVlZGbiuMIHEQOnM": "if (this.actor.getFlag(\"wfrp4e\", \"isAttached\")) \n{\n\tlet roll = await new Roll(\"1d10\").roll()\n\tawait roll.toMessage(this.script.getChatData());\n\tif (roll.total == 9 || roll.total == 10)\n\t{\n\t  this.script.message(`<strong>${this.actor.name}</strong> attached to <strong>${this.actor.getFlag(\"wfrp4e\", \"isAttached\")}</strong> gorges and falls off.`)\n\t  await this.actor.unsetFlag(\"wfrp4e\", \"isAttached\")      \n\t}\n  }",
  "DWBxvzfWGcG7PVNP": "let letter = this.item.system.location.key[0]; // \"l\" or \"r\";\r\n\r\nthis.item.updateSource({\"system.location.key\" : letter + \"Finger\"})\r\n\r\n// We want the location to be Right or Left Hand, but the key to be rFinger or lFinger",
  "dWr3tkFoIzsAgelu": "let injury = this.effect.itemTargets[0]\nif (injury && this.effect.sourceTest.result.outcome == \"success\") {\n let days = new Roll(injury.system.duration.value).evaluateSync().total\n let num = 1 + Number(this.effect.sourceTest.result.SL);\n let roll = await new Roll(num+'d10').roll()\n await roll.toMessage(this.script.getChatData())\n let newDays = Math.max(days - roll.total, 1)\n this.actor.updateEmbeddedDocuments(\"Item\", [{_id: injury.id, 'system.duration.value': newDays} ])\n let message = \"Injury reduces to \"+newDays+\" (-\" + roll.total + \") instead of \"+days\n this.script.message(message)\n}\n",
  "dwSgcFxKN3S0hLJL": "return args.skill?.name != game.i18n.localize(\"NAME.MeleeBrawling\") && args.item?.weaponGroup?.value != \"brawling\"",
  "dXGosSxdoYbET2O8": "await this.actor.addCondition(\"fatigued\");\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"))\r\n\r\nawait test.roll();\r\n\r\nif (!test.succeeded)\r\n{\r\n    await this.actor.addCondition(\"fatigued\");\r\n    await this.actor.addCondition(\"broken\");\r\n}",
  "DxM3NRgQYc7moMPc": "this.actor.reset()",
  "DxQnamsb2AuW0p2e": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Lore\"));",
  "dxt3p07po06J9fO1": "const metal = () => {\r\n  for (const [key, loc] of Object.entries(this.actor.armour)) {\r\n    if (!loc.layers) continue;\r\n\r\n    for (const layer of loc.layers) {\r\n      if (layer.metal)\r\n        return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nargs.fields.slBonus -= metal() ? 2 : 1;",
  "dxxDFXNNqUsuMyUD": "args.fields.slBonus += 1",
  "DyZ1jH88EAp1ueOK": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.GlShFJF2TpsNh1FX\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\ndata.system.location.value = data.system.location.value.replace(\"Ręka\", \"Nadgarstek\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n",
  "dZ4c5pKDqQV02aIK": "if (args.effect.conditionId == \"ablaze\")\n{\n     args.data.formula += ` + parseInt(this.effect.sourceTest.result.SL)`\n}",
  "Dzi2CKpYapRGwNVr": "if (args.actor.system instanceof StandardActorModel) {\n  args.actor.addCondition(\"unconscious\");\n}",
  "E0HHBSdQR3oH8KaL": "if (args.totalWoundLoss > 0) {\n  let frenzy = await fromUuid(\"Compendium.wfrp4e-core.items.Item.DrNUTPeodEgpWTnT\");\n  frenzy = frenzy.toObject(); \n  frenzy.effects[0].disabled = false;\n  this.actor.createEmbeddedDocuments(\"Item\", [frenzy], {fromEffect : this.effect.id}); \n  this.script.scriptMessage(\"Carnosaur gains Frenzy\");\n}",
  "e0TuMgYuI7ZtGoQr": "args.applyAP = false;\r\n\r\nawait args.actor.addCondition(\"ablaze\", 2);\r\nawait args.actor.addCondition(\"prone\");",
  "E1vUepgop09FF5wy": "if (this.actor.system.status.advantage.value == 0)\r\n{\r\n    return this.script.notification(\"Niewystarczająca liczba Punktów Przewagi!\", \"error\")\r\n}\r\n\r\nlet hatred = await fromUuid(\"Compendium.wfrp4e-core.items.Item.aE3pyW20Orvdjzj0\")\r\nlet frenzy = await fromUuid(\"Compendium.wfrp4e-core.items.Item.yRhhOlt18COq4e1q\");\r\n\r\nif (this.actor.system.status.advantage.value >= 3)\r\n{\r\n    this.script.notification(`Dodano: ${frenzy.name}`)\r\n    this.actor.setAdvantage(0)\r\n    this.actor.createEmbeddedDocuments(\"Item\", [frenzy])\r\n}\r\nelse if (this.actor.system.status.advantage.value >= 1)\r\n{\r\n    let data = hatred.toObject();\r\n    data.system.specification.value = \"Przeciwnicy w walce wręcz\"\r\n    this.script.notification(`Dodano: ${hatred.name}`)\r\n    this.actor.setAdvantage(0)\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data])\r\n}\r\n",
  "E1Xo4RVuN1YRRxg7": "return args.item?.attackType != \"ranged\"",
  "e2JlsKoW8oaFjn6Y": "const roll = new Roll(\"1d10\");\r\n\r\nawait roll.evaluate();\r\nroll.toMessage();\r\n\r\nconst slBonus = Number(this.effect.sourceTest.result.SL) + roll.total;\r\n\r\nthis.effect.setFlag(\"wfrp4e\", \"slBonus\", slBonus);",
  "E2VfOVuju67qO3VL": "let blinded = this.actor.hasCondition(\"blinded\");\nif (blinded.getFlag(\"wfrp4e\", \"nightshroud\"))\n{\n    blinded.delete()\n}",
  "E33J9JixYVGxaktQ": "if (this.effect.getFlag(\"wfrp4e\", \"fistsOfGork\") && args.item.type == \"skill\" && args.item.name == \"Melee (Brawling)\") {\n\targs.item.system.modifier.value += this.effect.getFlag(\"wfrp4e\", \"fistsOfGork\")\n}",
  "e34s1XxHckAWfwHt": "if (args.test.options.beatBlade && (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target))\r\n{\r\n   args.test.result.other.push(`<b>${this.effect.name}</b>: Utracone Punkty Przewagi Przeciwnika: ${Number(args.test.result.SL) + 1}`)\r\n}",
  "e3dBud1keWyhw6nw": "const stupid = this.actor.items.find(i => i.name === \"Stupid\");\r\n\r\nif (!stupid) return;\r\n\r\n\r\nif (this.item.system.disabled) {\r\n  await stupid.update({\"system.disabled\": false});\r\n} else {\r\n  await stupid.update({\"system.disabled\": true});\r\n}",
  "E3om295BMQojnM2F": "let fatigued = this.actor.hasCondition(\"fatigued\")\nif (fatigued)\n{\n    fatigued.delete();\n    this.script.notification(\"Removed Fatigued\")\n}",
  "E4CHDe1xfmcV3oGv": "return args.skill?.name == game.i18n.localize(\"NAME.Navigation\");",
  "e4HotRnEiyXR0pIu": "this.actor.applyEffect({effectUuids : this.item.effects.contents[1].uuid})",
  "E6DMqfDeczqmVMFV": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"average\"}})\r\n\r\nawait test.roll();",
  "E6v4YZrvFikbdXoO": "const locations = [];\n\nfor (let [key, loc] of Object.entries(args.AP)) {\n  if (loc.layers?.some(i => i.metal))\n    locations.push(key);\n}\n\nthis.actor.status.addArmour(1, {source: this.effect, magical: true, locations})",
  "E7D4bxz8gy4e1wL7": "return [`${game.i18n.localize(\"NAME.Stealth\")} (${game.i18n.localize(\"SPEC.Rural\")})`, game.i18n.localize(\"NAME.Track\"), game.i18n.localize(\"NAME.OutdoorSurvival\"), game.i18n.localize(\"NAME.Swim\"), game.i18n.localize(\"NAME.Perception\"), game.i18n.localize(\"NAME.Intuition\")].includes(args.item?.name);",
  "e7IxnxePdXSy6L4E": "if (args.opposedTest.result.hitloc.value == \"head\")\r\n{\r\n     this.script.message(`<b>${this.actor.prototypeToken.name}</b>: otrzymano @Table[crithead]{Ranę Krytyczną Głowy}, jeśli jeszcze nie została zadana.`)\r\n}",
  "EaSNOmXUxAkUHnm5": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "eAtqyBd1HsDWuBuI": "this.actor.system.characteristics.fel.modifier -= parseInt(this.item.system.location.value) || 1",
  "Eay7GpDyfsEE40jT": "if (args.totalWoundLoss > 0)\n{\n    args.actor.addCondition(\"ablaze\")\n}",
  "eb69QPmNQEJXtk4l": " return args.characteristic != \"bs\"",
  "ebDQH0MdGAG02CHl": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.SYjWiKDzMS6CtROJ\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nif (this.item.system.location.key == \"rArm\")\r\n{\r\n\tdata.system.location.value = \"Prawa Ręka\"\r\n\tdata.system.location.key = \"rHand\"\r\n}\r\nelse if (this.item.system.location.key == \"lArm\")\r\n{\r\n\tdata.system.location.value = \"Lewa Ręka\"\r\n\tdata.system.location.key = \"lHand\"\r\n}\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data])",
  "EBNrA6FNX4d05EUx": "return !args.context.crewTest;",
  "eC61buStv62b3sN9": "args.fields.slBonus += 8;",
  "EC8cZmqrE095cDc2": "const actor = args.actor;\n\nif (actor.itemTypes.skill.find(s => s.name === \"Lore (Riverways)\")) {\n  const loreTest = await actor.setupSkill('Lore (Riverways)',  {\n    appendTitle: ` – ${this.effect.name}`,\n    skipTargets: true,\n    fields: {difficulty: 'hard'},\n    characteristic: 'int',\n  });\n  await loreTest.roll();\n\n  if (loreTest.succeeded) {\n    loreTest.result.other.push(`<b>${actor.name}</b> recognizes lures of Lurkerfish.`);\n    loreTest.renderRollCard();\n    return;\n  } \n}\n\nlet test = await actor.setupSkill('Cool',  {\n  appendTitle: ` – ${this.effect.name}`,\n  skipTargets: true,\n  fields: {difficulty: 'easy'},\n  characteristic: 'wp',\n});\nawait test.roll();\n\nif (!test.succeeded) {\n  test.result.other.push(`<b>${actor.name}</b> became beguiled by the sight and unable to perform any action except moving towards the light.`);\n  test.renderRollCard();\n  actor.addCondition(\"unconscious\");\n}",
  "ECUIJLcKt2TCSFS3": "return !args.weapon?.system?.attackType || game.settings.get(\"wfrp4e\", \"useGroupAdvantage\")",
  "ed7Sud9HM3uB2j6b": "ChatMessage.create({content : \"<em>Krzycz lub Umieraj!</em>\", speaker : ChatMessage.getSpeaker({token: this.actor.getActiveTokens()[0]?.document, actor: this.actor})}, {chatBubble : true})\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = 2;\r\nthis.script.scriptNotification(\"Dodano: \" + data.name);\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});\r\ngame.wfrp4e.utility.postFear(2, this.actor.prototypeToken.name)",
  "EDAMEOzdBfkoKHxP": "return args.skill?.name !== game.i18n.localize(\"NAME.Navigation\");",
  "EdTChmSouS0MSmk5": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.succeeded)\r\n{\r\n    this.script.message(\"Można wykonać Akcję lub Ruch w tej rundzie (wybierz jedno)\")\r\n}\r\nelse \r\n{\r\n    this.script.message(\"Nie można wykonać Akcji ani Ruchu w tej rundzie\")\r\n}",
  "egDtqMxe3iekc6hv": "let trait = args.opposedTest.attackerTest.item\r\nlet woundLossEffect = this.item.effects.get(\"7Amhi75wLv0PvGjd\")\r\nif (trait && trait.name.includes(\"Ugryzenie\") && woundLossEffect)\r\n{\r\n    args.actor.applyEffect({effectUuids : woundLossEffect.uuid})\r\n}",
  "eGQAyzCFZAEQhyJl": "const roll = new Roll(\"2d10\");\nawait roll.evaluate();\nconst money = game.wfrp4e.market.addMoneyTo(this.actor, `${roll.total}b`);\nawait this.actor.updateEmbeddedDocuments(\"Item\", money);\nthis.script.message(game.i18n.format(\"SCRIPT.Silvertide\", {name: this.actor.name, pennies: roll.total}));",
  "EGWF3LHav3e2zFL4": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Ranged\")) || args.item?.isRanged || args.item?.name == game.i18n.localize(\"NAME.Charm\");",
  "eh1J3s0s4A2AxoFp": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.8pVzgPkgWpTJvfhG\");\r\nlet data = item.toObject();\r\ndata.name += \" (Wróg)\";\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "EHfOyVwYhFGWNjw1": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {difficulty: \"difficult\"})\n  await test.roll();\n  if (!test.succeeded)\n  {\n    await this.actor.addCondition(\"poisoned\");\n  }",
  "eHgk3HZ6eyLFTZ9o": "return !args.item?.system.magicMissile?.value && !args.item?.system.attackType",
  "eHRv7f2BTtle6Y1K": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.sJ3yX1kvzu2hgNq5\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "eieFcF4BxIvDTN3C": "args.abort = `Nie może wykonywać ataków dystansowych: ${this.effect.name}`;",
  "eIiiDhJohYez26qY": "const {targetUuid} = this.effect.flags.wfrp4e;\r\n\r\nif (args.actor.uuid !== targetUuid) return;\r\n\r\nconst recordedWounds = this.effect.getFlag(\"wfrp4e\", \"damageToReturn\");\r\n\r\nif (!recordedWounds) return;\r\n\r\nargs.modifiers.other.push({label: this.effect.name, value: recordedWounds});\r\nargs.totalWoundLoss += recordedWounds\r\n\r\nthis.effect.unsetFlag(\"wfrp4e\", \"damageToReturn\");",
  "EiLaZW4b4ypw5sLV": "// can't use Damage application type because that checks if wounds were dealt\nargs.actor.applyEffect({effectUuids : this.item.effects.contents[0].uuid})",
  "EJaBfqADqlo92Fx6": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.oGbDwnLOn3isPJpO\")\r\nlet data = item.toObject();\r\ndata.name += \" (Do ustalenia)\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "EJObiSth3WdcJOXN": "if (args.test.characteristicKey == \"wp\" && args.test.failed && args.test.result.SL <= -3)\r\n{\r\n    this.script.notification(\"Dodano: Powalenie\");\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "ekjJQHyMbZT2vqdc": "let uses = this.item.getFlag(\"wfrp4e\", \"uses\") || 0;\r\nuses++;\r\nthis.script.notification(`Wykorzystano: ${uses}`)\r\nthis.item.setFlag(\"wfrp4e\", \"uses\", uses);\r\nif (uses >= 3)\r\n{\r\n\tthis.effect.update({\"system.transferData.type\" : \"other\"})\r\n\tthis.script.notification(`Zurzyty`);\r\n}\r\n",
  "EKkdyp51Wf4csw2B": "return this.actor.statuses.has(\"frenzy\");",
  "ElHBPMMx37SZMvOC": "this.actor.addCondition(\"ablaze\");\nthis.script.scriptMessage(`${this.actor.name} has a received a @Condition[Ablaze]`)",
  "eLxdRg8LX3AdYSEq": "let sumArmour = 0;\nfor (let key in this.actor.system.status.armour) {\n  let armour = this.actor.system.status.armour[key];\n  sumArmour += Number(armour?.value || 0);\n}\nlet damage = Math.floor(Number(sumArmour)/2);\nif (damage > 0 ) { \n\tthis.script.scriptMessage(await this.actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))\n}",
  "EmmG49pMOPHRwDzR": "   let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n   if (args.test.isFumble && roll == 1 && !args.test.result.misfire)\r\n  {\r\n          args.test.result.misfire = game.i18n.localize(\"Misfire\") + \" (Wyrzucono 1)\"\r\n          args.test.result.misfireDamage = eval(parseInt(args.test.result.roll.toString().split('').pop()) + args.test.item.Damage)\r\n  }\r\n  else if (args.test.isFumble && roll != 1)\r\n      args.test.result.other.push(\"Rzut na niewypał: \" + roll)\r\n",
  "EmXwcuycEH8slEn5": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}})\r\nawait test.roll();\r\nif(test.failed)\r\n{\r\n    this.actor.addCondition(\"unconscious\")\r\n}",
  "ENGmwaItRXO5s0XY": "await this.actor.modifyWounds(this.actor.system.characteristics.t.bonus * 3)\r\nthis.script.message(`Uleczone Rany: ${this.actor.system.characteristics.t.bonus * 3}`)\r\n\r\nthis.actor.hasCondition(\"bleeding\")?.delete()\r\nthis.actor.hasCondition(\"fatigued\")?.delete()\r\n",
  "EpdMj9d9SYPeP44q": "return args.characteristic != \"ag\"  && args.item?.id != this.item?.id",
  "ePPgxQOqL1Uhz2k9": "let addOption = await foundry.applications.api.DialogV2.confirm({\r\n    window : {title : \"Opcjonalne\"},\r\n    content : \r\n    `\r\n    Dodać opcjonalne przedmioty?\r\n    <p>\r\n    Broń Zasięgowa (Łuk) +10 oraz długi łuk z 12 strzałami\r\n    </p>\r\n    `,\r\n})\r\n\r\nlet choice = []\r\n\r\nif (addOption)\r\n{\r\n    choice = [\r\n        {\r\n            type : \"skill\",\r\n            name : \"Broń Zasięgowa (Łuk)\",\r\n            diff : {\r\n                system : {\r\n                    advances : {\r\n                        value : 10\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            type : \"weapon\",\r\n            name : \"Łuk długi\",\r\n        },\r\n        {\r\n            type : \"ammunition\",\r\n            name : \"Strzała\",\r\n        }\r\n    ];\r\n}\r\n\r\n\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "eq32dKXeTAbKhhLf": "if (args.totalWoundLoss > 0)\n{\n   args.actor.addCondition(\"ablaze\", Math.max(1, parseInt(args.opposedTest.attackerTest.result.SL) + 1))\n}",
  "EQ5dtGW5kQhtAb87": "await this.actor.addCondition(\"prone\")\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"hard\"}, skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\tawait this.actor.addCondition(\"stunned\")\r\n}",
  "eqxE7nBO13yJS7hc": "let roll = (await new Roll(\"1d10\").roll())\r\nroll.toMessage({flavor: \"Uleczono Rany\", speaker : {alias : this.actor.name}})\r\n\r\nthis.actor.modifyWounds(roll.total)\r\n\r\nthis.actor.hasCondition(\"bleeding\")?.delete();",
  "ErgOwSiVnm9VLVHN": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.DrNUTPeodEgpWTnT\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "eRVVn8YtU8nnOW2q": "await this.actor.addCondition(\"prone\");\r\n\r\nconst test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` - ${this.effect.name}`,\r\n  fields: {difficulty: \"difficult\"},\r\n  context: {\r\n    failure: `Receives 8 Damage.`,\r\n    success: `Receives 4 Damage.`\r\n  }\r\n})\r\n\r\nawait test.roll();\r\nconst damage = test.failed ? 8 : 4;\r\n\r\nawait this.actor.applyBasicDamage(damage, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, loc: \"roll\"});",
  "ERxrWzSpw8qwxFVi": "this.script.notification(`Nie można wejść: ${this.effect.name}!`); this.actor.addCondition(\"broken\");",
  "esuLwq4g5T8k1kLT": "await args.actor.addCondition(\"ablaze\"); await args.actor.addCondition(\"prone\");",
  "Et4tPHlrkueLqP3T": "if (args.item.type == \"skill\") args.item.system.modifier.value -= 10",
  "ETfmit2Cx0Py77ai": "let characteristics = {\n    \"ws\" : -10,\n    \"bs\" : 0,\n    \"s\" : 0,\n    \"t\" : 0,\n    \"i\" : -25,\n    \"ag\" : -20,\n    \"dex\" : 0,\n    \"int\" : -200,\n    \"wp\" : -200,\n    \"fel\" : -200\n}\nlet traits = [ {name:\"Construct\"}, {name:\"Dark Vision\"}, {name:\"Fear\", value: 2}, {name:\"Painless\"},{name:\"Undead\"},{name:\"Unstable\"} ];\nlet items = [];\n\nlet updateObj = this.actor.toObject();\nfor (let ch in characteristics)\n{\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\n}\n\nupdateObj.system.characteristics.int.initial = 0;\nupdateObj.system.characteristics.wp.initial = 0;\nupdateObj.system.characteristics.fel.initial = 0;\n\nfor (let trait of traits)\n{\n    let traitItem = await game.wfrp4e.utility.find(trait.name, \"trait\")\n    if (traitItem)\n    {   \n        let t = traitItem.toObject();\n        t.system.specification.value = trait.value;\n        items.push(t);\n    }\n    else \n    {\n        ui.notifications.warn(`Could not find ${trait.name}`, {permanent : true})\n    }\n}\n\n\nupdateObj.name = updateObj.name += \" \" + this.effect.name\n\nawait this.actor.update(updateObj)\nthis.actor.createEmbeddedDocuments(\"Item\", items);\n\n",
  "eTHJSRutCEpuyPkR": "return args.weapon?.system?.attackType !== \"melee\" || game.settings.get(\"wfrp4e\", \"useGroupAdvantage\")",
  "EU5j0hnDTG9Z6d1e": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}})\r\nawait test.roll();\r\nif(test.failed)\r\n{\r\n    this.actor.addCondition(\"stunned\", 2)\r\n}",
  "EVBSHEC5nmmj2X41": "return args.skill?.name != game.i18n.localize(\"NAME.Climb\")  && !args.skill?.name?.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "Ew3C2WmLCtc1KT46": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\")) || args.item?.id == this.item?.id",
  "EwD053Fyy46b59ZI": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.6l3jvIAvrKxt0lA9\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "eWWLmA2xINR321aK": "args.item.system.qualities.value.push({name : \"magical\"})",
  "EXiqepAIXmbqMiKa": "if (args.opposedTest?.attackerTest?.weapon?.name.toLowerCase().includes(\"unarmed\")) {\n  const sl = this.effect.getFlag(\"wfrp4e-archives3\", \"sl\");\n  args.totalWoundLoss += sl;\n  args.modifiers.other.push({label: this.effect.name, value: sl});\n}",
  "Eye6dranWpNsILjm": "if (this.actor.system.status.wounds.value <= 1)\n{\n    this.effect.delete();\n}",
  "EYny6z5oTOhxGDfb": "args.fields.modifier -= 10;\r\n",
  "ezGqDoC9hNRBnFTB": "let choices = await Promise.all([warhammer.utility.findItemId(\"1zaqojk0Oq1m8vYv\"), warhammer.utility.findItemId(\"zIuarD5mB0EF0ji0\")])\r\nlet items = await game.wfrp4e.apps.ItemDialog.create(choices, 1, \"Wybierz broń\")\r\nitems = items.map(i => i.toObject())\r\n\r\nitems.forEach(i => i.system.equipped.value = true);\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "f062aa2BNClx08D6": "let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\n    await test.roll();\r\n    if (test.failed) \r\n    {\r\n      let toughnessLost = parseInt(this.effect.sourceTest.result.SL)\r\n\r\n      let currentModifier = this.actor.characteristics.t.modifier\r\n\r\n      await this.actor.update({ \"system.characteristics.t.modifier\": currentModifier - toughnessLost })\r\n      this.script.message(`<b>${this.actor.prototypeToken.name}</b> utracone punkty Wytrzymałości: ${toughnessLost}`)\r\n      if (this.actor.system.characteristics.t.value <= 0)\r\n      {\r\n          this.actor.addCondition(\"dead\");\r\n      }\r\n\r\n    }",
  "f29Pv6TQtgILxt1h": "if (args.test.options.healWounds) {\n if (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target) {\n   let wounds = this.actor.characteristics.int.bonus + ~~args.test.result.SL\n   if (args.test.options.fieldDressing && args.test.result.reversed)\n      wounds = this.actor.characteristics.int.bonus + Math.min(1, Number(args.test.result.SL))\n\targs.test.result.woundsHealed = wounds\n\targs.test.result.other.push(`<b>${this.actor.name}</b> healed <b>${wounds}</b> wounds of the patient.`)\n   }\n   else if (this.actor.characteristics.int.bonus + args.test.result.SL < 0)\n      args.test.result.other.push(`The patient contracts a @UUID[Compendium.wfrp4e-core.items.Item.1hQuVFZt9QnnbWzg]{Minor Infection}.`)\n}",
  "F2u4L4o0r1LTWeWK": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = await ValueDialog.create({text : \"Podaj Wartość Grozy\", title : this.effect.name});\r\n    if (value)\r\n    {\r\n     this.item.updateSource({\"system.specification.value\" : value});\r\n    }\r\n}",
  "f3rXusHh6VIpVPUl": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Language\")) && args.type != \"cast\"",
  "F4aGsdzJ9SYcX57F": "if (args.equipped)\n{\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.HpFkVJ2lYPAWumUL\")\n    let data = item.toObject();\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n}\nelse \n{\n    this.effect.deleteCreatedItems();   \n}",
  "f4vvAGQ8OGoEbrgy": "let SL = args.opposedTest.attackerTest.result.SL - args.opposedTest.attackerTest.item.cn.value\r\nlet difficulty = \"challenging\"\r\nif (SL >= 1)\r\n   difficulty = \"difficult\"\r\nif (SL >= 2)\r\n   difficulty = \"hard\"\r\nif (SL >= 3)\r\n   difficulty = \"vhard\"\r\n   \r\n\r\nlet test = await args.actor.setupCharacteristic(\"wp\", {fields: {difficulty}, skipTargets: true, appendTitle :  \" - \" + this.effect.name, context : {failure: \"Otrzymano Stan Oszołomienie\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    args.actor.addCondition(\"stunned\");\r\n}",
  "f5Mp3kXwCFdPkW6N": "return args.skill?.name != `${game.i18n.localize(\"NAME.Entertain\")} (${game.i18n.localize(\"SPEC.Sing\")})` && args.skill?.name != `${game.i18n.localize(\"NAME.Entertain\")} (${game.i18n.localize(\"SPEC.Singing\")})` && !args.skill?.name.includes(game.i18n.localize(\"NAME.Language\"));",
  "f6WnrJvoNkfoNN9Y": "return args.item?.attackType != 'melee'",
  "F7BHb4a7fqWMnYxH": "args.test.data.result.other.push(`You may not use Fortune Points because of ${this.effect.name}`);",
  "f7WZvYle9iqefRsh": "return args.weapon?.system?.attackType != \"melee\"",
  "F8Bmh6w01YvKsBIO": "for (const weapon of args.actor.itemTags.weapon) {\r\n  weapon.system.qualities.value.push(\r\n    {name: \"impale\", value: null},\r\n    {name: \"penetrating\", value: null},\r\n  );\r\n}",
  "f8cnfvGKJH3bYVGN": "return [\"s\", \"t\"].includes(args.characteristic)",
  "F9P8Nh4AKnqSGg8C": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.bxbTiLzbaz4vdukT\",          // Hunter's Eye\n  \"Compendium.wfrp4e-core.items.Item.XSb3QVB9ipPBFt56\",       // Shadow\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "fA1dIV1ANo4RVEqy": "if (args.equipped) \n{\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.4mF5Sp3t09kZhBYc\");\n    let champion = item.toObject();\n    this.actor.createEmbeddedDocuments(\"Item\", [champion], {fromEffect : this.effect.id})\n} \nelse \n{\n  this.effect.deleteCreatedItems();\n}",
  "FAB12eLcSCAOOQwk": "this.script.message(await this.actor.applyBasicDamage(20, {suppressMsg: true}));",
  "FAf4iXj5LkdvukS2": "fromUuid(\"Compendium.wfrp4e-wom.items.0Xdm4r7l2EwC4fcg\").then(item => Item.create(item.toObject(), {fromEffect : this.effect.id, parent : this.actor}))",
  "faRFSsrQylQRZFLk": "return args.bleedingHand || !args.weapon || !this.actor.hasCondition(\"bleeding\")",
  "FbfJjYUyp0ArtZMb": "args.fields.modifier += 15",
  "FciJSTq7dZsZIPgl": "if (args.equipped)\n{\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.SfUUdOGjdYpr3KSR\")\n    let data = item.toObject();\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n}\nelse \n{\n    this.effect.deleteCreatedItems();   \n}",
  "fcY3pa72dELnOFXV": "return !args.context.reload\r\n",
  "fEFfHFeJxkR0aIJK": "if (args.opposedTest.result.differenceSL >= 0 && args.opposedTest.result.differenceSL <= 3 && args.opposedTest.result.winner == \"attacker\")\r\n{ \r\n    this.script.message(`Wszyscy w zasięgu 20 metrów otrzymują 1 Ranę oraz muszą wykonać <strong>Wymagający (-10) Test Odporności</strong> lub otrzymają Stan @Condition[Ogłuszenie]`, {blind : true,  whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}\r\n    ",
  "feMPZhhFeXRtKdKY": "if (this.item.system.quantity.value)\n{\n\tthis.item.system.reduceQuantity();\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\n\tactor.applyEffect({effectUuids : this.item.effects.contents[0]?.uuid})\n}\nelse\n{\n\tthis.script.notification(\"None left!\", \"error\")\n}",
  "fEyKQqCjDwml3DXO": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.M8XyRs9DN12XsFTQ\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "fFGuTi0HLjwneMcJ": "return args.item?.system.isRanged",
  "fFi9JD4uCY9DPC5B": "let specification = Number(this.item.specification.value) || 1;\nargs.actor.system.characteristics.t.initial += 10 * specification;\nargs.actor.system.status.carries.max -= Math.floor(args.actor.system.status.carries.max * 0.1 * specification);\nargs.actor.system.details.price.gc += Math.floor(args.actor.system.details.price.gc * 0.1 * specification);",
  "FfTqCPxCoxwGDTQs": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.wMwSRDmgiF2IdCJr\")\nlet data = item.toObject()\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n",
  "ffvcCEazZBinHlUX": "args.update({texture : {tint : \"#FFD700\"}});\n",
  "FGIHAkNdYXbTnewG": "if (!game.settings.get(\"wfrp4e\", \"useGroupAdvantage\"))\r\n  return;\r\n\r\n\r\nawait this.actor.modifyAdvantage(1);\r\nthis.effect.delete();",
  "FiD3mvWIBHNNIuO9": "if (args.opposedTest.result.hitloc.value == \"body\")\r\n{\r\n   if ((await new Roll(\"1d2\").roll()).total == 1)\r\n   {\r\n       args.opposedTest.result.hitloc.value = \"head\"\r\n       this.script.message(`Miejsce Trafienia zmienione na głowę`)\r\n   }\r\n}",
  "fiF9sM5UpcHMYa33": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.vMYEkrWj0ip6ZOdv\");\r\nlet data = item.toObject();\r\ndata.name += \" (Trucizny, Choroby, Chaos)\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", Array(this.effect.sourceTest.result.overcast.usage.other.current).fill(data), {fromEffect: this.effect.id})",
  "fIUxKZMWJ8HMPmH9": "return [\"wp\", \"ag\", \"i\", \"int\"].includes(args.characteristic)",
  "FKEH7DeqU0FH4dkk": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {fields : {difficulty : \"hard\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\n\nif (test.failed) {\n  \tthis.script.scriptMessage(await this.actor.applyBasicDamage(20, {suppressMsg: true}));\n        this.script.scriptMessage(`${this.actor.name} is subject to @UUID[Compendium.wfrp4e-core.journals.JournalEntry.NS3YGlJQxwTggjRX.JournalEntryPage.WCivInLZrqEtZzF4#drowning-and-suffocation]{Suffocation}`);\n}",
  "fkFmNcesqqNTMhVn": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.2iult41Jehz0F1O8\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key;\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "FkTwk8hfHpRLbAp2": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "fKzlu6fFE2th9uIJ": "return args.item?.name == game.i18n.localize(\"NAME.ConsumeAlcohol\")",
  "fl762icfKrt9ear2": "this.actor.removeCondition(\"broken\", parseInt(this.effect.sourceTest.result.SL)+1)",
  "fLg90csmdOOKmEE6": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.EO05HX7jql0g605A\")\nlet data = item.toObject();\ndata.system.specification.value = 16\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.Bvd2aZ0gQUXHfCTh\")\nlet data = item.toObject();\ndata.system.specification.value = 8\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "FMA16PvoObBV8vDl": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.EO05HX7jql0g605A\")\nitem = item.toObject()\nitem.system.specification.value = 20\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})\nthis.script.notification(item.name + \" added\")",
  "FmLx9pwOkzqqU7Ph": "return args.skill?.name == game.i18n.localize(\"NAME.Track\");",
  "FMSN5uRskkATexzB": "game.wfrp4e.tables.rollToChat(\"crithead\")",
  "fNUiKELi9e1vg7KY": "args.actor.removeCondition(\"fatigued\", 99);\nargs.actor.removeCondition(\"bleeding\", 99);",
  "fP2edYbj6QjPPAjL": "return [game.i18n.localize(\"NAME.CharmAnimal\"), game.i18n.localize(\"NAME.Endurance\"), game.i18n.localize(\"NAME.OutdoorSurvival\")].includes(args.skill?.name)",
  "fPKYkBllp7Et62lX": "if (args.test.spell.name == \"Warp Lightning\")\n{\n    args.test.preData.canReverse = true;\n}",
  "FPQp6XfbUH1BMafj": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Athletics\"), {fields : {difficulty : \"vhard\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) \n{\n\tthis.actor.addCondition(\"prone\");\n    this.script.scriptMessage(\"Cannot move or act this Turn\");\n}",
  "FPYNcxm21678boLT": "if (args.attackerTest.data.preData.rollClass !== \"CharacteristicTest\") return;\nif (args.attackerTest.data.preData.characteristic !== \"s\") return;\n\nconst SL = args.opposedTest.data.opposeResult.differenceSL;\n\nconst targetId = this.effect.getFlag(\"wfrp4e\", \"target\");\nconst target = canvas.scene.tokens.get(targetId);\n\nif (SL > 4) {\n  args.opposedTest.data.opposeResult.other.push(`<b>${args.defenderTest.actor.name}</b> was forced to let go of <b>${target.name}</b>.`);\n  return await this.effect.delete();\n}\n\nif (SL > 0) {\n  args.opposedTest.data.opposeResult.other.push(`<b>${args.defenderTest.actor.name}</b> was prevented from squeezing <b>${target.name}</b> for one turn.`);\n  let turns = this.effect.getFlag(\"wfrp4e\", \"turns\");\n  this.effect.setFlag(\"wfrp4e\", \"turns\", turns + 1);\n}",
  "fq2fqlWlrVfitkcB": "let characteristics = {\n    \"ws\" : 0,\n    \"bs\" : -200,\n    \"s\" : 20,\n    \"t\" : 20,\n    \"i\" : 0,\n    \"ag\" : -5,\n    \"dex\" : -5,\n    \"int\" : 0,\n    \"wp\" : 0,\n    \"fel\" : 0\n}\nlet traits = [ {name:\"Corruption\"}, {name:\"Painless\"}, {name:\"Stupid\"}, {name:\"Swarm\"}, {name:\"Bestial\", disabled : true}, {name:\"Regenerate\", disabled : true}, {name:\"Size\", value: \"Large\", disabled : true}, {name:\"Territorial\", disabled: true} ];\nlet items = [];\n\nlet updateObj = this.actor.toObject();\nfor (let ch in characteristics)\n{\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\n}\n\nfor (let trait of traits)\n{\n    let traitItem = await game.wfrp4e.utility.find(trait.name, \"trait\")\n    if (traitItem)\n    {   \n        let t = traitItem.toObject();\n        t.system.specification.value = trait.value;\n        if (trait.disabled)\n        {\n            t.system.disabled = true;\n        }\n        items.push(t);\n    }\n    else \n    {\n        ui.notifications.warn(`Could not find ${trait.name}`, {permanent : true})\n    }\n}\n\n\nupdateObj.name = updateObj.name += \" \" + this.effect.name\n\nawait this.actor.update(updateObj)\nthis.actor.createEmbeddedDocuments(\"Item\", items);\n\n",
  "FqevMs0ukQ9WuUHl": "// Each time the blade is used, the GM should secretly roll a d10.\r\n// On a 1, its poison has run dry, \r\n// and the next time it is employed it will shatter.\r\n\r\nif (this.item.getFlag(\"wfrp4e\", \"brittle\"))\r\n{\r\n    ChatMessage.create({content: `<strong>${this.item.name}</strong> ulega rozbiciu!`})\r\n    this.item.update({name : `${this.item.name} (Rozbity)`})\r\n}",
  "FSqUqSByMiztYOQM": "if (args.totalWoundLoss > 0)\r\n     this.script.message(`<b>Infekcja: ${args.actor.name}</b> musi zdać <b>Prosty (+40) Test Odporności</b> lub otrzyma @UUID[Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb]{Ropiejącą Ranę}`, {whisper: ChatMessage.getWhisperRecipients(\"GM\") })",
  "fSTjJIqg5tvbwxKt": "const uuid = \"Compendium.wfrp4e-core.items.Item.ahlxlfIl8xUhBkic\";\nconst item = await fromUuid(uuid);\nconst data = item.toObject();\ndata.name = this.effect.name;\ndata.system.equipped.value = true;\n\nconst effectData = this.effect.sourceItem.effects.find(e => e.disabled).toObject();\neffectData.disabled = false;\ndata.effects = [effectData];\n\nconst dagger = await this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});",
  "ft0LaRWZT5WtnptP": "let advantage = this.actor.system.status.advantage.value;\r\nif (advantage > 0)\r\n{\r\n    await this.actor.setAdvantage(0);\r\n    this.script.notification(\"Zmniejszono Punkty Przewag\")\r\n}\r\nelse \r\n{\r\n    return this.script.notification(\"Niewystarczająca liczba Punktów Przewag!\", \"error\")\r\n}\r\n\r\nlet test = await this.actor.setupTrait(this.item, {fields : {slBonus : advantage}})\r\nawait test.roll();",
  "FttdVBQiNssDAARh": "return args.data.targets[0]?.actor?.hasCondition(\"entangled\")",
  "fTw3mpSUOlkqVVUC": "this.actor.applyEffect({effectUuids : this.item.effects.contents[0].uuid})",
  "FtZf56VI6Qsspu0D": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'difficult';\nconst target = 20;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "Fu8DTvSgLufcB5mr": "async function rollTable(characteristics, formula, name) {\r\n  const roll = new Roll(formula);\r\n  await roll.toMessage({flavor: name});\r\n\r\n  const values = roll.dice[0].values;\r\n\r\n  for (const value of values) {\r\n    let characteristic;\r\n    switch (value) {\r\n      case 1: case 2: characteristic = \"ws\"; break;\r\n      case 3: case 4: characteristic = \"i\"; break;\r\n      case 5: case 6: characteristic = \"int\"; break;\r\n      case 7: case 8: characteristic = \"fel\"; break;\r\n      case 9: case 10: characteristic = \"*\"; break;\r\n      default: continue;\r\n    }\r\n\r\n    if (characteristics.has(characteristic)) {\r\n      await rollTable(characteristics, \"1d10\", name);\r\n    } else {\r\n      characteristics.add(characteristic);\r\n    }\r\n  }\r\n}\r\n\r\nconst characteristics = new Set();\r\nawait rollTable(characteristics, \"2d10\", this.effect.name)\r\n\r\nif (characteristics.has(\"*\")) {\r\n  characteristics.delete(\"*\");\r\n  const availableChoices = foundry.utils.duplicate(game.wfrp4e.config.characteristics);\r\n\r\n  for (const ch of characteristics) delete availableChoices[ch];\r\n\r\n  const result = warhammer.apps.ValueDialog.create({\r\n    text: \"Choose a characteristic\",\r\n  }, \"\", availableChoices);\r\n\r\n  if (!result) return;\r\n\r\n  characteristics.add(result);\r\n}\r\n\r\nthis.effect.setFlag(\"wfrp4e\", \"characteristicsToSwap\", Array.from(characteristics));",
  "fUD4gMdKe6P3sFdJ": "this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.Zh68gzYMLW8vZgVo\", this.effect)",
  "FUgCtIoj1Stgqxt7": "return ![\"ws\", \"bs\", \"s\", \"ag\", \"t\", \"dex\"].includes(args.characteristic)",
  "fve7tiyF5X9B7mHJ": "args.fields.slBonus -= 2;",
  "Fvlc4RkeF4dHjW3m": "let caster = this.effect.sourceActor\r\nif (caster && (this.actor.has(game.i18n.localize(\"NAME.Undead\")) || this.actor.has(game.i18n.localize(\"NAME.Daemonic\")))) {\r\n    let wp = caster.system.characteristics.wp.value\r\n    if (wp > this.actor.system.characteristics.t.value) {\r\n        if (this.actor.has(game.i18n.localize(\"NAME.Unstable\"))) {\r\n            this.actor.update({ \"system.status.wounds.value\": 0 })\r\n            this.actor.addCondition(\"dead\")\r\n        }\r\n        else {\r\n            fromUuid(\"Compendium.wfrp4e-core.items.D0ImWEIMSDgElsnl\").then(item => {\r\n                this.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], { fromEffect: this.effect.id })\r\n                ChatMessage.create({ content: `${this.actor.prototypeToken.name}: otrzymano ${game.i18n.localize(\"NAME.Unstable\")}`, speaker: { alias: caster.name } })\r\n            })\r\n        }\r\n    }\r\n}",
  "Fwk8WA8NfRivLFWJ": "return args.skill?.name === \"Entertain (Singing)\";",
  "FX8ILw0VgbNxkObA": "const uuid = \"Compendium.wfrp4e-core.items.Item.mCvZAj5F6hfUZhzR\";\nconst item = await fromUuid(uuid);\nconst data = item.toObject();\ndata.name = this.effect.name;\ndata.type = 'trapping';\ndata.system.trappingType = {value: 'clothingAccessories'};\ndata.system.equipped = {value: true};\n\nconst effectData = this.effect.sourceItem.effects.find(e => e.disabled).toObject();\neffectData.disabled = false;\neffectData.system.transferData.equipTransfer = true;\ndata.effects = [effectData];\n\nconst dagger = await this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});",
  "FXuyiJoXdAh6WhRK": "return args.skill?.name == `${game.i18n.localize(\"NAME.Ride\")} (${game.i18n.localize(\"SPEC.Horse\")})` && game.combat?.active",
  "FXwfqF0jpXlBQ9Y3": "return args.item?.system?.isMelee && this.actor.attacker",
  "fY0TsQwnU14fdPl2": "args.fields.modifier += 30;",
  "fYLSe6CrYciap5y8": "let characteristics = {\r\n    \"ws\" : 0,\r\n    \"bs\" : 0,\r\n    \"s\" : 10,\r\n    \"t\" : 10,\r\n    \"i\" : 0,\r\n    \"ag\" : 10,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 0,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [game.i18n.localize(\"NAME.ConsumeAlcohol\"), game.i18n.localize(\"NAME.Row\"), game.i18n.localize(\"NAME.Sail\"), game.i18n.localize(\"NAME.Swim\")]\r\nlet skillAdvancements = [10, 10, 10, 10]\r\nlet talents = []\r\nlet trappings = []\r\nlet items = []\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "FYUPfYyTYZkxRLFT": "return ![\"NAME.Endurance\", \"NAME.Cool\"].map(i => game.i18n.localize(i)).includes(args.skill?.name)",
  "FZFOC7bip0oiWEzk": "if (args.opposedTest.result.hitloc.value == this.item.system.location.key && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 2);\r\n    this.script.notification(\"Otrzymano Krwawienie\")\r\n}",
  "fzTB7t3x4bLmAXji": "let roll = await new Roll(\"1d10 + 1\").roll()\r\nawait roll.toMessage(this.script.getChatData());\r\nthis.script.notification(`Uleczone Rany: ${roll.total}`)\r\nthis.actor.corruptionDialog(\"moderate\")\r\nawait this.actor.modifyWounds(roll.total)",
  "g07HI7vyqiFXPB0o": "// A Drinker must take a Difficult (-10) Endurance Test.\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"difficult\"}})\r\nawait test.roll()\r\n// If they fail, they acquire 2 Poisoned Conditions. \r\nif (test.failed) \r\n{\r\n    this.actor.addCondition(\"poisoned\", 2)\r\n    this.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> otrzymuje 2 Poziomy Stanu @Condition[Zatrucie].</p>\r\n        <p>Każde stworzenie cechą Zwierzęcy, która ugryzie ofiarę i otrzyma obrażenia, nie ugryzie ponownie podczas trwającego starcia, chociaż stworzenie może nadal atakować na inne sposoby.</p>`, \r\n    {\r\n      whisper: ChatMessage.getWhisperRecipients(\"GM\"), \r\n      blind: true \r\n    })\r\n}\r\n  // If they succeed, for a number of rounds equal to 3+ their SL, they have the Corrosive Blood Creature Trait.\r\nelse if (test.succeeded) \r\n{\r\n    // Don't attempt to add Corrosive Blood if actor already has it\r\n    const hasCorrosiveBlood = this.actor.has(\"Kwasowa Krew\")\r\n    if (hasCorrosiveBlood !== undefined) return   \r\n\r\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.M5QSWOYt2Rbv2yxW\")\r\n    let data = item.toObject()\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n    \r\n    const duration = 3 + parseInt(test.result.SL)\r\n    this.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> otrzymuje Kwasową Krew na liczbę rund: ${duration}.</p>`, \r\n      { whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })    \r\n}",
  "g0SzfsLyW7aD2F19": "if (this.item.system.tests.value.includes(\"(Grupa Społeczna)\"))\r\n{\r\n    let tests = this.item.system.tests.value\r\n    let name = this.item.name\r\n\r\n    // If name already specifies, make sure tests value reflects that\r\n    if (name.includes(\"(\") && !name.toLowerCase().includes(\"(grupa społeczna)\"))\r\n    {\r\n        let group = name.split(\"(\")[1].split(\")\")[0]\r\n        tests = `${tests.split(\"(\")[0].trim()} (${group})`\r\n    }\r\n    else\r\n    {\r\n        let value = await ValueDialog.create({text : \"Napisz, czyjej Etykiety dotyczy talentu\", title : this.effect.name});\r\n        if (value)\r\n        {\r\n            name = `${name.split(\"(\")[0].trim()} (${value})`\r\n            tests = this.item.system.tests.value.replace(\"Grupa Społeczna\", value);\r\n        }\r\n    }\r\n    this.item.updateSource({name, \"system.tests.value\" : tests})\r\n    this.item.updateSource({\"name\" : name});\r\n}",
  "g1L8OYO9nCOhdKGL": "// Everything within Fellowship Bonus yards \n// of the target point is splashed with mystic poison, \n// suffering 1d10 + SL damage which ignores Armour Points\n\nlet damage = (await new Roll(`1d10 + ${parseInt(this.effect.sourceTest.result.SL)}`).roll())\n\nawait damage.toMessage(this.script.getChatData())\n\nthis.script.message(await args.actor.applyBasicDamage(\n  damage.total,\n  {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}\n))\n\n// ... and gains the Poisoned Condition\n\nthis.actor.addCondition(\"poisoned\")",
  "G1RletYc6BzigJrK": "let ablaze = parseInt(this.effect.sourceTest.result.SL) + 5\nargs.actor.addCondition(\"ablaze\", ablaze)",
  "g4t56A09yrpZaJQ2": "    let amberTalons = foundry.utils.deepClone(game.wfrp4e.config.systemItems.unarmed);\r\n    amberTalons.name = \"Szpony Furii\";\r\n    amberTalons.img = this.effect.img;\r\n    amberTalons.system.damage.value = \"SB + WPB\"\r\n    amberTalons.system.equipped = true;\r\n    amberTalons.system.qualities.value.push({name : \"magical\"})\r\n    amberTalons.effects.push({\r\n        label : \"Szpony Furii\",\r\n        transfer: false,\r\n        img : \"modules/wfrp4e-core/icons/spells/amber-talons.png\" ,\r\n        system: {\r\n          transferData : {\r\n                  documentType : \"Item\"\r\n              },\r\n              scriptData : [{\r\n                  trigger : \"applyDamage\",\r\n                  script : \"if (args.totalWoundLoss >= 1)\\n{ \\n    args.actor.addCondition(\\\"bleeding\\\")\\n}\"\r\n              }]\r\n          }\r\n      })\r\n    this.actor.createEmbeddedDocuments(\"Item\", [amberTalons], {fromEffect: this.effect.id})",
  "g5y0tdoHCDs7cBy7": "return ![\"NAME.Endurance\", \"NAME.Cool\"].map(i => game.i18n.localize(i)).includes(args.skill?.name) \r\n  || !this.actor.sameSideAs(this.effect.sourceActor)\r\n  || this.actor.system.details.status.tier !== \"b\"",
  "G7sFEnJlXZvfXL3V": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n    let effectData = this.item.effects.contents[1].convertToApplied();\r\n\teffectData.system.sourceData.item = this.item.uuid\r\n\tactor.applyEffect({effectData : [effectData]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "ga6bQzPuoIiQQrKg": "if (args.totalWoundLoss > 0)\n{\n    \n    let test = await args.actor.setupCharacteristic(\"t\",  {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\n    await test.roll()\n    if (test.failed)\n    {\n        args.totalWoundLoss += this.effect.sourceActor.system.characteristics.wp.bonus\n        args.modifiers.other.push({label : this.effect.name, value : this.effect.sourceActor.system.characteristics.wp.bonus})\n    }\n}",
  "GAO8AozttWOyRkta": "if (!args.flags.lostHand)\r\n{\r\n\targs.fields.lostHand = true;\r\n\targs.fields.modifier += -20;\r\n}",
  "gbhxWXboV9CytWNU": "await this.actor.addCondition(\"blinded\", 2)",
  "GbPEy22VuCNzlNv2": "return !this.actor.isMounted || (!args.skill?.name?.includes(game.i18n.localize(\"NAME.Ride\")) && !args.context.dodge)",
  "Gc8S5TYlVdV8NnOT": "let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name, context: { failure: \"Otrzymano Stan Panika\", success: \"Uniknięto otrzymania Stanu Panika\" } })\r\n\r\n await test.roll();\r\n\r\n if (!test.succeeded)\r\n {\r\n    args.actor.addCondition(\"broken\");\r\n }",
  "GcIQtshex11AMmh2": "if (this.item.system.isEquipped)\r\n{\r\n    let removeRepeater = false\r\n    if(!this.item.system.offhand.value) // main\r\n    {\r\n        let offhandUsed = this.actor.itemTypes.weapon.find(i => i.system.isEquipped && i.system.offhand.value)\r\n        if (offhandUsed)\r\n        {\r\n            removeRepeater = true;\r\n        }\r\n    }\r\n    else // offhand\r\n    {\r\n        let mainhandUsed = this.actor.itemTypes.weapon.find(i => i.system.isEquipped && !i.system.offhand.value)\r\n        if (mainhandUsed)\r\n        {\r\n           removeRepeater = true;\r\n        }\r\n    }\r\n    \r\n    if (removeRepeater)\r\n    {\r\n        this.item.system.qualities.value = this.item.system.qualities.value.filter(i => i.name != \"repeater\")\r\n    }\r\n}",
  "GEfWIFBSrXt0ldBM": "(await new Roll(\"1d10\").roll()).toMessage(this.script.getChatData())\r\nawait this.actor.addCondition(\"dead\")",
  "GePFbu5kp2ymGYEQ": "await this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.IAWyzDfC286a9MPz\", this.effect);",
  "GFaTz8f6PBNWrlad": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context : {failure : `<strong>Zdezorientowany</strong>: Determine behaviour by @Table[bewilder] Table.`}})\r\nawait test.roll();\r\nreturn test.failed",
  "GFkVnx4m9OwYsKGH": "args.actor.flags.ambi+= 1",
  "gFUXBbTskQBKjxqm": "if (this.actor.hasCondition(\"entangled\"))\n{\n     this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"average\"}}).then(async test => {\n        await test.roll();\n        if (test.failed)\n             this.actor.addCondition(\"fatigued\")    \n     })\n}",
  "gh2KS1prBKcsSK6M": "if (args.opposedTest.attackerTest.result.critical)\r\n   args.actor.addCondition(\"ablaze\")",
  "Gh7OidY6UdpWBS1g": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.KII1gWnxIZ8HzmU5\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "GjkxWj9wCAclM9WA": "let effects = foundry.utils.deepClone(this.item.effects.contents.filter(e => e.active));\r\n\r\neffects.splice(effects.length - 1);\r\n\r\nif (effects.length == 0)\r\n{\r\n    return this.script.notification(\"Wszystkie efekty zostały zastosowane. Zresetuj, aby je ponownie wybrać\")\r\n}\r\nlet choice = await ItemDialog.create(effects, 1, \"Wybierz moc, którą chcesz zastosować\");\r\n\r\nif (choice[0])\r\n{\r\n    choice[0].update({disabled : true})\r\n    let effect = choice[0].convertToApplied();\r\n    effect.name += ` (${this.effect.name})`\r\n    this.actor.createEmbeddedDocuments(\"ActiveEffect\", [effect]);\r\n}",
  "gKIPujyuFSn0No9v": "for(let e of this.item.effects.contents)\r\n{\r\n    e.update({disabled: false})\r\n}\r\nthis.script.notification(\"Resetuj moce\")",
  "gKPL3t4vlZAsvtGr": "return args.skill?.name == `${game.i18n.localize(\"NAME.Stealth\")} (${game.i18n.localize(\"SPEC.Underground\")})`",
  "gL0ftUnK5TNXBRRt": "return this.effect.sourceActor.uuid == args.actor.uuid",
  "gMIenSmLklAkB2Zm": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = await ValueDialog.create({text : \"Podaj Siłe Jadu\", title : this.effect.name}, \"\", Object.values(game.wfrp4e.config.difficultyNames));\r\n    if (value)\r\n    {\r\n     this.item.updateSource({\"system.specification.value\" : value});\r\n    }\r\n}",
  "GNl5Zk7BZ2jhRV1I": "if (args.item.type == \"armour\")\n{\n    args.item.system.AP.head = 0;\n}",
  "gnVpxOeBZpNF4HIF": "if (args.test.result.roll.toString().includes(\"9\") || args.test.result.roll.toString().includes(\"8\"))\r\n{\r\n    args.test.result.fumble = game.i18n.localize(\"Fumble\")\r\n}",
  "gOm8utR3HLQBT5hA": "let {value} = this.effect.getFlag(\"wfrp4e-soc\", \"m4result\") || {};\n\nif (value === 0)\n  args.actor.system.status.mood.value = 0;\nelse if (value !== undefined)\n  args.actor.system.status.mood.value += value;",
  "GOq4TcnWbfyfCo2V": "this.script.scriptNotification(`Uleczone Rany: ${this.actor.characteristics.t.bonus * 2}`)\r\nawait this.actor.modifyWounds(this.actor.characteristics.t.bonus * 2)\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - Skutki Uboczne`,fields : {difficulty : \"difficult\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    await roll.toMessage(this.script.getChatData())\r\n    if (roll.total <= 3)\r\n    {\r\n        this.actor.addCondition(\"blinded\", 3)\r\n    }\r\n    else if (roll.total <= 6)\r\n    {\r\n        this.actor.addCondition(\"broken\");\r\n    }\r\n    else if (roll.total <= 9)\r\n    {\r\n        this.actor.addCondition(\"stunned\");\r\n    }\r\n    else if (roll.total == 10)\r\n    {\r\n        this.actor.addConditon(\"unconscious\")\r\n    }\r\n}",
  "goz8yTlMozlsz3uY": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Strength';\nconst difficulty = 'easy';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "gpPaCe6yER79l4u8": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.SfUUdOGjdYpr3KSR\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "gPQrszvIgGlW9yM4": "if (args.test.characteristicKey == \"wp\")\r\n   args.test.preData.canReverse = true",
  "gpuBg3y9rocJL7yT": "this.actor.status.addArmour(1, {locations: [\"head\"], source: this.effect})",
  "gqZLfIr6svrtdwdC": "return args.skill?.name != game.i18n.localize(\"NAME.SleightOfHand\") && args.skill?.name != game.i18n.localize(\"NAME.MeleeBrawling\") && args.weapon?.system?.weaponGroup?.value != \"brawling\"",
  "GrF6tQ08jgKmUH4i": "return ![\"ws\", \"bs\", \"s\", \"ag\", \"i\"].includes(args.characteristic)",
  "GRfCxtYzmEx2LYU7": "if (args.totalWoundLoss >= 1)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    await roll.toMessage(this.script.getChatData());\r\n    if (roll.total == 9)\r\n    {\r\n        this.script.message(`Dwa @UUID[Compendium.wfrp4e-eis.actors.iDy8SDTwJSlCzZMl]{Niebieskie Horrory Tzeentch} rozrywają na strzępy ${this.actor.name}' wydostając się na świat.`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    }\r\n}",
  "groEX1wJ9l00PkDF": "let turns = this.effect.getFlag(\"wfrp4e\", \"turns\");\nif (turns <= 0) return;\nturns--;\n\nconst speaker = ChatMessage.getSpeaker({actor: this.actor});\nconst targetId = this.effect.getFlag(\"wfrp4e\", \"target\");\nconst target = canvas.scene.tokens.get(targetId);\n\nif (turns > 0) {\n  this.effect.setFlag(\"wfrp4e\", \"turns\", turns);\n\n  return this.script.message(`<p><b>${speaker.alias}</b> continues wrapping itself around <b>${target.name}</b>. It will be able to start crushin in ${turns} turns.</p>`);\n}\n\nif (this.actor.items.find(i => i.type === \"extendedTest\" && i.name === this.effect.name)) {\n  this.script.message(`<p><b>${speaker.alias}</b> can resume crushing <b>${target.name}</b> with the Extended Test.</p>`);\n\n  return;\n}\n\nconst extendedTestData = {\n  name: this.effect.name,\n  type: \"extendedTest\",\n  img: this.effect.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target.actor.system.status.wounds.value\n    },\n    test: {\n      value: 'Strength'\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: \"challenging\"\n    }\n  }\n};\n\nconst extendedTests = await this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\nconst extendedTest = extendedTests[0];\n\nthis.script.message(`<p><b>${speaker.alias}</b> finished wrapping itself around <b>${target.name}</b>. It can now begin crushing via the @UUID[${extendedTest.uuid}] Extended Test.</p>`);\n\nlet effect = {\n  name: extendedTest.name,\n  img: extendedTest.img,\n  system: {\n    transferData : {\n        type: \"document\",\n        documentType: \"Item\"\n      },\n      scriptData: [\n        {\n          label: extendedTest.name,\n          script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.effects.find(e => e.id === id);\n              const speaker = ChatMessage.getSpeaker({actor: this.actor});\n              const targetId = effect.getFlag(\"wfrp4e\", \"target\");\n              const target = canvas.scene.tokens.get(targetId);\n              this.script.message(\\`<p><b>${speaker.alias}</b> crushed the <b>${target.name}</b>. Boat shatters, reduced to a mass of flotsam.</p>\\`);\n              await effect.delete();\n                          `,\n          trigger: \"deleteEffect\"\n        }\n      ]\n  }\n}\n\nawait extendedTests[0].createEmbeddedDocuments(\"ActiveEffect\", [effect]);",
  "GsAyB5xnK3ASeoah": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpentry)';\nconst difficulty = 'easy';\nconst target = 20;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "gsCnd3mf1vXFU2ei": "this.actor.system.status.ward.value = 4;",
  "gSDhsSB8573joL64": "if (args.equipped) {\r\n  const spell = await game.wfrp4e.utility.findItem(\"Vindictive Glare\", \"spell\");\r\n  const skillUUID = \"Compendium.wfrp4e-core.items.Item.e3McIND4Rrsn5cE6\";\r\n\r\n  await this.actor.addEffectItems([skillUUID, spell.uuid], this.effect, [{\r\n  \"system.advances.value\": 75 - this.actor.system.characteristics.int.value\r\n}, {}]);\r\n} else {\r\n  this.effect.deleteCreatedItems();\r\n}",
  "GtfHQA9T1ip463le": "return ![\"ws\", \"bs\"].includes(args.characteristic)",
  "GTZUO73pUJKpM1JB": "    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    game.dice3d?.showForRoll(roll);\r\n    this.script.message(await this.actor.applyBasicDamage(roll.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true}))\r\n",
  "gu72JaTs9GrSiVTd": "return !(args.skill?.name == game.i18n.localize(\"NAME.Haggle\") || args.skill?.name == game.i18n.localize(\"NAME.Gossip\"))",
  "GUkpYdPwoC5pc9BT": "return !args.weapon?.system.properties.flaws.crewed",
  "gull3qgCahzk2xYu": "this.actor.addCondition(\"fatigued\", parseInt(this.effect.sourceTest.result.SL))\r\n\r\nlet test = await this.actor.setupSkill(\"Cool\", {fields : {difficulty: \"challenging\"}, appendTitle : ` - ${this.effect.name}`});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n\tthis.actor.addCondition(\"broken\");\r\n}",
  "GuUCErVbk5hrFzR3": "args.multiplier.tb += 1",
  "GuxbvztcvzJz2oH1": "args.item.system.qualities.value = [];",
  "gVpFUka7qfGiEC1v": "    this.actor.getActiveTokens().forEach(t => t.document.update({texture : {tint : \"#FFD700\"}}));\n",
  "gxuBeGHwjZ7WfPeu": "let specification = Number(this.item.specification.value) || 1;\nargs.fields.slBonus -= specification;",
  "GZFsuynUhgZqwTGo": "if (args.totalWoundLoss >= 1)\r\n{\r\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context: { failure: \"Gained a Poisoned Condition\", success: \"Resisted the poison\" }})\r\n    await test.roll();\r\n    if (test.failed)\r\n    {\r\n        args.actor.addCondition(\"poisoned\");\r\n    }\r\n}\r\n    ",
  "GzSFlqL1YrIK1dxh": "let items = await Promise.all([\"Compendium.wfrp4e-wom.items.Item.EjGYZ4CgX2jZW7Ot\",\r\n\"Compendium.wfrp4e-wom.items.Item.O2v9RQiFf0obskP5\",\r\n\"Compendium.wfrp4e-wom.items.Item.2cv6hhZ57iV6z5Il\",\r\n\"Compendium.wfrp4e-wom.items.Item.YgDEUO0G0XcqQJqg\",\r\n\"Compendium.wfrp4e-wom.items.Item.J6K5TPxI8qIGQKKH\",\r\n\"Compendium.wfrp4e-wom.items.Item.K9FPtiDLwTkC7FuO\",\r\n\"Compendium.wfrp4e-wom.items.Item.CkMYRYCLrkMnyVm5\",\r\n\"Compendium.wfrp4e-wom.items.Item.0Xdm4r7l2EwC4fcg\"].map(fromUuid));\r\n\r\nlet choice = await game.wfrp4e.apps.ItemDialog.create(items, 1, \"Wybierz Wiatr Magii\")\r\n//this.actor.createEmbeddedDocuments(\"Item\", items);\r\n\r\nthis.item.update(choice[0]?.toObject(), {diff: false, recursive : false});\r\n\r\n//this.actor.items.getName(this.effect.item.name).delete() // For some reason this.effect.item.delete() throws an error\r\n\r\n",
  "GzsuEg7gZy1f0ljy": "let bleeding = this.actor.hasCondition(\"bleeding\")\r\nif (bleeding)\r\n{\r\n   this.script.notification(`Usunięte Stany Krwawienia: ${bleeding.conditionValue}`)\r\n   bleeding.delete();  \r\n}\r\nelse \r\n{\r\n   this.script.notification(`Brak stanów krwawienia`)\r\n}",
  "H06Ysj7oPiemW7S6": "if (args.test.options.income && !args.test.options.criminal)\r\n{\r\n    args.test.options.criminal = true;\r\n    let currentCareer = args.test.actor.system.currentCareer;\r\n    let coin = {1 : \"b\", 2 : \"s\", 3 : \"s\", 4 : \"g\"}[currentCareer.system.level.value] // b, s, or g maps to 2d10, 1d10, or 1 respectively (takes the first letter)\r\n    let term = {1 : \"bp\", 2 : \"ss\", 3 : \"ss\", 4 : \"gc\"}[currentCareer.system.level.value] // b, s, or g maps to 2d10, 1d10, or 1 respectively (takes the first letter)\r\n    let dieAmount = {1 : \"2d10\", 2 : \"1d10\", 3 : \"2d10\", 4 : \"1\"}[currentCareer.system.level.value] // b, s, or g maps to 2d10, 1d10, or 1 respectively (takes the first letter)\r\n    dieAmount = parseInt(dieAmount[0]) * this.item.system.Advances;     // Multilpy that first letter by your standing (Brass 4 = 8d10 pennies)\r\n    if (coin != \"g\") // Don't roll for gold, just use standing value\r\n    {\r\n        dieAmount = dieAmount + \"d10\";\r\n    }\r\n    let moneyEarned = (await new Roll(dieAmount.toString()).roll()).total;\r\n    let moneyString = `${moneyEarned}${coin}`\r\n    let transactionString = `${moneyEarned}${term}`\r\n\r\n    this.script.message(`<a class=\"money-drag\" data-amt=\"${moneyString}\"><strong>Zarobiono dodatkowe pieniądze: ${game.wfrp4e.market.amountToString(game.wfrp4e.market.parseMoneyTransactionString(transactionString))}</strong></a>`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "h0DfPwUUOBjyAHMZ": "return args.skill?.name != game.i18n.localize(\"NAME.Perception\");",
  "h1XKoMuVnS0bagRO": "return args.item?.name != game.i18n.localize(\"NAME.Endurance\");",
  "H1z3nWW7Rj3Oisxy": "return args.type != \"channelling\"",
  "H2CJvApKMnfGNNoo": " if (args.test.item?.type == \"skill\" && args.test.item.name.includes(game.i18n.localize(\"NAME.Stealth\")))\r\n{ \r\n     args.test.result.description = \"Zdumiewająca porażka\";\r\n     args.test.result.outcome = \"failure\";\r\n       ChatMessage.create({content : \"<em>PISK</em>\", speaker : ChatMessage.getSpeaker({token: this.actor.getActiveTokens()[0]?.document, actor: this.actor})}, {chatBubble : true})\r\n        AudioHelper.play({ src: `${game.settings.get(\"wfrp4e\", \"soundPath\")}squeek.wav` }, true);\r\n}",
  "h2GSoiCQ2ZSlTjf7": "const uuid = \"Compendium.wfrp4e-core.items.Item.JQa5DLnTs2SEzRrc\";\nconst item = await fromUuid(uuid);\nawait this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id});",
  "H3pZ9UeIzIz3luKh": "args.actor.addCondition(\"bleeding\")\r\n\r\nthis.actor.setFlag(\"wfrp4e\", \"isAttached\", args.actor.name)\r\n\r\nthis.script.message(`Doczepia się do <strong>${args.actor.name}</strong>`)",
  "H3Wls12aVWAWTp9J": "this.actor.setupCharacteristic(\"i\", {skipTargets: true, appendTitle :  \" - \" + this.effect.name}).then(test => {\r\n    test.roll();\r\n})",
  "h766UvswLCsxcMow": "let characteristics = {\r\n  \"ws\" : 5,\r\n  \"bs\" : 0,\r\n  \"s\" : -15,\r\n  \"t\" : 0,\r\n  \"i\" : 20,\r\n  \"ag\" : 0,\r\n  \"dex\" : 0,\r\n  \"int\" : 5,\r\n  \"wp\" : 10,\r\n  \"fel\" : 10\r\n}\r\nlet skills = [\"Charyzma\", \"Zastraszanie\", \"Broń Biała (Podstawowa)\"]\r\nlet skillAdvancements = [7, 60, 7]\r\nlet talents = [\"Groźny\", \"Cień\"]\r\nlet traits = [\"Dekoncentrujący\"]\r\nlet trappings = []\r\nlet items = [];\r\nlet spells = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n  updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n  let skill = skills[index]\r\n  let skillItem;\r\n  skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n  if (skillItem)\r\n      skillItem.system.advances.value += skillAdvancements[index]\r\n  else \r\n  {\r\n      skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n      skillItem = skillItem.toObject();\r\n      skillItem.system.advances.value = skillAdvancements[index];\r\n      items.push(skillItem);\r\n  }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n  let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n  if (talentItem)\r\n  {\r\n      items.push(talentItem.toObject());\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n  }\r\n}\r\n\r\nconst traitRegex = /(?:,?(.+?)(\\+?\\d{1,2}\\+?)?\\s*?(?:\\((.+?)\\)\\s*(\\+?\\d{1,2})?|,|$))/gm\r\nfor (let trait of traits)\r\n{\r\n  let traitMatches = trait.matchAll(traitRegex).next().value\r\n  let traitName = traitMatches[1]\r\n  let traitVal = traitMatches[2] || traitMatches[4] // could be match 2 or 4 depending on if there's a specialization\r\n  let traitSpec = traitMatches[3]\r\n\r\n  let traitItem;\r\n  try {\r\n      traitItem = await WFRP_Utility.findItem(traitName, \"trait\")\r\n  }\r\n  catch { }\r\n  if (!traitItem) {\r\n      ui.notifications.warn(`Could not find ${trait}`, {permanent : true})\r\n  }\r\n  traitItem = traitItem.toObject()\r\n\r\n  if (Number.isNumeric(traitVal))\r\n  {\r\n      traitItem.system.specification.value = traitName.includes('Broń,','Rogi','Ogon','Macki','Ugryzienie') ? traitVal - parseInt(characteristicValues[3]/10) : traitVal;\r\n      traitItem.name = (traitItem.name +  ` ${traitSpec ? \"(\"+ traitSpec + \")\" : \"\"}`).trim()\r\n  }\r\n  else \r\n      traitItem.system.specification.value = traitSpec\r\n\r\n  items.push(traitItem)\r\n\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n  let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n  if (trappingItem)\r\n  {\r\n      trappingItem = trappingItem.toObject()\r\n\r\n      trappingItem.system.equipped.value = true;\r\n\r\n      items.push(trappingItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n  }\r\n}\r\n\r\nfor (let spell of spells) \r\n{\r\n  let spellItem = await game.wfrp4e.utility.findItem(spell)\r\n  if (spellItem)\r\n  {\r\n      spellItem = spellItem.toObject()\r\n\r\n      items.push(spellItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${spell}`, {permanent : true})\r\n  }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "H7lcCU24gFDp7zK7": "let amount = this.effect.sourceTest.result.baseSL;\nargs.fields.successBonus += amount;",
  "H85k4L3yICm7cfIk": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Sail';\nconst difficulty = 'easy';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "H8jDtK1Ewn4hL3A1": "args.fields.slBonus += 4;",
  "hA8PzeiCsHqqlUZm": "this.actor.createEmbeddedDocuments(\"ActiveEffect\", [game.wfrp4e.config.symptomEffects[\"nausea\"]])\r\nthis.script.message(`Otrzymano symptom: @Symptom[Mdłości] na [[1d10]] godzin`, {whisper: ChatMessage.getWhisperRecipients(\"GM\")})",
  "HASsi6wYHVALExWq": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context: { failure: \"1 Corruption Point Gained\" } })\r\nawait test.roll();\r\n\r\nif (test.failed && args.actor.type == \"character\") \r\n{\r\n    let msg = \"\"\r\n    msg += `<p><b>${this.actor.prototypeToken.name}</b>: Otrzymano punkt Zepsucia</p>`\r\n    if (test.result.roll % 11 == 0 || test.result.roll == 100)\r\n    {\r\n        msg +=  `<b>${args.actor.prototypeToken.name}</b>: Otrzymano mutację (@Table[expandedmutatephys]{Fizyczna} or @Table[expandedmutatemental]{Psychiczna}) oraz Talent: @UUID[Compendium.wfrp4e-core.items.hiU7vhBOVpVI8c7C]{Magia Chaosu (Tzeentch)}`\r\n    }\r\n    this.script.message(msg, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    await this.actor.update({ \"system.status.corruption.value\": parseInt(args.actor.status.corruption.value) + 1 })\r\n}",
  "Hcpn1gU58DIKIhty": "if (args.item.type  == \"skill\" && args.item.name == `${game.i18n.localize(\"NAME.Melee\")} (${game.i18n.localize(\"SPEC.Flail\")})`)\r\n{\r\n     args.item.system.modifier.value += 10;\r\n}",
  "hCzxUyO6mjLNIpaM": "let woundsGained = Math.min(args.totalWoundLoss, args.actor.status.wounds.value)\r\n\r\nwoundsGained = Math.floor(woundsGained / 2)\r\n\r\nargs.attacker.update({ \"system.status.wounds.value\": args.attacker.status.wounds.value + woundsGained })\r\n\r\nthis.script.message(`Uleczono Rany: ${woundsGained}`)",
  "hDC6lroDEPVBituR": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n    this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + 1})\r\n    this.script.message(\"Otrzymano Punkt Zepsucia\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    if (test.result.roll % 11 == 0 || test.result.roll == 100)\r\n    {\r\n        this.script.message(`<strong>Pech</strong>: Natychmiast otrzymujesz 1 @Table[mutatemental]{Mutację Psychiczną}, oraz nie możesz podjąć się krótko-terminowej ambicji przez następne [[1d10]] tygodni.`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    }\r\n}",
  "HdTuY2IGhdlMDOy3": "if (this.actor.system.details.experience.current < 100) {\n  return this.script.notification(game.i18n.localize(\"SCRIPT.NotEnoughXP\"))\n}\n\nlet item = await game.wfrp4e.utility.findItem(\"Animal Telepathy\", \"trait\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item]);\nlet expLog = foundry.utils.duplicate(this.actor.details.experience.log || []);\nexpLog.push({amount : 100, reason: item.name, spent: this.actor.details.experience.spent + 100, total: this.actor.details.experience.total, type: \"spent\"});\nthis.actor.update({\n    \"system.details.experience.spent\": this.actor.details.experience.spent + 100,\n    \"system.details.experience.log\": expLog\n  });",
  "HfCxNd7mFGZH4s9Y": "// An opponent that takes more than a single Wound from a Warp Blade strike \n// in melee combat must make an Average (+20) Endurance Test \n// or take a Stunned Condition\n\n\nif (args.totalWoundLoss > 1) {\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\n    await test.roll();\n    if(test.failed)\n    {\n        await args.actor.addCondition(\"stunned\");\n    }\n}",
  "hfO4INH3EeETDTFt": "this.actor.status.addArmour(1, {locations: this.effect.flags.wfrp4e.locations, source: this.effect})",
  "HfZAQWoY8n3clLlo": "if (!args.itemCreated) return;\nif (args.itemCreated.type !== \"critical\") return;\nif (args.itemCreated.system.location.value.toLowerCase() !== \"head\") return;\nif (Number(args.itemCreated.system.wounds.value) > 0) {\n  this.script.message(game.i18n.format(\"SCRIPT.Sallet\", {name: args.itemCreated.parent.name, wounds: args.itemCreated.system.wounds.value}))\n}",
  "HG2fKOfruT5QV3A4": "let lore = await ValueDialog.create({text : \"Choose Lore\", title : \"Lore\"}, \"\", {\"fire\" : \"Fire\", \"death\" : \"Death\", \"metal\" : \"Metal\", \"shadow\" : \"Shadow\"});\r\n\r\nlet filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = await ItemDialog.createFromFilters(filters, 3, {text: \"Choose 3 Petty Spells\"})\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : [\"\"]\r\n    }\r\n]\r\n\r\nlet arcane = await ItemDialog.createFromFilters(filters, 6, {text: \"Choose 6 Arcane Spells\"})\r\n\r\nlet items = petty.map(i => i.toObject()).concat(arcane.map(i => {\r\n    let spell = i.toObject();\r\n    spell.img = `modules/wfrp4e-core/icons/spells/${lore}.png`\r\n    spell.system.lore.value = lore;\r\n    return spell;\r\n}));\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "hhCs5VBKx50S5IsY": "return !args.context.mutate",
  "hhv7PrRdlf9sfC82": "let characteristics = {\r\n    \"ws\" : 5,\r\n    \"bs\" : 0,\r\n    \"s\" : 5,\r\n    \"t\" : 5,\r\n    \"i\" : 10,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 0,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [\"Opanowanie\", \"Unik\"]\r\nlet skillAdvancements = [10, 10]\r\nlet talents = [\"Bitewny Refleks\"]\r\nlet trappings = [\"Skórzana kurta\", \"Skórzany hełm\", \"Skórzane nogawice\", \"Tarcza\"]\r\nlet items = []\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "Hi005w1Ul17Q8Uty": "let test = this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"average\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.succeeded)\n{\n\tthis.effect.delete()\n}",
  "HiMBS6GeOwEydWYN": "return args.skill?.name != game.i18n.localize(\"NAME.Climb\");",
  "HJ2X4ZtXei0BXbxf": "        let choices = await Promise.all([warhammer.utility.findItemId(\"PzimjNx9Ojq4g6mV\"), warhammer.utility.findItemId(\"rOPmyLWa37e7s9v6\")])\r\n        let items = await game.wfrp4e.apps.ItemDialog.create(choices, 1, \"Wybierz umiejętność\")\r\n\r\n        items = items.map(i => i.toObject())\r\n        items.forEach(i => i.system.advances.value = 20)\r\n\r\n        items.forEach(i => i.system.equipped.value = true);\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "hj7tI212neKIu9dh": "this.actor.system.status.ward.value = 7;",
  "hK0YMJfYbpbJZizO": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\r\n      \"dim\": 0,\r\n      \"bright\": 0,\r\n      \"angle\": 360,\r\n      \"alpha\": 0.5,\r\n      \"animation\": {\r\n          \"speed\": 0,\r\n          \"intensity\": 0,\r\n          \"type\": \"none\",\r\n      },\r\n      \"color\": \"\",\r\n  }}));",
  "HKhyn0kijKfzW6cw": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}})\r\nawait test.roll();\r\nthis.item.updateSource({\"flags.wfrp4e.passed\" : test.succeeded})",
  "hL3JUSY3xMA4zj2Q": "if (this.sourceActor.uuid === this.actor.uuid) return;\r\n\r\nconst test = await this.actor.setupCharacteristic(\"t\", {\r\n  skipTargets: true, \r\n  appendTitle:  ` — ${this.effect.name}`, \r\n  fields: {\r\n    difficulty: \"difficult\"\r\n  },\r\n  context: {\r\n    success: \"Jest w stanie stać!\",\r\n    failure: \"Upada!\",\r\n  }\r\n});\r\n\r\nawait test.roll();\r\nif (test.failure) {\r\n  await this.actor.addCondition(\"prone\");\r\n}",
  "hlHKeFWrOA8CsLr9": "args.data.canReverse = true;\r\nargs.context.pilot = true;",
  "hluehsCuBZYc1Ejt": "return args.characterisic != \"fel\"",
  "HMC6hPND9DWLFfZE": "if (this.item.name.includes(\"(\"))\r\n{\r\n\treturn;\r\n}\r\n\r\nlet index = game.packs\r\n.filter(i => i.metadata.type == \"Item\")\r\n.reduce((acc, pack) => acc.concat(pack.index.contents), [])\r\n.filter(i => i.type == \"skill\" && i.name.includes(game.i18n.localize(\"NAME.Lore\")))\r\n.map(i => {\r\n\ti.id = i._id\r\n\treturn i\r\n})\r\n\r\nlet choice = await ItemDialog.create(index, 1, \"Wybierz rodzaj wiedzy\")\r\nlet text;\r\nif (!choice[0])\r\n{\r\n    let custom = await ValueDialog.create({text : \"Wpisz rodzaj wiedzy\", title : this.effect.name});\r\n    text = custom || \"\";\r\n}\r\nelse \r\n{\r\n    text = game.wfrp4e.utility.extractParenthesesText(choice[0].name)\r\n}\r\n\r\nawait this.item.updateSource({name : this.item.name + ` (${text})`, \"system.tests.value\" : this.item.system.tests.value.replace(\"wybrana wiedza\", text)})\r\nawait this.effect.updateSource({name : this.effect.name + ` (${text})`})",
  "HmImVzvw6ecBy99l": "if (args.opposedTest.result.hitloc.value == \"body\" && args.totalWoundLoss > 0) \r\n{\r\n    args.actor.addCondition(\"bleeding\", 2)\r\n    this.script.notification(\"Otrzymano Stan Krwawienia\")\r\n}",
  "hmk8zV1LTElHUI8A": "let msg = `<b>${this.actor.prototypeToken.name}</b>: Otrzymano 1 Ranę.<br>`\r\n  if (this.actor.status.wounds.value <= 1)\r\n  {\r\n    msg += `<b>${this.actor.prototypeToken.name}</b>: Otrzymano Stan @Condition[Utrata Przytomności].<br>`\r\n    await this.actor.addCondition(\"unconscious\")\r\n  }\r\n  this.script.message(msg)\r\n  this.actor.modifyWounds(-1)",
  "hnsmzvcuiUYB065I": "this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {appendTitle: ` - ${this.effect.name}`, context: { failure : \"Nie może uciec z walki\"}}).then(test => test.roll())",
  "hObTbWi4ZdwXimIW": "if (args.item.type == \"spell\")\n{\n    args.item.system.cn.value = Math.floor(args.item.system.cn.value / 2);\n}",
  "hOgha3ir8K9TVphO": "return args.characteristic !== \"fel\";",
  "HoNTnPphrJISSQr1": "ChatMessage.create({content : \"<em>Przemów i objaw się mnie</em>\", speaker : ChatMessage.getSpeaker({token: this.actor.getActiveTokens()[0]?.document, actor: this.actor})}, {chatBubble : true})",
  "HOt2hHOiHDZ7oBgW": "if ([\"rLeg\", \"lLeg\"].includes(this.effect.getFlag(\"wfrp4e\", \"location\")))\r\n{\r\n\targs.actor.details.move.value /= 2\r\n}\r\n",
  "hpbraeEbjkXnmD75": "args.fields.hitLocation = \"lLeg\"\nargs.fields.modifier += 20;",
  "hpwJRAhCsXTp9bd9": "let choice1 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Broń Biała (Podstawowa)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 20\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\nlet choice2 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Broń Biała (Drzewcowa)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 20\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\nlet choice3 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Broń Biała (Dwuręczna)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 20\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\nlet choice = await foundry.applications.api.DialogV2.wait({\r\n        window : {title : \"Wybór\"},\r\n        content : \r\n        `<p>\r\n        Wybierz opcję\r\n        </p>\r\n        <ol>\r\n        <li>Broń Biała (Podstawowa)</li>\r\n        <li>Broń Biała (Drzewcowa)</li>\r\n        <li>Broń Biała (Dwuręczna)</li>\r\n        </ol> \r\n        `,\r\n        buttons : [\r\n            {\r\n                label : \"Podstawowa\",\r\n                action : \"basic\",\r\n                callback : () => {\r\n                    return choice1\r\n                }\r\n            },\r\n            {\r\n                label : \"Drzewcowa\",\r\n                action : \"polearm\",\r\n                callback : () => {\r\n                    return choice2\r\n                }\r\n            },\r\n            {\r\n                label : \"Dwuręczna\",\r\n                action : \"two-handed\",\r\n                callback : () => {\r\n                    return choice3\r\n                }\r\n            }\r\n    ]\r\n})\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "Hq1G30lhJYvtOSNb": "                 \n                            if (args.test.failed)\n                            {\n                                let applicableCharacteristics = [\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"];\n                                if (applicableCharacteristics.includes(args.preData.characteristic))\n                                {\n                                    this.actor.addCondition(\"stunned\");\n                                }\n                            }",
  "hR1qD2kpFHF8JT8h": "return args.skill?.name == `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`",
  "HrOBAXsEX073ReKl": "let skill = `${game.i18n.localize(\"NAME.Entertain\")} (${game.i18n.localize(\"SPEC.Singing\")})`;\r\nlet currentCareer = this.actor.system.currentCareer;\r\nlet existingSkill = this.actor.itemTypes.skill.find(i => i.name == skill);\r\n\r\nif (!currentCareer) return\r\n\r\n\r\nlet inCurrentCareer = currentCareer.system.skills.concat(currentCareer.system.addedSkills).includes(skill);\r\nlet perfectPitchAdded = this.actor.getFlag(\"wfrp4e\", \"perfectPitchAdded\") || {};\r\nif (existingSkill && inCurrentCareer && !perfectPitchAdded[existingSkill.name])\r\n{\r\n\texistingSkill.system.advances.costModifier = -5;\r\n}\r\nelse \r\n{\r\n\tperfectPitchAdded[skill] = true;\r\n\tcurrentCareer.system.addedSkills.push(skill);\r\n\tfoundry.utils.setProperty(this.actor, \"flags.wfrp4e.perfectPitchAdded\", perfectPitchAdded)\r\n}\r\n\r\n\r\n",
  "HrYchgkdZBiu1yPF": "return args.skill?.name == game.i18n.localize(\"NAME.Climb\");",
  "hSImyYjL0CENTvXf": "let test = await this.actor.setupSkill(\"Endurance\", {fields : {difficulty : \"difficult\", appendTitle : ` - ${this.effect.name}`}});\nawait test.roll();\nif (test.failed)\n{\n\tawait this.actor.addCondition(\"blinded\");\n}\n\nlet msg = ``\nlet armour = args.actor.itemTypes.armour.filter(i => i.system.isMetal && i.system.isEquipped);\nfor(let item of armour)\n{\n\tfor(let key in item.system.AP)\n\t{\n\t\tlet AP = item.system.AP[key]\n\t\tlet damage = Math.floor(AP / 2);\n\t\tawait item.system.damageItem(damage, [key]);\n\t}\n\tmsg += `<p><strong>${item.name}</strong> AP reduced by half</p>`\n}\nif (msg)\n{\n\tthis.script.message(msg, {speaker : {alias : args.actor.name}});\n}",
  "hSlEY2oh8quVmdXR": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")\nlet data = item.toObject();\ndata.system.specification.value = 2\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "ht7csu1KImHzpzL5": "return args.item?.actor?.type !== \"vehicle\" || args.item?.type !== \"weapon\" || !args.item.name.includes(\"Cannon\");",
  "hTsnYKgw0kK10PiC": "args.fields.modifier += 5",
  "huJcVpVn6Q7sQkFC": "if (args.actorsystem.details.move.sail.value > 0)\n  args.actor.system.details.move.sail.value -= 1;\n",
  "HUKzssLxeQo1wbx9": "\n                            let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"average\"}, appendTitle : \" - Wounded\"})\n                            await test.roll();\n                            if (test.failed)\n                            {\n                                fromUuid(\"Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb\").then(disease => {\n                                    this.actor.createEmbeddedDocuments(\"Item\", [disease.toObject()])\n                                    this.script.notification(\"Gained \" + disease.name)\n                                })\n                            }\n                            ",
  "HwbgUIbpX0D8JLOR": "if (args.opposedTest.result.differenceSL >= 0 && args.opposedTest.result.differenceSL <= 2 && args.opposedTest.result.winner == \"attacker\")\n    this.actor.addCondition(\"bleeding\")",
  "hwHpIunCq3ifk2QU": "if (args.item.type == \"spell\")\n{\n   let range = parseInt(args.item.Duration)\n   if (Number.isNumeric(range))\n   {\n          args.item.system.duration.value = \"2 * \" + args.item.system.duration.value\n   }\n}",
  "hwOZxgt7e65iWvYz": "let test = await this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n    let damage = this.effect.sourceTest.result.damage\n\n    this.script.message(await this.actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true}))\n}",
  "hWWvkPbgIN3lxz1u": "return args.item?.system?.attackType !== \"melee\";",
  "HX6CjNapYdC0VmQ8": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.epPBu7x6BRWp2PHG\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "HXJKkmpfxQUOnWOS": "if (!this.item.system.twohanded.value)\r\n{\r\n    this.item.system.flaws.value = this.item.system.flaws.value.concat([{name : \"tiring\"}, {name : \"slow\"}])\r\n}",
  "hxmwtw5zAHyS2upG": "this.script.message(await game.wfrp4e.tables.formatChatRoll(\"giftofthebeast\"))",
  "hYNWp75ggWSTht55": "if (args.test.result.hitloc.value != \"head\" && args.test.result.critical)\n{\n\twarhammer.utility.sleep(200).then(() => {\n\t\tthis.script.message(\"Can roll on the @Table[crithead]{Head Critical Hits} instead of the normal hit location\")\n\n\t})\n}",
  "HYrl5aNMm8BAdqH7": "\n                            let modifier = 0\n                            if (this.effect.name.includes(\"Moderate\"))\n                                modifier = -20\n                            else\n                                modifier = -10\n                            args.fields.modifier += modifier\n                            ",
  "hZAax4emLahEEqcZ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.BqPZn6q3VHn9HUrW\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = 7 - this.actor.characteristics.s.bonus\r\ndata.name = item.name.replace(\"()\", \"(Kły)\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "I0Jo6cbNAJtXUloc": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.J9MK0AIaTbvd5oF6\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id});",
  "I0oRZ7AWde5KI5jw": "return ![\"t\", \"int\"].includes(args.characteristic)",
  "I1J2m5uud84N50Lk": "if ([\"cast\", \"channelling\", \"pray\"].includes(args.type))\r\n{\r\n\targs.abort = true;\r\n\tthis.script.notification(\"Nie można rzucić zaklęć ani modlitw\");\r\n}\r\nelse return true;",
  "i59IpmZNLJEPWZ3L": "return args.spell",
  "i5AN97A7IOeygEFA": "if (args.applyAP && args.modifiers.ap.metal) \r\n{\r\n    args.modifiers.ap.ignored += args.modifiers.ap.metal\r\n    args.modifiers.other.push({value : args.modifiers.ap.metal, label : this.effect.name, details : \"Dodano PP Metalowego Pancerza do Obrażeń\" })\r\n    args.modifiers.ap.details.push(\"<strong>\" + this.effect.name + \"</strong>: Zignorowano Metalowy Pancerz (\" + args.modifiers.ap.metal + \")\");\r\n    args.modifiers.ap.metal = 0\r\n}",
  "I79D8V8OFzMCtL40": "const target = await ValueDialog.create({title: \"Select Target\", text: \"Select Target for Hatred\"}, \"Target\");\r\nawait this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.5hH73j2NgPdsLCZN\", this.effect, {name: `Hatred (${target})`});",
  "I7ieW0hNYvvX0KFg": "return args.skill?.name != game.i18n.localize(\"NAME.Heal\");",
  "i7xl0jNpLnBT2h2l": "args.actor.characteristics.dex.value = 0",
  "I93i49wI9ZrDHT4n": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.jt0DmVK9IiF6Sd2h\");\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "i93PGV1lDSdi3BJu": "let effectsToDisable = this.actor.items.filter(i => i.type == \"disease\").reduce((effects, item) => effects.concat(item.effects.contents), []).concat(this.actor.effects.contents.filter(i => i.isCondition)).filter(i => i.active);\r\n\r\nif (effectsToDisable.length)\r\n{\r\n    this.script.notification(`Disabling ${effectsToDisable.map(i => i.name).join(\", \")}.`);\r\n    effectsToDisable.forEach(i => i.update({disabled : true}))\r\n}",
  "I9QAPKbaXwMMMBT4": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty: \"average\"}, skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\nif(test.failed)\r\n{\r\n    await this.actor.addCondition(\"stunned\");\r\n    let secondTest = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty: \"easy\"}, skipTargets: true, appendTitle :  \" - Rozpacz\"})\r\n    await secondTest.roll();\r\n    if(secondTest.failed)\r\n    {\r\n        this.effect.updateSource({name : \"Smak Śmierci\"})\r\n         await this.actor.addCondition(\"fatigued\");\r\n    }\r\n    else \r\n    {\r\n        return false;\r\n    }\r\n}",
  "IAGla7HJlYN0wa4H": "if (args.test.characteristicKey == \"wp\") \r\n{\r\n    if (args.test.failed)\r\n    {\r\n        this.actor.addSystemEffect(\"convulsions\")\r\n        this.script.message(`Test siły woli nie powiódł się, <b>${this.actor.prototypeToken.name}</b>: Otrzymano @Symptom[Konwulsje] na [[1d10]] godzin`)\r\n    }\r\n}",
  "iAo3wxMLA64rsKjj": "this.script.message(await game.wfrp4e.tables.formatChatRoll(\"skavenbrew\"))",
  "iBEPQ3NwtI9DfkEy": "let locations = [];\n\nwhile (locations.length < 2)\n{\n    let loc = await game.wfrp4e.tables.rollTable(\"hitloc\", {hideDSN : true})\n    if (!locations.includes(loc.result))\n    {\n        locations.push(loc.result);\n    }\n}\n\nlocationText = locations.map(i => game.wfrp4e.config.locations[i]).join(\", \")\n\nthis.item.updateSource({name : this.item.name += ` (${locationText})`})",
  "ID8mCcjkl7PCQhDq": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\n\nif(test.failed)\n{\n    let damage = this.effect.sourceItem.system.computeSpellDamage(\"3\", true);\n    this.script.message(await this.actor.applyBasicDamage(damage, {suppressMsg: true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP}))\n}",
  "id9ZdkERMZnZTWXt": "if (args.extendedTest?.getFlag(\"wfrp4e\", \"fear\"))\r\n{\r\n\tthis.script.notification(\"Niewrażliwy na Strach\");\r\n\targs.extendedTest.delete();\r\n\targs.abort = true;\r\n}\r\nreturn args.context.terror || args.extendedTest?.getFlag(\"wfrp4e\", \"fear\")",
  "IfEu1hO8sKEZBpvg": "let value = parseInt(this.item.specification.value)\r\nlet name = this.actor.prototypeToken.name\r\n\r\nif (game.user.isGM && game.user.targets.size)\r\n{\r\n  game.user.targets.forEach(t => {\r\n    t.actor.applyFear(value, name)\r\n  })\r\n  game.canvas.tokens.setTargets([])\r\n\r\n}\r\nelse \r\n{\r\n  game.wfrp4e.utility.postFear(value, name)\r\n}",
  "IFXsTRAVDUeVvcRc": "let roll = await new Roll(\"1d100\")\r\nawait roll.evaluate()\r\nawait roll.toMessage({\"flavor\": `Wyssan's Dice Reversal`})\r\n\r\nif (roll.result % 11 === 0 || roll.result === 100) {\r\n  await this.item.setFlag(\"world\", \"inert\", true)\r\n}",
  "IG4zYqtN9fRSYE7q": "args.actor.addCondition(\"ablaze\");",
  "igVAVU7DOuzhNG14": "return args.item?.system.isMelee",
  "iHn3YzvqNfbwzjZz": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")\nlet data = item.toObject();\ndata.system.specification.value = this.actor.characteristics.s.bonus\ndata.system.description.value = \"\"\ndata.name = this.effect.name;\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "IkGegSuQwwVPhrjF": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")\nlet data = item.toObject();\ndata.system.specification.value = 1\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "IKiZv9YSFmKmHo6a": "return args.spell?.system.lore.value == \"fire\"",
  "IkVcIRmmgQjsBUUf": "let roll = await new Roll(\"1d100\")\r\nawait roll.evaluate()\r\nawait roll.toMessage({\"flavor\": `Wyssan's Dice Reversal`})\r\n\r\nif (roll.result % 11 === 0 || roll.result === 100) {\r\n  await this.item.setFlag(\"world\", \"inert\", true)\r\n  this.script.message(`${this.item.name} loses its magical properties`, {blind: true, whisper: ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "iLpq4yCFN6YACrYA": "if (args.test.result.castOutcome == \"success\")\n{\n    this.script.message(await game.wfrp4e.tables.formatChatRoll(\"demonic-mien\"))\n}",
  "ILqHxk7deotgI3KD": "if (args.item.type != \"weapon\")\n    return\n\nlet reach = args.item.reach.value\nlet reachNum = game.wfrp4e.config.reachNum[reach]\nreachNum = Math.min(reachNum + 2, 7)\n\nlet key = warhammer.utility.findKey(reachNum, game.wfrp4e.config.reachNum)\n\nargs.item.reach.value = key",
  "iM4B3IZ4VtpZsl09": "args.size = \"sml\"",
  "iM6JLF8jDXMViReZ": "return ![game.i18n.localize(\"Name.PickLock\"), game.i18n.localize(\"NAME.SleightOfHand\"), `${game.i18n.localize(\"NAME.Channelling\") (Ulgu)}`].includes(args.skill?.name)\r\n",
  "iMDZLr7ueJWBnilj": "args.actor.flags.rangedDamageIncrease += 1",
  "imKVsCy8rya2gkwO": "// Any Characteristic penalties due to failed Consume Alcohol Tests\r\n// or the state of being Stinking Drunk are eliminated. \r\nawait this.actor.removeSystemEffect(\"consumealcohol1\")\r\nawait this.actor.removeSystemEffect(\"consumealcohol2\")\r\nawait this.actor.removeSystemEffect(\"consumealcohol3\")\r\nawait this.actor.removeSystemEffect(\"stinkingdrunk1\")\r\n\r\n// The drinker is thereafter Fatigued \r\n// for a number of hours equal to 10 minus their Toughness Bonus — \r\n// nothing but time and rest can eliminate this penalty.\r\nawait this.actor.addCondition(\"fatigued\")\r\nconst duration = 10 - parseInt(this.actor.system.characteristics.t.bonus)\r\nthis.effect.updateSource({\"duration.hours\" : duration});\r\nthis.script.scriptMessage(`<p><strong>${this.actor.prototypeToken.name}</strong> stracił wszystkie kary związane z alkoholem i zyskuje Stan Zmęczenie na liczbę godzin: ${duration}.</p>`, \r\n{\r\n  whisper: ChatMessage.getWhisperRecipients(\"GM\"), \r\n  blind: true \r\n})    ",
  "iMu8BZ7eHMAbPEO1": "let healed = args.totalWoundLoss\r\n\r\nthis.script.message(`<b>this.actor.prototypeToken.name</b>Uleczone Rany: ${healed}`);\r\n\r\nthis.actor.modifyWounds(healed)",
  "IN4ZFOPooqJtNuIQ": "return args.characteristic !== \"s\" && args.characteristic !== \"t\" && args.weapon?.system?.attackType !== \"melee\";",
  "iNAQJa5HyaEckknX": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\n\r\n\r\nlet opposedResult = test.opposedMessages[0]?.system.opposedHandler?.resultMessage?.system.opposedTest?.result\r\n\r\nif (opposedResult?.winner == \"attacker\")\r\n{\r\n    let spells = this.actor.itemTypes.spell;\r\n    if (spells.length)\r\n    {\r\n        let chosen = spells[Math.floor(CONFIG.Dice.randomUniform() * spells.length)]\r\n        this.script.message(`Utracono dostęp do: <strong>${chosen.name}</strong>`)\r\n        chosen.update({name : chosen.name += \" (UTRACONO)\"})\r\n    }\r\n}\r\n\r\n\r\n",
  "inPxRSx0CDj1nwAm": "if (args.test.result.fumble && !this.actor.itemTypes.talent.find(i => i.name == \"Magia Tajemna (Ogień)\"))\r\n{\r\n    this.actor.addCondition(\"ablaze\");\r\n}",
  "iO2hCDwyQ7v4qrOI": "if (args.test.options.staunchBleeding) {\n if (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target) {\n   let staunch =  ~~args.test.result.SL + 1\n   if (args.test.options.fieldDressing && args.test.result.reversed)\n     staunch =  Math.min(1, Number(args.test.result.SL)) + 1\n   args.test.result.other.push(`<b>${this.actor.name}</b> removed <b>${staunch}</b> Bleeding conditions from the patient.`)\n   }\n   else if (this.actor.characteristics.int.bonus + args.test.result.SL < 0)\n      args.test.result.other.push(`The patient contracts a @UUID[Compendium.wfrp4e-core.items.Item.1hQuVFZt9QnnbWzg]{Minor Infection}.`)\n}",
  "ioeTj5mx8jlA5EX5": "args.actor.addCondition(\"stunned\")",
  "IOroJBqTsWvoakJN": "if (args.actorsystem.details.move.oars.value > 0)\n  args.actor.system.details.move.oars.value -= 2;\n",
  "Ip8sctF9SIE1Z2vF": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.UnJ25lL8aUzem5JO\")\nlet data = item.toObject();\ndata.system.specification.value = 3\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "ipkkRffJh61WE7zR": "if (!args.flags.amputatedFootOrLeg)\r\n{\r\n\targs.flags.amputatedFootOrLeg= true;\r\n\targs.fields.modifier -= 20;\r\n}",
  "IpoOOjYJs6RmVrpb": "if (args.totalWoundLoss > 0)\n{\n    args.attacker.applyEffect({effectUuids : this.effect.sourceItem.effects.contents[1].uuid})\n}",
  "IPPDvZdE8kn3H9z7": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n   await this.actor.addCondition(\"grappling\")\r\n}",
  "iqUvV1Vu81M3WyZ4": "let SL = Number(this.effect.sourceTest.result.SL);\nfor (let i=0; i<SL; i++) {\n\t\n}",
  "IR5URcjnCuWBFMoN": "// If a full dose is imbibed, \r\n// the victim must pass a Hard (-20) Endurance Test.\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"hard\"}})\r\nawait test.roll()\r\nif (test.failed)\r\n{\r\n    this.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> nie zauważa nic poza tym, że staje się zmęczony trochę wcześniej niż zwykle. W tym momencie nadal można uratować ofiarę potężnym antidotum lub magicznym środkiem.</p>\r\n    <p>Kiedy zapadnie w sen, jest to prawie niemożliwe. W tym momencie postać musi wykonać <strong>Trudny (-20) Test Odporności</strong>. Jeśli się nie powiedzie, nigdy się nie obudzi.</p>`, \r\n    {\r\n      whisper: ChatMessage.getWhisperRecipients(\"GM\"), \r\n      blind: true \r\n    })\r\n}\r\nreturn test.failed;",
  "IR86DuMbVdbGOJYt": "this.actor.addCondition(\"blinded\")",
  "IrkWq7IiFS65bTvC": "if (this.actor.flags.holed.half !== true) return;\nif (this.actor.flags.holed.reminded === true) return;\n\nconst speaker = ChatMessage.getSpeaker({actor: this.actor});\nthis.script.message(`<p><b>${speaker.alias}</b> sits heavily in the water. Unless the cargo is waterproof, it loses [[d10]]% of its value.</p>`);\n\nthis.actor.flags.holed.reminded  = true;",
  "IsLAvY9ikR1cOJWw": "return ![\"NAME.Row\", \"NAME.Swim\"].map(i => game.i18n.localize(i)).includes(args.skill?.name);",
  "IslMfFgpgQq2brpu": "if (this.actor.hasCondition(\"broken\"))\r\n{\r\n    this.actor.removeCondition(\"broken\")\r\n    this.script.notification(`Nie można otrzymać stanu Panika`);\r\n}",
  "iT0h3VZLEBQnn5Bx": "return args.skill?.name != game.i18n.localize(\"NAME.Charm\") && args.skill?.name != game.i18n.localize(\"NAME.Gossip\") && args.skill?.name != game.i18n.localize(\"NAME.ConsumeAlcohol\");",
  "iT3C15fMyQrj1RmG": "if (this.actor.has(\"Undead\") && this.actor.has(\"Ethereal\"))\n{\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name}).then(async test => {\n           await test.roll();\n           if(test.failed)\n               this.actor.addCondition(\"stunned\")\n    })\n}",
  "IukS0clr1yAleacc": "this.actor.system.characteristics.ag.modifier -= parseInt(this.item.system.location.value) || 1\r\n\r\nthis.actor.system.characteristics.ws.modifier -= parseInt(this.item.system.location.value) || 1",
  "IupskvzvoGyD2H5o": "if (this.actor.type != \"character\")\r\n{\r\n    return;\r\n}\r\n\r\nlet god = await ValueDialog.create({text : \"Wybierz Bóstwo\", title :  \"Błogosławieństwo (Boska Tradycja)\"})\r\n\r\nif (god)\r\n{\r\n    let prayers = await warhammer.utility.findAllItems(\"prayer\", \"Wyszukiwanie Błogosławieństw...\", true, [\"system.type.value\", \"system.god.value\"])\r\n    let blessings = prayers.filter(p => p.system.god.value.split(\",\").map(i => i.trim().toLowerCase()).includes(god.toLowerCase()) && p.system.type.value == \"blessing\")\r\n    let configBlessings = await Promise.all((game.wfrp4e.config.godBlessings[god.toLowerCase()] || []).map(fromUuid));\r\n    if (god == \"Stara Wiara\")\r\n    {\r\n        blessings = await ItemDialog.create(prayers.filter(i => i.system.type.value == \"blessing\"), 6, {text : \"Wybierz 6 Błogosławieństw\", title :  \"Blessed\"})\r\n    }\r\n    if (configBlessings.length)\r\n    {\r\n        // Combine blessings defined by config with actual blessing items found that specify this god, avoiding duplicates\r\n        blessings = blessings.concat(\r\n            configBlessings.map(i => {return {uuid : i.uuid, name : i.name}})\r\n            .filter(bls => !(blessings.find(i => i.uuid == bls.uuid)))\r\n        );\r\n    }\r\n    if (blessings.length)\r\n    {\r\n        this.script.notification(\"Dodaję \" + blessings.map(i => i.name).join(\", \"))\r\n        await this.actor.addEffectItems(blessings.map(i => i.uuid), this.effect)\r\n    }\r\n    else \r\n    {\r\n        this.script.notification(`Nie mogłem znaleźć żadnych błogosławieństw związanych z ${god}.`)\r\n    }\r\n    if (this.item.name.includes(\"Boska Tradycja\"))\r\n        this.item.updateSource({name: this.item.name.replace(\"Boska Tradycja\", god)});\r\n    else if (this.item.name.includes(\"Dowolne Bóstwo\"))\r\n        this.item.updateSource({name: this.item.name.replace(\"Dowolne Bóstwo\", god)});\r\n    else\r\n        this.item.updateSource({name: this.item.name + ` (${god})`});\r\n    await this.actor.update({\"system.details.god.value\": god})\r\n}",
  "iuSoKntfJ4eAPafQ": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Wyszukiwanie zaklęć...\", true, [\"system.lore.value\"])\r\nspells = spells.filter(s => [\"fire\", \"heavens\", \"beasts\", \"shadow\", \"light\", \"life\", \"death\", \"metal\"].includes(s.system.lore.value)).sort((a, b) => a.system.lore.value > b.system.lore.value ?  1 : -1)\r\n\r\nlet choice = await ItemDialog.create(spells, 1, {text : \"Wybierz Zaklęcie\", title : this.effect.name});\r\nif (choice[0])\r\n{\r\n    this.actor.addEffectItems(choice.map(i => i.uuid), this.effect)\r\n}\r\n",
  "IuxMr6SFdJhqFtVD": "this.actor.system.status.corruption.value += 3",
  "iuYuf05BNuZ5fllI": "if (args.test.isFumble)\n{\n    args.test.result.other.push(\"@Table[poisoned-wind-globe]\")\n}",
  "iVhi3Z6zPaf1bf8g": "return [\"t\", \"i\", \"ag\", \"dex\", \"int\", \"wp\"].includes(args.characteristic)",
  "ivxpmCKu3pEMG05c": "if (this.actor.inCombat)\r\n{\r\n\tthis.actor.characteristics.s.bonus += 2\t\t\r\n\tthis.actor.characteristics.s.calculationBonusModifier -= 2\r\n}",
  "iX0ctHYHg12pjaCU": "let result = await game.wfrp4e.tables.rollTable(\"gift-of-slaanesh\")\n\nif (result.object.documentId && result.object.documentCollection)\n{\n    let item = await fromUuid(`Compendium.${result.object.documentCollection}.${result.object.documentId}`);\n    if (item)\n    {  \n        let data = item.toObject();\n        // Some items need sourceTest for their effects\n        foundry.utils.setProperty(data, \"flags.wfrp4e.sourceTest\", this.effect.sourceTest);\n        await this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});\n    }\n}\n\nthis.script.message(game.wfrp4e.tables.formatChatRoll(\"gift-of-slaanesh\", {lookup : result.roll, hideDSN: true}));",
  "IzoOmDywGLqLNljN": "let skill = `Język (Magiczny)`;\r\nlet currentCareer = this.actor.system.currentCareer;\r\nlet existingSkill = this.actor.itemTypes.skill.find(i => i.name == skill);\r\n\r\nif (!currentCareer) return\r\n\r\n\r\nlet inCurrentCareer = currentCareer.system.skills.concat(currentCareer.system.addedSkills).includes(skill);\r\nlet witchAdded = this.actor.getFlag(\"wfrp4e\", \"witchAdded\") || {};\r\nif (existingSkill && inCurrentCareer && !witchAdded[existingSkill.name])\r\n{\r\n\texistingSkill.system.advances.costModifier = -5;\r\n}\r\nelse \r\n{\r\n\twitchAdded[skill] = true;\r\n\tcurrentCareer.system.addedSkills.push(skill);\r\n\tfoundry.utils.setProperty(this.actor, \"flags.wfrp4e.witchAdded\", witchAdded)\r\n}",
  "IzZcsSngI8TZH4d8": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.fjd1u9VAgiYzhBRp\");\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "J0IWUhxada2ONowP": "return args.skill?.name == `${game.i18n.localize(\"NAME.Entertain\")} (${game.i18n.localize(\"SPEC.Sing\")})` || args.skill?.name == `${game.i18n.localize(\"NAME.Entertain\")} (${game.i18n.localize(\"SPEC.Singing\")})` || args.skill?.name.includes(game.i18n.localize(\"SPEC.Magick\")) || args.skill?.name.includes(game.i18n.localize(\"SPEC.Eltharin\") || args.skill?.name.includes(game.i18n.localize(\"SPEC.Cathayan\")));",
  "j1AmrY1SxFJQyapo": "if (this.actor.status.advantage.value > 0 && args.item.system.attackType)\r\n{\r\n    args.item.system.qualities.value.push({name : \"penetrating\"})\r\n}",
  "J1FPDdrXGctKDTZz": "if (args.equipped)\n{\n    let ward = await fromUuid(\"Compendium.wfrp4e-core.items.Bvd2aZ0gQUXHfCTh\")\n    wardData = ward.toObject()\n    wardData.system.specification.value = \"8\"\n     \n    let mr = await fromUuid(\"Compendium.wfrp4e-core.items.yrkI7ATjqLPDTFmZ\")\n    mrData = mr.toObject()\n    mrData.system.specification.value = 2\n    \n    this.actor.createEmbeddedDocuments(\"Item\", [wardData, mrData], {fromEffect : this.effect.id})\n}\nelse\n{\n    this.effect.deleteCreatedItems()\n}",
  "j3c6Y5aeA7nlFr9F": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.wBhPFggGqIXwbx1r\",     // Alley Cat\n  \"Compendium.wfrp4e-core.items.Item.q58lK4kULJZB5GjE\",         // Rover\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "j3zDMWkns32Yrxn3": "this.effect.updateSource({\"flags.wfrp4e.ward\" :  9})",
  "j6Bf1iivH8cqSnnK": "let target = args.data.targets[0]\r\nreturn target?.actor.hasCondition(\"prone\") || target.hasCondition(\"surprised\")",
  "J8aPichsl25t1QZ9": "this.actor.addCondition(\"entangled\", this.effect.sourceTest.result.SL)",
  "j98hvy6r9G2Vjmid": "if (args.totalWoundLoss > 0) \r\n{\r\n  args.opposedTest.result.other.push(\r\n  `@Corruption[minor]{Wystawienie na pomniejsze zepsucie}`\r\n  )\r\n  this.script.message(\r\n  `<strong>${this.effect.name}</strong>: \r\n    @Corruption[minor]{Pomniejsze Zepsucie} <br/>\r\n    <strong>${args.actor.prototypeToken.name}</strong> musi wykonać  \r\n    <strong>Przeciętny (+20) Test na Pomniejsze Zepsucie</strong>`, \r\n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "JaiC5P6nIgctOacH": "if (args.actor.system.details.species?.value?.toLowerCase() == \"dwarf\")\n{\n    args.weaponProperties.flaws.undamaging = true;\n}",
  "JavuFNZ9Pj5elVLc": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\nlet data = item.toObject();\ndata.system.specification.value = 4 - this.actor.characteristics.s.bonus\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "JBoKPBr27C3PMoSD": "return args.skill?.name === game.i18n.localize(\"NAME.Navigation\");",
  "jbZPLb4wuqJpHLUx": "this.item.system.flaws.value.push({name : \"dangerous\"})",
  "jC8o5PbnqEvOoZ9N": "this.actor.addCondition(\"poisoned\", 2)",
  "jdS2u1tQPYeO55WI": "let type = this.item.getFlag(\"wfrp4e\", \"breath\");\r\n\r\nif (type == \"cold\")\r\n{\r\n\tlet stunned = Math.max(1, Math.trunc(args.totalWoundLoss / 5))\r\n\tawait args.actor.addCondition(\"stunned\", stunned);\r\n}\r\n\r\nif (type == \"corrosion\")\r\n{\r\n    let damageItems = await foundry.applications.api.DialogV2.confirm({window: {title : this.item.name}, content : `<p>Uszkodzić wszystkie noszone przedmioty?</p>`})\r\n\tif (damageItems)\r\n\t{\r\n\t\tlet msg = ``\r\n\t\tlet weapons = args.actor.itemTypes.weapon.filter(i => i.isEquipped);\r\n\t\tlet armour = args.actor.itemTypes.armour.filter(i => i.isEquipped);\r\n\t\tlet trappings = args.actor.itemTypes.trapping.filter(i => i.isEquipped);\r\n\t\tfor(let item of weapons)\r\n\t\t{\r\n\t\t\tif (item.system.properties.qualities.shield)\r\n\t\t\t{\r\n\t\t\t\tawait item.system.damageItem(1, \"shield\");\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tawait item.system.damageItem(1);\r\n\t\t\t}\r\n\t\t\tmsg += `<p><strong>${item.name}</strong>: uszkodzono o 1</p>`\r\n\t\t}\r\n\t\tfor(let item of armour)\r\n\t\t{\r\n\t\t\tawait item.system.damageItem(1);\r\n\t\t\tmsg += `<p><strong>${item.name}</strong>: uszkodzono o 1</p>`\r\n\t\t}\r\n\t\tfor(let item of trappings)\r\n\t\t{\r\n\t\t\tawait item.system.damageItem(1);\r\n\t\t\tmsg += `<p><strong>${item.name}</strong>: uszkodzono o 1</p>`\r\n\t\t}\r\n\t\tif (msg)\r\n\t\t{\r\n\t\t\tthis.script.message(msg, {speaker : {alias : args.actor.name}});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (type == \"fire\")\r\n{\r\n\tawait args.actor.addCondition(\"ablaze\");\r\n}\r\n\r\nif (type == \"electricity\")\r\n{\r\n\tawait args.actor.addCondition(\"stunned\");\r\n}\r\n\r\nif (type == \"poison\")\r\n{\r\n\tawait args.actor.addCondition(\"poisoned\");\r\n}\r\n\r\nif (type == \"warpfire\")\r\n{\r\n\tawait this.actor.corruptionDialog(\"moderate\")\r\n\tthis.actor.applyEffect({effectUuids : this.item.effects.getName(\"Warpfire\").uuid})\t\r\n}",
  "JEbs0WlqhKNDOo5A": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"unconscious\")\r\n}\r\n",
  "JeThJbOf6Xmbtgo1": "this.script.message(await this.actor.applyBasicDamage(8 + parseInt(this.effect.sourceTest.result.SL), {suppressMsg : true}))\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Athletics\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "JFgXyb6bKjZJLmF8": "return args.characteristic == \"ag\"",
  "jfk5VDKMTIf4ee0v": "if (args.totalWoundLoss > 0)\r\n    args.actor.addCondition(\"poisoned\")",
  "JfOodll9a2Lw0fWg": "let blinded = args.actor.hasCondition(\"blinded\")\nif (blinded)\n{\n    blinded.system.scriptData = blinded.system.scriptData.filter(s => s.trigger != \"dialog\")\n    blinded.system._scripts = null;\n}",
  "jFwema0iwzBphxie": "let woundsGained = Math.min(args.actor.status.wounds.value, args.totalWoundLoss)\r\nwoundsGained = Math.ceil(woundsGained / 2)\r\n\r\nargs.attacker.update({\"system.status.wounds.value\" : args.attacker.system.status.wounds.value + woundsGained})\r\n\r\nargs.actor.addCondition(\"fatigued\")\r\nargs.attacker.hasCondition(\"fatigued\")?.delete();\r\n\r\nthis.script.message(`<b>${args.attacker.prototypeToken.name}</b> Uleczono Rany: ${woundsGained}`);",
  "JgCcgDVZX54slrWx": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Melee\")) || args.item?.isMelee || args.context.corruption",
  "jGDk7avWFSnyFoql": "let broken = this.actor.hasCondition(\"broken\");\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.IAWyzDfC286a9MPz\");\r\n\r\nif (broken && !broken.getFlag(\"wfrp4e\", \"blasted-mind\") && !this.actor.has(item.name))\r\n{\r\n    await broken.delete();\r\n    this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})\r\n    this.script.notification(`Usunięto ${broken.name}, dodano ${item.name} (${Math.ceil(CONFIG.Dice.randomUniform() * 10)} Rund(y))`)\r\n}",
  "jgO1Kf60Ctt6R0qO": "return args.item?.name != game.i18n.localize(\"NAME.Leadership\")",
  "JhbZWZhOJ23yOBmG": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpentry)';\nconst difficulty = 'hard';\nconst target = 30;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "JhCMYHHYA860Kka8": "return !this.actor.attacker || args.item?.system?.attackType !== \"melee\" || args.skill?.name !== game.i18n.localize(\"NAME.Dodge\");",
  "jHgxpe6TJDlP3oTn": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Wyszkukuję zaklęcia...\", true, [\"system.lore.value\"])\r\nspells = spells.filter(s => [\"slaanesh\"].includes(s.system.lore.value))\r\n\r\nlet choice = await ItemDialog.create(spells, 1, {text : \"Wybierz Zaklęcie\", title : this.effect.name});\r\nif (choice[0])\r\n{\r\n    this.item.updateSource({name : this.item.name + ` (${choice[0].name})`})\r\n    this.actor.addEffectItems(choice.map(i => i.uuid), this.effect)\r\n}\r\n",
  "JibNjuQrJRnY0yf9": "return this.actor.flags.useless.rEye && this.actor.flags.useless.lEye && ([\"ws\", \"bs\"].includes(args.characteristic) || args.skill?.name?.includes(game.i18n.localize(\"NAME.Ride\")) || args.weapon || args.context.dodge)",
  "JjDzMnUxaWQePIYh": "return args.characteristic != \"int\"",
  "JjiPprLSlSmmB5Ga": "args.item.system.damage.value += \" + 1\"",
  "Jjq3oPYbI26zjxME": "let location = this.item.system.location.key;\r\n\r\nif (location)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono: ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}\r\n\r\nlet roll = await new Roll(\"1d10\").roll()\r\n\r\nroll.toMessage(this.script.getChatData({flavor : `${this.effect.name} (Czas Trwania)`}));\r\n\r\nthis.effect.updateSource({\"duration.rounds\" : roll.total})",
  "Jk7OHqx06oCUVAzb": "return ![`${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`, `${game.i18n.localize(\"NAME.Channelling\")} (Hysh)`].includes(args.skill?.name)",
  "jLsL4KRI6LEG9Ii2": "if (args.test.result.critical && ['rLeg', 'lLeg'].includes(args.test.result.hitloc.result))\n{\n    args.test.result.critModifier = args.test.result.critModifier ? args.test.result.critModifier + 20 : 20\n    args.test.result.critical += ` (+${args.test.result.critModifier})`\n}",
  "jmxlpyLrIuoxQtvU": "    this.actor.getActiveTokens().forEach(t => t.document.update({texture : {scaleX : 2, scaleY: 2, src: \"modules/wfrp4e-core/tokens/popout/gor.webp\"}}));\n",
  "JmZQRvdWjm9ykYfn": "if (this.actor.hasCondition(\"surprised\"))\r\n{\r\n    this.actor.removeCondition(\"surprised\")\r\n    this.script.message(`Nie może być zaskoczony!`);\r\n}",
  "Jnp5c09sPzDD61EK": "this.script.notification(`${args.actor.prototypeToken.name}: musi zdać <b>Przeciętny (+20) Test Siły Woli</b> aby zaatakować ten cel!`);\r\n\r\nreturn true; // No need to show this in the dialog",
  "jObJanFoev4N6ZRv": "if (!args.opposedTest.attackerTest.item?.system?.isMagical)\r\n\targs.abort = `<strong>${this.effect.name}</strong>: Zignorowano`",
  "jOCLEsjNzERyVLsP": "if(args.test.result.majormis)\n{\n    args.test.result.nullmajormis = game.i18n.localize(\"ROLL.MajorMis\")\n    args.test.minormis = game.i18n.localize(\"ROLL.MinorMis\")\n}",
  "jOm7RxGFm1y6mCpN": "return args.context.crewTest.name.includes(\"Batten Down\");",
  "jOSCsBRUO117spv8": "args.abort = `Tylko broń prochowa lub broń artyleryjska może atakować cele w obrębie: ${this.effect.name}`;",
  "jpcU8FFWSlQ3gD0L": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Trade\"))",
  "JQruHprM5R5vZ9DA": "let caster = this.effect.sourceActor;\r\nif (caster)\r\n{\r\n    let healed= caster.system.characteristics.wp.bonus + caster.system.characteristics.int.bonus\r\n    await this.actor.modifyWounds(healed);\r\n    this.script.message(`<strong>${this.actor.prototypeToken.name}</strong>: Uleczone Rany: ${healed}`);\r\n}\r\n \r\n let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"vhard\"}, context : {success : \"1 Punkt Zepsucia otrzymany w ciągu ostatniej godziny może zostać usunięty.\", failure: \"Nic się nie dzieje\"}});\r\n await test.roll();",
  "jRSgPhpfN7MH7TTp": "if (args.totalWoundLoss > 0)\r\n{\r\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context: { failure: \"Otrzymano 1 Stan Zatrucia\", success: \"Uchroniono przed otrzymaniem Stanu Zatrucia\" } })\r\n    await test.roll();\r\n    if (test.failed)\r\n    {   \r\n        args.actor.addCondition(\"poisoned\");\r\n        if (args.actor.system.status.wounds.value - args.totalWoundLoss <= 0)\r\n        {\r\n            args.actor.addCondition(\"unconscious\")\r\n        }\r\n    }\r\n}\r\n\r\n    // else\r\n    //     this.actor.setupCharacteristic(\"t\", { context: { failure: \"1 @Condition[Poisoned] Condition Gained\", success: \"Resisted @Condition[Poisoned] Condition\" } }).then(testCallback)\r\n",
  "jrvj7bRyMBB9LixP": "this.actor.addCondition(\"fatigued\", 3)",
  "jsgLEVYvMieyYT6L": "let tokenImg = \"\"; // Put path to token image here, inbetween the quotation marks\nif (tokenImg)\n{\n    if (this.effect.getFlag(\"wfrp4e\", \"transformed\"))\n    {\n        await this.effect.setFlag(\"wfrp4e\", \"transformed\", false);\n        this.actor.getActiveTokens().forEach(t => t.document.update({texture : {src: this.actor.prototypeToken.texture.src}}));   \n    }\n    else \n    {\n        await this.effect.setFlag(\"wfrp4e\", \"transformed\", true);\n        this.actor.getActiveTokens().forEach(t => t.document.update({texture : {src: tokenImg}}));\n    }\n}\nelse \n{\n    this.script.notification(\"No Token Image path configured. The image path should be set in the first line of this script.\", \"error\");\n}",
  "JstrA46EYSEuRSy5": "if (this.actor.has(game.i18n.localize(\"NAME.Undead\")) && this.actor.has(game.i18n.localize(\"NAME.Construct\")))\r\n   this.actor.addCondition(\"dead\")",
  "jW87rmQLtROdVEhW": "  if ([\"orc\", \"ork\", \"goblin\", \"hobgoblin\", \"snotling\", \"greenskin\", \"zielonoskóry\"].includes(args.opposedTest.defender.details.species.value.toLowerCase()))\r\n    {\r\n      args.addImpact = true\r\n      args.opposedTest.result.other.push(\"<b>Runa Zabójcy Goblinów</b>: Dodano Zaletę Druzgocąca\")\r\n    }",
  "JwgFQmPQtXWAP94i": "this.actor.addCondition(\"fatigued\");",
  "jWkfoVpHLiRaHTza": "if (args.test.succeeded)\r\n{\r\n    args.test.result.other.push(`<strong>${this.effect.name}</strong>: @Terror[1,${this.actor.prototypeToken.name}]`)\r\n}",
  "JwYZJGkZMSM2M3Si": "if (args.totalWoundLoss > 0)\n{\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\n    await test.roll()\n    if (test.failed)\n    {\n        args.totalWoundLoss += this.effect.sourceActor.system.characteristics.wp.bonus\n        args.modifiers.other.push({label : this.effect.name, value : this.effect.sourceActor.system.characteristics.wp.bonus})\n    }\n}",
  "jXbrIGxznqf1SNxZ": "const speaker = ChatMessage.getSpeaker({actor: this.actor});\n\nthis.script.message(`<p><b>${speaker.alias}</b> is Immersed within a Sea Elemental and suffers from @UUID[Compendium.wfrp4e-core.journals.JournalEntry.NS3YGlJQxwTggjRX.JournalEntryPage.WCivInLZrqEtZzF4#drowning-and-suffocation]{Suffocation}</p><p>They may attempt to escape by freeing themselves from the @Condition[Entangled} Condition as if they were @UUID[Compendium.wfrp4e-core.journals.JournalEntry.NS3YGlJQxwTggjRX.JournalEntryPage.wmA76Q2zJJ9HrkvA#grappling]{Grappled} by the Sea Elemental, making an <b>Opposed Strength Test</b> against its Strength of 59.</p>`);",
  "JXBUE0XuJOJNG7zE": "if (args.totalWoundLoss <= 7) return;\n\nlet options = {\n  appendTitle : \" – \" + this.effect.name,\n  skipTargets: true,\n  fields: {difficulty: 'average'},\n  characteristic: 'wp',\n}\n\nlet test = await args.actor.setupSkill('Cool', options);\nawait test.roll();\n\nif (!test.succeeded) {\n  const targetId = this.effect.getFlag(\"wfrp4e\", \"target\");\n  const target = canvas.scene.tokens.get(targetId);\n  await this.effect.delete();\n  args.extraMessages.push(`<b>${args.actor.name}</b> lost ${args.totalWoundLoss} Wounds to an attack, which caused it to let go of <b>${target.name}</b>.`);\n}",
  "jYJRO5XPyG7y6fih": "await this.actor.addCondition(\"blinded\")\r\nawait this.actor.addCondition(\"deafened\")\r\nawait this.actor.addCondition(\"fatigued\")",
  "JyTxUG5dNW670Sf7": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.7mCcI3q7hgWcmbBU\")\r\nlet data = item.toObject();\r\ndata.system.location.key= this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n   \r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"stunned\")\r\n}",
  "JZIn1dsKHFE3smJU": "let ablaze = parseInt(this.effect.sourceTest.result.SL) + 1\r\nargs.actor.addCondition(\"ablaze\", ablaze)",
  "K06v93N4FXb70mB7": "args.item.system.encumbrance.value = Math.max(0, args.item.system.encumbrance.value - 1);",
  "k0AkkBLtE8oZhBwn": "if (isNaN(parseInt(this.item.system.specification.value))) {\n  let value = await ValueDialog.create({title : \"Armoured Value\", text : \"Enter the Armoured value\"});\n  if (value) {\n    this.item.updateSource({\"system.specification.value\" : value});\n  }\n}",
  "k1Wdehpgdc0hP63E": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.aE3pyW20Orvdjzj0\")\nlet hatred = item.toObject();\nhatred.system.specification.value = \"Skaven\"\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.3wCtgMDNnu8MFmyk\")\nlet immunity = item.toObject();\nimmunity.system.specification.value = \"Poison\"\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.oRx92ByVNEBN6YkK\")\nlet berserk = item.toObject();\nawait this.actor.createEmbeddedDocuments(\"Item\", [hatred, immunity, berserk], {fromEffect : this.effect.id})",
  "k3FqFgsF6a3TkxAD": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\ntest.roll();\nreturn true;",
  "k7ldJfyW201HgRFh": "args.item.system.qualities.value.push({name : \"magical\"});",
  "k8TC0yzp4xfOXD2n": "if (args.totalWoundLoss > 0)\r\n{\r\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\n    await test.roll();\r\n    if (test.failed)\r\n    {\r\n\t    args.actor.addCondition(\"stunned\");\r\n    }\r\n\targs.actor.hasCondition(\"bleeding\")?.delete()\r\n}",
  "k9SvH4Lm3ZuI8S1N": "return ![\"wp\", \"ag\", \"i\", \"int\"].includes(args.characteristic)",
  "kbXDGAmWWD4CZJHB": "const sin = this.effect.sourceActor.system.status.sin.value;\nconst roll = new Roll(`2d10 - ${sin}`);\nawait roll.evaluate();\nawait roll.toMessage({flavor: `${this.effect.name}`});\nthis.actor.system.status.mood.addEntry(`${this.effect.name} (${this.effect.sourceActor.name})`, roll.total);",
  "kBXVEnSWzaQZLkJH": "if(args.test.result.critical)\r\n{\r\n   args.test.result.damage +=1 \r\n   args.test.result.additionalDamage += 1\r\n}",
  "KD4nCSdSXJVJmk0R": "this.script.message(await this.actor.applyBasicDamage(this.effect.sourceTest.result.damage, {suppressMsg : true}))\nawait this.actor.addCondition(\"ablaze\")",
  "kEaBLoIHt1FpQVKq": "if (this.actor.system.details.experience.current < 100) {\n  return this.script.notification(game.i18n.localize(\"SCRIPT.NotEnoughXP\"))\n}\n\nlet item = await game.wfrp4e.utility.findItem(\"Invisibility\", \"trait\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item]);\nlet expLog = foundry.utils.duplicate(this.actor.details.experience.log || []);\nexpLog.push({amount : 100, reason: item.name, spent: this.actor.details.experience.spent + 100, total: this.actor.details.experience.total, type: \"spent\"});\nthis.actor.update({\n    \"system.details.experience.spent\": this.actor.details.experience.spent + 100,\n    \"system.details.experience.log\": expLog\n  });",
  "KF69WqF4PSEtpdb2": "args.fields.slBonus += 2;\n        ",
  "KG4TxnXiLLpfWOQO": "args.fields.difficulty = \"average\"",
  "KGK9vL1Yl0qmCeCN": "let specification = this.item.system.specification.value;\r\nlet choice = [];\r\n\r\nif (!specification || specification == \"Wyszkolona Umiejętność\")\r\n{\r\n    choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n        broken: \"Ujarzmiony\",\r\n        drive: \"Pociągowy\",\r\n        entertain: \"Maskotka\",\r\n        fetch: \"Aportujący\",\r\n        guard: \"Stóżujący\",\r\n        home: \"Powracający\",\r\n        magic: \"Magiczny\",\r\n        mount: \"Wierzchowiec\",\r\n        war: \"Bojowy\"\r\n    }, this.effect.img), \"unlimited\", \"Wybierz wyszkoloną umiejętność\");\r\n}\r\nelse \r\n{\r\n    choice = specification.split(\", \").map(i => {\r\n        return {\r\n            id : i.toLowerCase(),\r\n            name : i\r\n        }\r\n    });\r\n}\r\n\r\nif (choice.length)\r\n{\r\n    let changes = foundry.utils.deepClone(this.effect.changes);\r\n\r\n    for(let training of choice)\r\n    {\r\n        switch(training.id)\r\n        {\r\n            case \"ujarzmiony\" : \r\n                let roll = await new Roll(\"2d10\").roll({allowInteractive : false});   \r\n                roll.toMessage(this.script.getChatData());\r\n                changes.push({value : roll.total, mode : 2, key : \"system.characteristics.fel.modifier\"})\r\n\r\n                if (this.actor.type == \"creature\")\r\n                {\r\n                    let bestial = this.actor.itemTypes.trait.find(i => i.name == \"Zwierzęcy\");\r\n                    if (bestial)\r\n                    {\r\n                        bestial.update({\"system.disabled\" : true})\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"pociągowy\" : \r\n\r\n                break;\r\n\r\n            case \"maskotka\" : \r\n\r\n                break;\r\n\r\n            case \"aportujący\" : \r\n\r\n                break;\r\n\r\n            case \"stóżujący\" : \r\n                let territorial = await fromUuid(\"Compendium.wfrp4e-core.items.Item.JIAe7i7dqTQBu4do\");\r\n                await this.actor.createEmbeddedDocuments(\"Item\", [territorial], {fromEffect: this.effect.id})\r\n                foundry.utils.setProperty(args, \"options.keepId\", true);\r\n                break;\r\n\r\n            case \"powracający\" : \r\n\r\n                break;\r\n\r\n            case \"magiczny\" : \r\n\r\n                break;\r\n\r\n            case \"wierzchowiec\" : \r\n\r\n                break;\r\n\r\n            case \"bojowy\" : \r\n                changes.push({value : 10, mode : 2, key : \"system.characteristics.ws.modifier\"})\r\n                break;\r\n        }\r\n    }\r\n    this.effect.updateSource({name : `${this.effect.name} (${choice.map(i => i.name).join(\", \")})`, changes, \"flags.wfrp4e.trained\" : choice.map(i => i.id)})\r\n    this.item.updateSource({\"system.specification.value\" : `${choice.map(i => i.name).join(\", \")}`})\r\n}",
  "KICZPwLvbUSxbDrE": "let table = game.wfrp4e.tables.findTable(\"mutatemental\");\r\nif (!table)\r\n{\r\n\tui.notifications.error(\"Nie odnaleziono tabeli o kluczu: mutatemental\")\r\n}\r\nlet result = (await table.roll()).results[0];\r\nlet uuid = `Compendium.${result.documentCollection}.${result.documentId}`\r\nlet item = await fromUuid(uuid);\r\n\r\nif (item)\r\n{\r\n    this.script.notification(`Dodano: ${item.name}`)\r\n    this.actor.createEmbeddedDocuments(\"Item\", [item])\r\n}\r\nelse \r\n{\r\n    ui.notifications.error(\"Nie odnaleziono przddmiotu o kluczu: \" + uuid)\r\n}",
  "kiJ6AiaYVUjt6aV6": "teeth = await fromUuid(\"Compendium.wfrp4e-core.items.fBcZhOBn8IpoVqQ1\")\r\nteeth = teeth.toObject();\r\n\r\nlet roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nroll.toMessage(this.script.getChatData({flavor : \"Utracono Zęby\"}))\r\nteeth.system.location.value = `${roll.total} ${teeth.system.location.value}`\r\nthis.actor.createEmbeddedDocuments(\"Item\", [teeth])",
  "kIM4Fs1lFVV7TSnj": "this.actor.modifyAdvantage(1);",
  "KIoVBinAZK8sMOqD": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"average\"}, skipTargets: true, appendTitle :  \" - Uporczywa Rana\"})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    fromUuid(\"Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb\").then(disease => {\r\n        this.actor.createEmbeddedDocuments(\"Item\", [disease.toObject()])\r\n        this.script.notification(\"Otrzymano: \" + disease.name)\r\n    })\r\n}\r\n",
  "KJLAan0glJlyOyqF": "    this.actor.getActiveTokens().forEach(t => t.document.update({light : {\r\n      \"dim\": 10,\r\n      \"bright\": 5,\r\n      \"alpha\": 0.5,\r\n      \"animation\": {\r\n          \"speed\": 4,\r\n          \"intensity\": 4,\r\n          \"type\": \"flame\",\r\n      },\r\n      \"color\": \"#ac9e6c\",\r\n  }}));",
  "kkC5EhqA05U6U0gU": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\n\r\n// Kind of insane but whatever\r\nlet opposedResult = test.opposedMessages[0]?.system.opposedHandler?.resultMessage?.system.opposedTest?.result\r\n\r\nif (opposedResult?.winner == \"attacker\")\r\n{\r\n    if (opposedResult.differenceSL < 6)\r\n    {\r\n        this.actor.addCondition(\"fatigued\", Math.floor(opposedResult.differenceSL / 2))\r\n    }\r\n    else if (opposedResult.differenceSL >= 6)\r\n    {\r\n        this.actor.addCondition(\"broken\");\r\n    }\r\n}",
  "KkjkYAGI9Em1NgiQ": "if (this.item.system.quantity.value) \r\n{\r\n    this.item.system.reduceQuantity();\r\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Heal\"), { appendTitle: ` - ${this.effect.name}`, skipTargets: true })\r\n    await test.roll();\r\n    if (test.succeeded) \r\n    {\r\n        let actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n        actor.applyEffect({ effectData: [this.item.effects.contents[0].convertToApplied()] })\r\n    }\r\n    else \r\n    {\r\n        this.script.notification(\"Test Leczenia nie powiódł się!\", \"error\");\r\n    }\r\n}\r\nelse \r\n{\r\n    this.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "KmngDrPD72xn22kZ": "if (this.actor.Species.toLowerCase() != \"skaven\") {\r\n    this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - Użyto ${this.effect.name}`, fields: { difficulty: \"difficult\" } }).then(async test => {\r\n      await test.roll()\r\n      if (test.failed) \r\n      {\r\n        let toughnessLost = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n        this.actor.update({ \"system.characteristics.t.initial\": this.actor.characteristics.t.initial - toughnessLost })\r\n        this.script.message(`<b>${this.actor.prototypeToken.name}</b> Utracone punkty Wytrzymałości: ${toughnessLost}`)\r\n      }\r\n    })\r\n  }",
  "kMSdRskYDI2J1gnp": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();  \r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\");\r\n}\r\n  ",
  "kmsGLWGxCY8Z8jVG": "return args.skill?.name != game.i18n.localize(\"NAME.Intuition\");",
  "knq8lNYLw0v757dQ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.9fq6p9Q6H02LjaSi\")\nlet data = item.toObject();\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "KnwYZbeRSBA94hfl": "if (!args.flags.lostFingers)\r\n{\r\n\targs.flags.lostFingers = true;\r\n\targs.fields.modifier -= 5 * this.actor.flags.useless[this.item.system.location.key]\r\n}",
  "KPQfupKuaf4LCv4R": "const talents = await Promise.all([game.i18n.localize(\"NAME.Schemer\"), game.i18n.localize(\"NAME.SecondSight\")].map(game.wfrp4e.utility.findTalent))\r\nthis.actor.createEmbeddedDocuments(\"Item\", talents, {fromEffect : this.effect.id})",
  "KQmb5B27eJ1lkbVL": "return this.item.system.quantity.value > 0 && args.type != \"channelling\"",
  "KQzbrpb0T5a7it4k": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.vMYEkrWj0ip6ZOdv\");\r\nlet data = item.toObject();\r\ndata.name += ` (Choroby)`;\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "KSGIwJxR0qn10RLX": "this.actor.itemTags.template.find(t => t.name === \"Hungry Troll\").delete();",
  "KSjsDlsx3DD6cT16": "return args.skill?.name != game.i18n.localize(\"NAME.Bribery\");",
  "KT670CjGBEprx2fO": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.RWJrupj9seau0w31\");\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id})",
  "KTBVDHUndI3qDOXM": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"))\r\nawait test.roll();\r\nif (!test.succeeded)\r\n{\r\n    args.actor.addCondition(\"stunned\")\r\n}",
  "KuUkUmOOLf05I4Bp": "this.actor.hasCondition(\"broken\")?.delete();\n",
  "KuuWAhoSzk0rCxxw": "args.fields.modifier += -20;",
  "KUx0deSF3xNzMucL": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Art\"));",
  "kvaN100w0nBUlLbj": "let poisoned = this.actor.hasCondition(\"poisoned\")\r\nif (poisoned)\r\n{\r\n    this.script.message(\"Niewrażliwość na trucizny!\")\r\n    poisoned.delete()\r\n}",
  "kvnZz8yqdTZbErkr": "args.actor.system.details.move.value -= 2;\nargs.actor.system.details.man -= 1;\nargs.actor.system.status.carries.max *= 1.5;",
  "KVpDUEjHhd3nLa0f": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n    this.script.message(await game.wfrp4e.tables.formatChatRoll(\"enrage-beast\"))\n}",
  "kvqJbHBvFr6iGLcI": "this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.3wCtgMDNnu8MFmyk\",null,[{\"system.specification.value\":\"Poison\"}])",
  "KVuPduDztyMZQNt9": "args.fields.slBonus += this.actor.system.characteristics.ag.bonus",
  "kWynO1lQzjiSs8RK": "return args.skill?.name != game.i18n.localize(\"NAME.Haggle\");",
  "KxIRA51YA0rktcSP": "return args.characteristic === \"fel\"",
  "KXzDe7cN2vynHjJO": "this.actor.hasCondition(\"blinded\")?.delete();\nthis.actor.hasCondition(\"deafened\")?.delete()\nthis.actor.hasCondition(\"unconscious\")?.delete()",
  "kYiDBPRKIokFkr4Z": "if (args.item.type  == \"skill\" && args.item.name == `${game.i18n.localize(\"NAME.Ranged\")} (${game.i18n.localize(\"SPEC.Bow\")})`)\r\n{\r\n     args.item.system.modifier.value += 20;\r\n}",
  "kYmscP2HuXjDovBD": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"))\r\n",
  "KyswmGj1uG3QS3ng": "args.applyAP = false;",
  "kYTEqcs8JpO2OmB9": "if (args.equipped)\r\n    await this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.Bvd2aZ0gQUXHfCTh\", this.effect, {\"system.specification.value\": \"10\"});\r\nelse\r\n    await this.effect.deleteCreatedItems()",
  "KyUPYV1RXJxPOfyA": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"veasy\"}})\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"fatigued\");\n}",
  "l1ntrpa8RE3Lg5xE": "return args.skill?.name === game.i18n.localize(\"NAME.Perception\");",
  "L1RMLvKtRPFtnczI": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MGEPI4jNhymNIRVz\");\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "L2cdQppcPwxz24hN": "return !args.weapon",
  "L89UcafRHqUfxoux": "let injury = await fromUuid(\"Compendium.wfrp4e-core.items.3S4OYOZLauXctmev\")\r\ninjury.updateSource({\"system.location.key\" : this.item.system.location.key})\r\nthis.actor.createEmbeddedDocuments(\"Item\", [injury], {fromEffect: this.effect.id})",
  "l8qFKSnMpy4P7XQR": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "L9eAtDyaoHvqryk4": "return args.skill?.name != game.i18n.localize(\"NAME.Intimidate\");",
  "laptAldsT0Fm1rDt": "let blunt = await foundry.applications.api.DialogV2.confirm({window: {title : this.effect.name}, content :`<p>Zastosuj zmniejszenie obrażeń obuchowych? (-3)</p>`})\r\n\r\nif (blunt)\r\n{\r\n    args.modifiers.other.push({label : this.effect.name, details : \"Zmniejszenie Obrażeń Obuchowych\", value : -3})\r\n}",
  "LAyLbcC0lOPwZP3U": "this.actor.addCondition(\"ablaze\", parseInt(this.effect.sourceTest.result.SL))",
  "lCOdnKz8XpnkDs6Q": "let test = await this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();",
  "LedRsrVo2f7lm3Ix": "return args.skill?.name == game.i18n.localize(\"NAME.Intimidate\");",
  "LeKLtvEDrWh4yHsx": "return args.skill?.name == game.i18n.localize(\"NAME.CharmAnimal\") || args.skill?.name.includes(game.i18n.localize(\"NAME.AnimalTraining\"));",
  "lFO6XdfUODmFArqx": "args.actor.addCondition(\"bleeding\")",
  "Lg1oRg4oNRvucsvi": "return !(args.skill?.name == game.i18n.localize(\"NAME.Climb\") || args.skill?.name == game.i18n.localize(\"NAME.Athletics\"))",
  "LgYyLg0Y2AQ1SKcS": "let amount = this.effect.sourceTest.result.overcast.usage.other.current ?? 0;\n\nargs.fields.successBonus += 2 + amount;",
  "lhemR8EP5tGNKout": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields: {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context : {failure : \"Cierpisz na Irraconalne Lęki\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    msg = `<p>@UUID[${this.effect.sourceItem.uuid}]{Irraconalne Lęki} Roll: <a class=\"inline-roll\"><i class=\"fas fa-dice-d20\"></i>${Math.ceil(CONFIG.Dice.randomUniform() * 10)}</a></p>`\r\n    if (test.result.roll % 11 == 0 || test.result.roll == 100)\r\n    {\r\n        msg += `<p><b>${this.actor.prototypeToken.name}</b>: Dodatkowo, otrzymuje 1 punkt zepsucia. W przypadku mutacji, wylosuj @Table[mutatemental]{Psychiczną Mutację}</p>`\r\n        let newCorruption = Number(this.actor.status.corruption.value) + 1\r\n        this.actor.update({\"system.status.corruption.value\" : newCorruption})\r\n    }\r\n\r\n    this.script.message(msg);\r\n}\r\n",
  "LHUUXfZVLBhWqRvb": "this.actor.status.addArmour(5, {magical: true, source : this.effect})",
  "lII4KMRblqwFBlsV": "let characteristics = {\r\n  \"ws\" : 10,\r\n  \"bs\" : 0,\r\n  \"s\" : 0,\r\n  \"t\" : 0,\r\n  \"i\" : 10,\r\n  \"ag\" : 0,\r\n  \"dex\" : 0,\r\n  \"int\" : 20,\r\n  \"wp\" : 10,\r\n  \"fel\" : 15\r\n}\r\nlet skills = [\"Splatanie Magii\", \"Charyzma\", \"Kuglarstwo (Taniec)\"]\r\nlet skillAdvancements = [0, 6, 3]\r\nlet talents = [\"Atrakcyjny\", \"Rozproszenie Uwagi\", \"Naśladowca\"]\r\nlet traits = [\"Dekoncentrujący\", \"Latanie (6)\", \"Rzucanie Czarów (Magia Prosta)\"]\r\nlet trappings = [];\r\nlet items = [];\r\nlet spells = [\"Błędne ogniki\", \"Uśpienie\"];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n  updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n  let skill = skills[index]\r\n  let skillItem;\r\n  skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n  if (skillItem)\r\n      skillItem.system.advances.value += skillAdvancements[index]\r\n  else \r\n  {\r\n      skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n      skillItem = skillItem.toObject();\r\n      skillItem.system.advances.value = skillAdvancements[index];\r\n      items.push(skillItem);\r\n  }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n  let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n  if (talentItem)\r\n  {\r\n      items.push(talentItem.toObject());\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n  }\r\n}\r\n\r\nconst traitRegex = /(?:,?(.+?)(\\+?\\d{1,2}\\+?)?\\s*?(?:\\((.+?)\\)\\s*(\\+?\\d{1,2})?|,|$))/gm\r\nfor (let trait of traits)\r\n{\r\n  let traitMatches = trait.matchAll(traitRegex).next().value\r\n  let traitName = traitMatches[1]\r\n  let traitVal = traitMatches[2] || traitMatches[4] // could be match 2 or 4 depending on if there's a specialization\r\n  let traitSpec = traitMatches[3]\r\n\r\n  let traitItem;\r\n  try {\r\n      traitItem = await WFRP_Utility.findItem(traitName, \"trait\")\r\n  }\r\n  catch { }\r\n  if (!traitItem) {\r\n      ui.notifications.warn(`Could not find ${trait}`, {permanent : true})\r\n  }\r\n  traitItem = traitItem.toObject()\r\n\r\n  if (Number.isNumeric(traitVal))\r\n  {\r\n      traitItem.system.specification.value = traitName.includes('Broń','Rogi','Atak Ogonem','Macki','Ugryzienie') ? traitVal - parseInt(characteristicValues[3]/10) : traitVal;\r\n      traitItem.name = (traitItem.name +  ` ${traitSpec ? \"(\"+ traitSpec + \")\" : \"\"}`).trim()\r\n  }\r\n  else \r\n      traitItem.system.specification.value = traitSpec\r\n\r\n  items.push(traitItem)\r\n\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n  let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n  if (trappingItem)\r\n  {\r\n      trappingItem = trappingItem.toObject()\r\n\r\n      trappingItem.system.equipped.value = true;\r\n\r\n      items.push(trappingItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n  }\r\n}\r\n\r\nfor (let spell of spells) \r\n{\r\n  let spellItem = await game.wfrp4e.utility.findItem(spell)\r\n  if (spellItem)\r\n  {\r\n      spellItem = spellItem.toObject()\r\n\r\n      items.push(spellItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${spell}`, {permanent : true})\r\n  }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "lj7vOpa6tHHZ9bBB": "return this.actor.attacker",
  "LjfScVGBf0Egr70E": "let animalCare = this.actor.itemTypes.skill.find(s => s.name === game.i18n.localize(\"NAME.AnimalCare\"));\nlet animalTrainings = this.actor.itemTypes.skill.filter(s => s.name.includes(game.i18n.localize(\"NAME.AnimalTraining\")));\n\nif (animalCare) \n  animalCare.system.modifier.value += 20;\n\nfor (let training of animalTrainings) {\n  training.system.modifier.value += 30;\n}",
  "ljGX2w8hCTyLAjRp": "let specification = Number(this.item.specification.value) || 1;\nargs.actor.system.details.price.gc -= Math.floor(args.actor.system.details.price.gc * 0.1 * specification);",
  "ljpM7muMyxGD04EX": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MVI0lXcg6vvtooAF\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "LjXPlgdXBdllnA3i": "return ![\"s\", \"t\"].includes(args.characteristic)",
  "LkPtgN9A36OI6Frh": "return args.skill?.name == game.i18n.localize(\"NAME.Leadership\");",
  "LLqAT9wEUGMLfDhU": "return !args.item?.system.isRanged",
  "LlRhPGorLl5qJCU8": "if (this.actor.hasCondition(\"prone\")) \r\n{\r\n    this.actor.addCondition(\"unconscious\");\r\n}\r\nelse \r\n{\r\n    this.actor.addCondition(\"prone\");\r\n}",
  "Lm9IBkc918Duw3US": "let career = this.actor.itemTypes.career.find(c => c.getFlag(\"wfrp4e\", \"doubleLife\"))\n\nif(career)\n{\n    career.system.current.value = true;\n}",
  "lmBAZCtofsC8hHHG": "let SL = 1;\r\n\r\ndo {\r\n  const signedSL = SL >= 0 ? `+${SL}` : \"SL\";\r\n  const content = `\r\n  <div>\r\n    <p style=\"font-weight: bold;\">Zdobyto ${signedSL} PS. Czy chcesz rzucić k10?</p>\r\n    <p>1–6: dodaj +1 PS</p>\r\n    <p>7–10: Strać wszystkie PS i następny test wykonaj z -1 PS</p>\r\n  </div>\r\n`;\r\n  const choice = await foundry.applications.api.DialogV2.confirm({\r\n    yes: {label: \"Rzuć\", icon: \"fas fa-dice\"},\r\n    no: {label: `Zachowaj ${signedSL} PS`, icon: \"fas fa-check\"},\r\n    content,\r\n  });\r\n\r\n  if (!choice) break;\r\n\r\n  const roll = new Roll(\"1d10\");\r\n  await roll.toMessage({flavor: this.effect.name});\r\n\r\n  if (roll.total >= 7) {\r\n    SL = -1;\r\n    break;\r\n  }\r\n\r\n  SL++;\r\n} while (true);\r\n\r\nthis.effect.setFlag(\"wfrp4e\", \"SL\", SL);",
  "lMRsQRgjMexY9dxE": "return [\"NAME.Endurance\", \"NAME.Cool\"].map(i => game.i18n.localize(i)).includes(args.skill?.name)",
  "lOIHiAIDtj91kllN": "const chanties = await warhammer.utility.findAllItems('wfrp4e-soc.chanty', \"Wyszukuję Szanty\", true);\r\nlet choice = await ItemDialog.create(chanties, 1, {text : \"Wybierz Szanty\", title : this.effect.name});\r\nif (choice.length) \r\n{\r\n  this.actor.addEffectItems(choice.map(i => i.uuid), this.effect)\r\n}",
  "LOL2TGf8p8KxP14D": "let wind = this.effect.name.split(\" \")[2]\nreturn args.type != \"cast\" || game.wfrp4e.config.magicWind[args.item.system.lore.value] != wind;",
  "lol5J6h0pErzM71s": "return args.weapon?.system.properties.flaws.crewed",
  "lOzkngzye4RmvALp": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.DrNUTPeodEgpWTnT\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id});\r\nthis.script.notification(\"Dodano: \" + item.name)",
  "Lp261O9fgEXmgPf3": "// If this actor wins a defending test, swap the test\r\nif (!args.opposedTest.result.swapped && args.opposedTest.result.winner == \"defender\" && args.opposedTest.attackerTest.result.damage)\r\n{\r\n    await args.opposedTest.swap(this.effect.label);\r\n}",
  "lPudo1grrVp05i7a": "let loc = Math.floor(CONFIG.Dice.randomUniform() * 2) == 0 ? \"head\" : \"body\"\nlet damage = this.actor.system.characteristics.s.bonus + 6\n\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name}).then(async test => {\n           await test.roll();\n           if(test.failed)\n           {\n               await this.actor.addCondition(\"stunned\")\n               this.script.message(await this.actor.applyBasicDamage(damage, {loc, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))\n           }\n    })",
  "Lpv2N9LK9loeumiW": "if (this.actor.uuid != this.effect.sourceActor.uuid)\r\n{\r\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Athletics\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty: \"hard\"}, context : {failure : `<strong>${this.effect.name}</strong>: Nie można się poruszyć lub wykonać akcji`}}).then(test => {\r\n       test.roll();\r\n    })\r\n}",
  "LQEWSN5KnHHATPsf": "if (args.totalWoundLoss > 0)\r\n{\r\n    this.script.message(`<b>${args.actor.name}</b> musi zdać <b>Prosty (+40) Test Odporności</b> lub otrzyma @UUID[Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb]{Ropiejącą Ranę}`, {whisper: ChatMessage.getWhisperRecipients(\"GM\")});\r\n}",
  "lQJ68n3y1xDyNicE": "return !args.context.sizeModifier && args.item?.system?.attackType != \"ranged\"",
  "Lrb1S2aK7SFVD0C7": "if (args.totalWoundLoss > 0)\n{\n    let test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\n    await test.roll();\n    if (test.failed)\n    {\n        await args.actor.addCondition(\"fatigued\");\n    }\n}",
  "lRZhkh8pcu93QTKz": "if (args.test.spell)\n{\n\targs.test.preData.SL = -10\n}",
  "lSOAZ4FG44bT4jh1": "let infected = await fromUuid(\"Compendium.wfrp4e-core.items.V0c3qBU1CMm8bmsW\")\nlet fear = await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")\n\nlet infectedData = infected.toObject();\nlet fearData = fear.toObject();\nfearData.system.specification.value = 2;\nthis.actor.createEmbeddedDocuments(\"Item\", [fearData, infectedData], {fromEffect : this.effect.id})",
  "Lu27iXtJVkrJ8bOx": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Stealth\"))",
  "lU4s3UTtBkU38djI": "this.actor.addCondition(\"entangled\")\r\nlet msg = `<b>${this.actor.prototypeToken.name}</b>: Utracono 1 Punkt Żywotności oraz otrzymano 1 Stan @Condition[Pochwycenie].`\r\nthis.script.message(msg)\r\nthis.actor.modifyWounds(-1)",
  "lvjcddwRiN9iGruy": "let test = await this.actor.setupCharacteristic(\"t\", { appendTitle: ` - ${this.effect.name}`, fields: { difficulty: \"challenging\" } })\r\nawait test.roll();\r\n\r\nif (test.failed) \r\n{\r\n    let ageAdded = Math.ceil(CONFIG.Dice.randomUniform() * 10) + Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let ws = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let bs = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let s = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let t = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let ag = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let dex = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n\r\n    let currentAge = parseInt(this.actor.system.details.age.value)\r\n\r\n    let inline = `<a class=\"inline-roll\" data-tooltip=\"@TT\"><i class=\"fas fa-dice-d20\"></i>@ROLL</a>`\r\n    let msg =\r\n        `<p><b>${this.actor.prototypeToken.name}</b>: starzeje się o ${inline.replace(\"@ROLL\", ageAdded).replace(\"@TT\", \"2d10\")} lat oraz traci</p>\r\n      <p>${inline.replace(\"@ROLL\", ws).replace(\"@TT\", \"1d10\")} <b>Walki Wręcz</b></p>\r\n      <p>${inline.replace(\"@ROLL\", bs).replace(\"@TT\", \"1d10\")} <b>Umiejętności Strzeleckich</b></p>\r\n      <p>${inline.replace(\"@ROLL\", s).replace(\"@TT\", \"1d10\")} <b>Siły</b></p>\r\n      <p>${inline.replace(\"@ROLL\", t).replace(\"@TT\", \"1d10\")} <b>Wytrzymałości</b></p>\r\n      <p>${inline.replace(\"@ROLL\", ag).replace(\"@TT\", \"1d10\")} <b>Zwinności</b></p>\r\n      <p>${inline.replace(\"@ROLL\", dex).replace(\"@TT\", \"1d10\")} <b>Zręczności</b></p>\r\n `\r\n    this.script.message(msg);\r\n\r\n    let characteristics = foundry.utils.duplicate(this.actor.system.characteristics)\r\n\r\n    characteristics.ws.initial -= ws\r\n    characteristics.bs.initial -= bs\r\n    characteristics.s.initial -= s\r\n    characteristics.t.initial -= t\r\n    characteristics.ag.initial -= ag\r\n    characteristics.dex.initial -= dex\r\n\r\n    this.actor.update({ \"system.characteristics\": characteristics, \"data.details.age.value\": ageAdded + currentAge })\r\n}",
  "lwVhn4bSXJ3eoT9q": "if (this.item.system.weaponGroup.value == \"basic\")\r\n{\r\n    let slash = this.item.system.qualities.value.find(i => i.name == \"slash\")\r\n    if (slash)\r\n    {\r\n        slash.value = \"2A\"\r\n    }\r\n}",
  "LxdLkPxH3SFvYrCJ": "if (args.effect.conditionId == \"ablaze\")\n{\n     args.data.formula += ` - ${this.actor.system.characteristics.t.bonus}`\n}",
  "LXEUhHuXe8keEPI9": "let test = await this.actor.setupCharacteristic(\"wp\", {fields: {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n\tlet stuns = Math.max(1, Math.abs(test.result.SL))\n\tthis.actor.addCondition(\"stunned\", stuns)\n}",
  "LyAK0dVDS5L09yq2": "let caster = this.effect.sourceActor\r\n\r\nif (caster)\r\n{\r\n    let bonus = caster.system.characteristics.wp.bonus\r\n    this.actor.modifyWounds(bonus)\r\n\r\n    this.script.message(`<strong>${this.actor.prototypeToken.name}</strong>: Uleczone Punkty Żywotności: ${bonus}`);\r\n}",
  "lYYkGzqNshiYc7WI": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"poisoned\")\n}",
  "lZuavewrJzOehrJQ": "let test = await this.actor.setupSkill('Endurance',  {\n  appendTitle: ` – ${this.effect.name}`,\n  skipTargets: true,\n  fields: {difficulty: 'easy'},\n  characteristic: 't',\n  context: {failure: \"Mast shattered!\"}\n});\nawait test.roll();\n\nif (test.failed) {\n  let crit = await fromUuid(\"Item.d4bCnR1zINTNF9VC\");\n  await this.actor.createEmbeddedDocuments(\"Item\", [crit]);\n  this.effect.update({disabled: true});\n}",
  "M0eOB2Jg9KzcN1gz": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.Nj3tC8A5fZ3zEdMR\",     // Holy Visions\n  \"Compendium.wfrp4e-core.items.Item.mNoCuaVbFBflfO6X\",       // Sixth Sense\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "M0XhKnWjG14pk3iH": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) && args.type != \"channelling\" && args.skill?.name != game.i18n.localize(\"NAME.Charm\") && !args.skill?.name.includes(`${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`) && args.type != \"cast\"",
  "M2FshTX4PjKFVU8y": "args.flags.earCount = Number.isNumeric(args.flags.earCount) ? args.flags.earCount+1 : 1;\r\nif (args.characteristic == \"fel\")\r\n{\r\n\targs.fields.modifier -= 5;\r\n}\r\nif (args.flags.earCount == 2 && args.skill?.name == game.i18n.localize(\"NAME.Perception\"))\r\n{\r\n\targs.fields.modifier -= 20;\r\n}\r\n",
  "m3qEVO5fseV6KHXa": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.qn4ZpvTQIX4rcJDl\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "m4eagTrVOXtotonR": "// Get the size\nlet size = this.actor.sizeNum \nlet diff = \"difficult\";\nif (size < 5) { // 5 = Monstrous\n   diff = \"hard\";\n}\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : diff}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) {\n        this.actor.addSystemEffect(\"fear\")\n}",
  "m58MpMZBblpq5LJu": "args.prefillModifiers.slBonus++;\r\nargs.prefillModifiers.successBonus++;\r\n",
  "M5bh0heeafA2fQQ8": "if (args.test.spell?.getFlag(\"wfrp4e\", \"boonOfTzeentch\"))\r\n{\r\n    if (args.test.result.minormis || args.test.result.majormis || args.test.result.catastrophicmis)\r\n    {\r\n        this.script.message(`<strong>${this.effect.name}</strong> opuszcza twój umysł z obrzydzeniem i wymazuje się z twojej księgi!`)\r\n        this.effect.sourceItem.delete();\r\n    }\r\n}",
  "m84kG5cEPEByqHdd": "const uuid = \"Compendium.wfrp4e-core.items.Item.SfUUdOGjdYpr3KSR\";\nconst item = await fromUuid(uuid);\nawait this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id});",
  "m8qBlbH7ROoqa22o": "return args.context.reload",
  "M9VgeYGiUO97ZUW4": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.hCadFsTRvLN9faaY\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Szczęka\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (!test.succeeded)\r\n{\r\n\targs.actor.addCondition(\"unconscious\")\r\n}\r\n\r\n",
  "ma0sWhebqwdRHWvY": "if (!args.flags.trained)\r\n{\r\n    args.flags.trained = true;\r\n    args.fields.modifier += 10;\r\n}",
  "maKr58mvvyKxFyC3": "if (args.item.type == \"prayer\" && (args.item.damage.value || args.item.damage.dice))\r\n    args.item.damage.value += \"+1\"",
  "masOBNgSi5HYkf3m": "return args.type != \"cast\" && args.type != \"channelling\"",
  "mBcLf11upaHS8AQq": "this.actor.status.addArmour(1, {source: this.effect})",
  "MCK6WyjwYT28lsTN": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.u0CFf3xwiyidD9T5\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "McLR9YcgVUG3MooC": "args.applyTB = false;",
  "MDLttXplnNthncGr": "return args.type == \"cast\" && [\"death\", \"necromancy\", \"life\", \"light\", \"heavens\"].includes(args.spell?.system.lore.value)",
  "Me1wS5XdqUEy7OGt": "let loc = (await game.wfrp4e.tables.rollTable(\"hitloc\")).result;\r\nlet critTable = `crit${this.generalizeTable(loc)}`;\r\nlet crit = (await game.wfrp4e.tables.rollTable(critTable)).result;\r\n\r\nthis.script.message(`{this.actor.name} suffers a ${crit} (location : ${loc}). Do not apply bleeding or any additonnal wounds.`);",
  "MFKhU9vp8bQpHP3I": "let value = parseInt(this.item.specification.value)\r\nlet name = this.actor.prototypeToken.name\r\n\r\nif (game.user.isGM && game.user.targets.size)\r\n{\r\n  game.user.targets.forEach(t => {\r\n    t.actor.applyTerror(value, name)\r\n  })\r\n  game.canvas.tokens.setTargets([])\r\n}\r\nelse \r\n{\r\n  game.wfrp4e.utility.postTerror(value, name)\r\n}",
  "MfxWXZwaZUjGSBqw": "if (this.actor.hasCondition(\"ablaze\"))\r\n{\r\n    this.script.notification(\"Niewrażliwość na Podpalenie\")\r\n    await this.actor.hasCondition(\"ablaze\")?.delete()\r\n}",
  "MfxzwJz2o9ho2hOM": "return args.skill?.name == \"Rzemiosło (Aptekarstwo)\";",
  "mGHKBkDp4omSaBlD": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\n      \"dim\": 20,\n      \"bright\": 10,\n      \"angle\": 360,\n      \"alpha\": 0.4,\n      \"animation\": {\n          \"speed\": 3,\n          \"intensity\": 3,\n          \"type\": \"torch\",\n      },\n      \"color\": \"#ffcc66\",\n  }}));",
  "mgLGN1XPzPE4dReN": "args.fields.slBonus--;",
  "MgMMoC4Umpg7fmNI": "// Apply changes when the mask is worn\n\nif (args.equipped) {  \n  this.actor.createEmbeddedDocuments(\"ActiveEffect\", [this.item.effects.contents[1]?.convertToApplied()])  \n  this.script.message(`${this.actor.name} dons the <strong>${this.item.name}</strong>. <br>\n      They cannot cast Spells or pray for Blessings and Miracles.<br>\n      If they wear the mask for more than an hour or benefit from any of its effects, they are exposed to @Corruption[moderate]{Moderate Corruption}. \n      `,\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \n}\n\n// Notify of lingering effects when mask is removed\nelse if (!args.equipped)\n{\n    await this.item.effects.contents[0].delete();\n    await this.item.update({name : this.item.name += \" (Used)\"})\n    this.script.message(`<strong>${this.item.name}</strong> on ${this.actor.name} has been taken off and loses its properties. However, the effects last for [[1d10+4]] days, after which they should be manually removed.`, \n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\n    )\n    \n}\n\n\n\n",
  "MgTqCMRjxhezT73T": "return args.fields.hitLocation == \"head\" && args.weapon?.system.properties.qualities.pummel",
  "MgZreqq3Jua10c8s": "return ![\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"].includes(args.characteristic)",
  "Mhb67xufvA9uWO21": "let actorSize = game.wfrp4e.config.actorSizeNums[args.actor.details.size.value]\r\nlet attackerSize = game.wfrp4e.config.actorSizeNums[args.attacker.details.size.value]\r\n\r\nif (attackerSize > actorSize)\r\n{\r\n   args.actor.addCondition(\"prone\")\r\n   this.script.message(`<strong>Atak Ogonem</strong>: ${args.actor.prototypeToken.name} otrzymuje Stan @Condition[Powalenie]`);\r\n}",
  "MI2GgNi3fZtUCtQD": "return [\"int\", \"wp\"].includes(args.characteristic)",
  "MIhYSuJ6MI9B65UT": "let specification = Number(this.item.specification.value) || 1;\nargs.actor.system.status.wounds.max += Math.floor(args.actor.system.status.wounds.max * 0.3 * specification);\nargs.actor.system.status.carries.max -= Math.floor(args.actor.system.status.carries.max * 0.1 * specification);\nargs.actor.system.details.price.gc += Math.floor(args.actor.system.details.price.gc * 0.2 * specification);",
  "Mir4FMHQRdVqazAF": "let actorSize = game.wfrp4e.config.actorSizeNums[args.actor.details.size.value]\r\nlet attackerSize = game.wfrp4e.config.actorSizeNums[args.attacker.details.size.value]\r\n\r\nif (attackerSize > actorSize)\r\n{\r\n   let msg = `<b>Atak Językiem</b>: ${args.actor.prototypeToken.name} otrzymuje Stan @Condition[Pochwycenie]`;\r\n   await args.actor.addCondition(\"entangled\");\r\n   if (actorSize <= 2)\r\n   {\r\n       msg += `oraz Stan @Condition[Związany Walką]`;\r\n   }\r\n   this.script.message(msg, {speaker : {alias: args.attacker.prototypeToken.name}})\r\n}",
  "mJ9eMPub4epJSf00": "return args.weapon?.system.qualities.value.find(i => i.name == \"shield\") && this.actor.attacker",
  "MJB6WbZSF6Briz30": "return args.item?.name == game.i18n.localize(\"NAME.Leadership\")",
  "MkEcdViivk7abf1x": "args.actor.flags.meleeDamageIncrease += 1",
  "MKxYbHOrv0UuA7JB": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"average\"}, appendTitle : \" - Wounded\"})\n                            await test.roll();\n                            if (test.failed)\n                            {\n                                fromUuid(\"Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb\").then(disease => {\n                                    this.actor.createEmbeddedDocuments(\"Item\", [disease.toObject()])\n                                    this.script.scriptNotification(\"Gained \" + disease.name)\n                                })\n                            }",
  "mlulnXQo8XU8vKLD": "if (isNaN(parseInt(this.item.system.specification.value)))\n{\n    let value = await ValueDialog.create({tetx : \"Enter Grim value\", title : this.effect.name});\n    if (value)\n    {\n     this.item.updateSource({\"system.specification.value\" : value});\n    }\n}",
  "MMv2B8TH7jxNCtdl": "let actor = this.actor;\n                            let effect = this.effect;\n                            let bleedingAmt;\n                            let bleedingRoll;\n                            let msg = \"\"\n\n                            let damage = effect.conditionValue;\n                            let scriptArgs = {msg, damage};\n                            await Promise.all(actor.runScripts(\"preApplyCondition\", {effect, data : scriptArgs}))\n                            msg = scriptArgs.msg;\n                            damage = scriptArgs.damage;\n                            msg += await actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne : false, suppressMsg : true})\n\n                            if (actor.status.wounds.value == 0 && !actor.hasCondition(\"unconscious\"))\n                            {\n                                await actor.addCondition(\"unconscious\")\n                                msg += \"<br>\" + game.i18n.format(\"BleedUnc\", {name: actor.prototypeToken.name })\n                            }\n\n                            if (actor.hasCondition(\"unconscious\"))\n                            {\n                                bleedingAmt = effect.conditionValue;\n                                bleedingRoll = (await new Roll(\"1d100\").roll()).total;\n                                if (bleedingRoll <= bleedingAmt * 10)\n                                {\n                                    msg += \"<br>\" + game.i18n.format(\"BleedFail\", {name: actor.prototypeToken.name}) + \" (\" + game.i18n.localize(\"Rolled\") + \" \" + bleedingRoll + \")\";\n                                    await actor.addCondition(\"dead\")\n                                }\n                                else if (bleedingRoll % 11 == 0)\n                                {\n                                    msg += \"<br>\" + game.i18n.format(\"BleedCrit\", { name: actor.prototypeToken.name } ) + \" (\" + game.i18n.localize(\"Rolled\") + bleedingRoll + \")\"\n                                    await actor.removeCondition(\"bleeding\")\n                                }\n                                else\n                                {\n                                    msg += \"<br>\" + game.i18n.localize(\"BleedRoll\") + \": \" + bleedingRoll;\n                                }\n                            }\n\n                            await Promise.all(actor.runScripts(\"applyCondition\", {effect, data : {bleedingRoll}}))\n                            if (args.suppressMessage)\n                            {\n                                let messageData = game.wfrp4e.utility.chatDataSetup(msg);\n                                messageData.speaker = {alias: this.effect.name}\n                                messageData.flavor = this.effect.name;\n                                return messageData\n                            }\n                            else\n                            {\n                                return this.script.message(msg)\n                            }\n                            ",
  "MMx8f5uJ15XOgJGg": "return args.skill?.name !== game.i18n.localize(\"NAME.Row\") && args.skill?.name !== game.i18n.localize(\"NAME.Swim\") && !args.skill?.name.includes(game.i18n.localize(\"NAME.Sail\"));",
  "MnqQkXVp20Lw84I1": "let test = await this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"difficult\"}})\nawait test.roll();\nif (test.failed)\n{\n    this.script.message(await this.actor.applyBasicDamage(3, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true}))\n}",
  "MnXny8SCh6OceJc9": "return args.characteristic == \"int\"",
  "MOZn375tGD2060cC": "const diff = foundry.utils.diffObject(this.item.toObject(), args.data);\nif (args.data?.system?.APdamage?.head > this.item.system.APdamage.head) {\n  const result = await game.wfrp4e.tables.rollTable('armet-damage');\n  this.script.message(result.result);\n  if (result.total > 5) \n    delete args.data.system.APdamage.head;\n}",
  "Mp8UjuCLa9jdzhBS": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\n\nif (test.failed)\n{\n    if (!this.actor.hasCondition(\"fatigued\"))\n    {\n        await this.actor.addCondition(\"fatigued\");\n    }\n    else\n    {\n        await this.actor.addCondition(\"blinded\");\n        await this.actor.addCondition(\"deafened\");\n    }\n    \n    if (((this.actor.hasCondition(\"blinded\").conditionValue || 0) + (this.actor.hasCondition(\"deafened\").conditionValue || 0)) > this.actor.system.characteristics.i.bonus)\n    {\n        await this.actor.addCondition(\"unconscious\");        \n    }\n}",
  "mPxmCsXYirAIT913": "let key = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.characteristics, this.effect.img), 1, \"Wybierz Cechę\");\r\n\r\nthis.effect.updateSource({changes : [{key : `system.characteristics.${key[0].id}.modifier`, mode : 2, value : 10}]})",
  "mr8qm5Bg6k1idZ6Q": "return args.item?.name == `${game.i18n.localize(\"NAME.Play\")} (${game.i18n.localize(\"SPEC.Lute\")})`",
  "mRvLsSVxNyt8LVZb": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.GRRN3XAKIpEVCY7z\")\r\nlet data = item.toObject();\r\ndata.name += \" (Do ustalenia)\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "MSJWJEUrX7ZmMvAD": "return !(args.skill?.name.includes(game.i18n.localize(\"NAME.Ranged\")) || args.item?.isRanged || args.item?.name == game.i18n.localize(\"NAME.Charm\"))",
  "Msygc7oQQPB5fw0b": "let test = this.effect.sourceTest;\r\nif (test.failed && (test.result.roll % 11 == 0 || test.result.roll == 100))\r\n{\r\n\tlet points = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n\tgame.dice3d?.showForRoll(points)\r\n\tthis.actor.update({\"system.status.corruption.value\" : this.actor.system.status.corruption.value + points.total})\r\n\tthis.script.message(`Otrzymane punkty Zepsucia: ${points.total} `);\r\n}\r\nelse \r\n{\r\n\tlet points = this.effect.sourceTest.result.overcast.usage.other.current;\r\n\tthis.actor.update({\"system.status.corruption.value\" : this.actor.system.status.corruption.value - points})\r\n\tthis.script.message(`Utracone punkty Zepsucia: ${points} `);\r\n}",
  "mT7PDcjF3cJTDbjR": "args.actor.system.details.move.value -= 1;\nargs.actor.system.status.carries.max *= 1.25;",
  "mTnmPcjWmvScIBWY": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) || args.type == \"channelling\"",
  "mV4Tmc0yfpL09KV7": "args.actor.addCondition(\"entangled\")",
  "MwUzyAgd0yPnmZCH": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.klCJX0mNpXYH5AIx\")\r\nlet data = item.toObject();   \r\ndata.name = data.name.replace(\"x\", \"Nieznajomi\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "mXvtf3qhJjshpopX": "return [\"weapon\", \"cast\", \"channelling\"].includes(args.type)",
  "Myl1Ishu9GBraYUZ": "this.actor.removeCondition(\"bleeding\")",
  "mYL4i1vNlMl4vFYy": "return args.skill?.name != game.i18n.localize(\"NAME.Perception\") && args.skill?.name != game.i18n.localize(\"NAME.Track\");",
  "mziJBUYcsrhkdcCJ": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{  \r\n    this.actor.addCondition(\"prone\")\r\n}",
  "N2MeOlf0GjPiRcSb": "let test = await this.actor.setupCharacteristic(\"dex\", {context : {failure : \"Upuszczenie Przedmiotu\"}})\r\nawait test.roll();",
  "n5RJqJL9fdRIxkuN": "if (this.actor.system.status.advantage.value > 0)\r\n{\r\n    await this.actor.modifyAdvantage(-1);\r\n    this.script.notification(\"Zmniejszono Punkty Przewag\")\r\n}\r\nelse \r\n{\r\n    return this.script.notification(\"Niewystarczająca Liczba Punktów Przewag!\", \"error\")\r\n}\r\n\r\nlet test = await this.actor.setupTrait(this.item)\r\nawait test.roll();",
  "n5wowuDE8Dz1uBZn": "let damage = this.effect.sourceActor.characteristics.int.bonus + 6;\nif (this.actor.has(game.i18n.localize(\"NAME.Undead\")) || this.actor.has(game.i18n.localize(\"NAME.Daemonic\"))) { \n   damage += 6\n}\nthis.script.scriptMessage(await this.actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}));\n\nlet test = await this.actor.setupCharacteristic(\"int\", {fields : {difficulty : \"average\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) {\n\tthis.actor.addCondition(\"stunned\");\n}",
  "N7nGncsPrTz2ZbDA": "return !args.context.dodge || !this.actor.isMounted",
  "N8hA6ysHCTlLd8Kj": "let characteristics = {\r\n    \"ws\" : 0,\r\n    \"bs\" : 0,\r\n    \"s\" : 0,\r\n    \"t\" : 5,\r\n    \"i\" : 15,\r\n    \"ag\" : 0,\r\n    \"dex\" : 10,\r\n    \"int\" : 15,\r\n    \"wp\" : 15,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [\"Splatanie Magii\", \"Opanowanie\", \"Unik\", \"Występy (Gawędziarstwo)\", \"Intuicja\", \"Język (Magiczny)\", \"Wiedza (Magia)\", \"Percepcja\"]\r\nlet skillAdvancements = [5, 15, 10, 10, 15, 10, 10, 20]\r\nlet talents = [\"Magia Tajemna (Dowolna Tradycja)\", \"Magia Prosta\", \"Percepcja Magiczna\"]\r\nlet trappings = [\"Broń ręczna\", \"Kostur\", \"Rytualna szata zawierająca wiele ornamentów i zdobień\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        items.push({name : trapping, type : \"trapping\", \"system.trappingType.value\" : \"clothingAccessories\"})\r\n        //ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "N9kA46ZQ9LiRjy6T": "return args.skill?.name == game.i18n.localize(\"NAME.Haggle\") || args.skill?.name == game.i18n.localize(\"NAME.Gossip\");",
  "Na7Nanl9YmxZlTo7": "return args.type != \"cast\" && args.type != \"channelling\"",
  "naF5EWr1CBkYRZTK": "if (args.opposedTest?.attackerTest?.item?.system?.isRanged) \r\n{\r\n    let choice = await foundry.applications.api.DialogV2.confirm({window: {title : this.item.name}, content : `<p>Zniwelować Obrażenia dzięki: <strong>${this.effect.name}</strong>?</p>`})\r\n\r\n    if (choice)\r\n    {\r\n        args.abort = `<strong>${this.effect.name}</strong>: Obrażenia Zniwelowane`\r\n    }\r\n}",
  "ncIjDE6TFx88IQA1": "return args.skill?.name == game.i18n.localize(\"NAME.Climb\") || args.skill?.name == game.i18n.localize(\"NAME.Athletics\");",
  "nCWAflBj7Si2BI1Q": "if (args.item.type == \"spell\" && args.item.system.lore.value != \"petty\")\n{\n    args.item.cn.value = Math.max(4, args.item.cn.value * 2)\n}",
  "nD2QVg3DrPK3foMf": "args.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), { fields: { difficulty: \"average\" } }).then(async test => {\r\n      await test.roll();\r\n      if (test.failed) {\r\n        await args.actor.addCondition(\"bleeding\")\r\n        await args.actor.addCondition(\"entangled\")\r\n      }\r\n    })",
  "NdquQqyuOkGCj8Uo": "let darkvision = await fromUuid(\"Compendium.wfrp4e-core.items.Item.JQa5DLnTs2SEzRrc\")\r\nlet fear = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\r\nlet acutesense = await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")\r\nfear = fear.toObject();\r\nfear.system.specification.value = 1;\r\nacutesense = acutesense.toObject();\r\nacutesense.name += \" (Węch)\";\r\nthis.actor.createEmbeddedDocuments(\"Item\", [darkvision, fear, acutesense], {fromEffect : this.effect.id})",
  "NDvNGATDM2xPFJK0": "brokenbone = await fromUuid(\"Compendium.wfrp4e-core.items.hCadFsTRvLN9faaY\")\r\nteeth = await fromUuid(\"Compendium.wfrp4e-core.items.fBcZhOBn8IpoVqQ1\")\r\ntongue = await fromUuid(\"Compendium.wfrp4e-core.items.rkJA1DlK51QuRlJy\")\r\nbrokenbone = brokenbone.toObject();\r\nteeth = teeth.toObject();\r\ntongue = tongue.toObject();\r\n\r\n\r\nlet roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nroll.toMessage(this.script.getChatData({flavor : \"Utrata Zębów\"}))\r\n\r\nteeth.system.location.value = `${roll.total} ${teeth.system.location.value}`\r\nbrokenbone.system.location.value = \"Szczęka\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [brokenbone, teeth, tongue])\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"vhard\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"unconscious\")\r\n}",
  "neaaVy6D6tfcst5P": "args.fields.slBonus += this.actor.characteristics.i.bonus;\r\n",
  "nEaF3jbCiVYD8jia": "return args.skill?.name != game.i18n.localize(\"NAME.Charm\") && !args.skill?.name.includes(game.i18n.localize(\"NAME.Lore\"));",
  "NEKLTgJJsayC7tpF": "return [\"ws\", \"ag\"].includes(args.characteristic);",
  "ngMm7SgtVqVovFJG": "if (args.test.result.critical && args.test.result.critical != \"Total Power\")\r\n{\r\n   args.test.result.other.push(`<a data-action=\"clickTable\" class=\"action-link critical\" data-modifier=\"20\" data-table = \"crit${args.test.result.hitloc.result}\"><i class=\"fas fa-list\"></i> Bonecrusher Critical (+20)</a> (only if Critical Cast selected)`)\r\n}",
  "nGTxNWBUBgTr87wU": "if (args.opposedTest.result.differenceSL >= 0 && args.opposedTest.result.differenceSL <= 2 && args.opposedTest.result.winner == \"attacker\")\r\n{ \r\n    this.script.message(`Staje się zatrzymany w zbroi lub ciele przeciwnika. See @UUID[${this.item.uuid}]{${this.item.name}}.`, {speaker : {alias : this.item.name}, blind: true, whisper : ChatMessage.getWhisperRecipients(\"GM\")});\r\n}\r\n    ",
  "nHJdlqbOP0ECgywb": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.CnydL8p3PVAuF98w\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "NI3ZzIAlpQfVSjvf": "if (isNaN(parseInt(this.item.system.specification.value)))\r\n{\r\n    let value = await ValueDialog.create({text : \"Ustal Poziom Strachu\", title : this.effect.name});\r\n    if (value)\r\n    {\r\n     this.item.updateSource({\"system.specification.value\" : value});\r\n    }\r\n}",
  "nIOeK0BrtdZeZW8X": "console.log(\"SKILL\", this)\n\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"challenging\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\n\nlet rollD10 = await new Roll(\"1d10\").roll()\nrollD10.toMessage(this.script.getChatData())\n\n\nif (test.succeeded)\n{\n  //...\n}\nelse if (test.failed)\n{\n  //...\n}\n",
  "njPP9wDAsdh4WHIj": "if (args.totalWoundLoss > 0 && [\"trait\", \"weapon\"].includes(args.opposedTest.attackerTest.item?.type))\r\n{\r\n     this.script.message(`<b>Infekcja: ${args.actor.name}</b> musi zdać <b>Prosty (+40) Test Odporności</b> lub otrzyma @UUID[Compendium.wfrp4e-core.items.kKccDTGzWzSXCBOb]{Ropiejącą Ranę}`, {whisper: ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "Nk6qAalTmc6UI2XQ": "const message = game.messages.get(args.options.message);\nconst sl = message.system.sl;\nthis.effect.setFlag(\"wfrp4e-archives3\", \"sl\", sl);",
  "nkbTnaeBpthyhw4J": "let fortunePoints = this.effect.sourceTest.result.overcast.usage.other.current\r\nlet current = this.actor.status.fortune.value\r\n\r\nthis.actor.update({\"system.status.fortune.value\" : fortunePoints + current})\r\n\r\nthis.script.message(`<b>${this.actor.prototypeToken.name}</b>: Punkty Szczęścia zwiększone z ${current} do ${fortunePoints + current}`)",
  "nkdKBJ8ItqWiRAWL": "// Apply changes when the mask is worn\n\nif (args.equipped) {  \n  this.actor.createEmbeddedDocuments(\"ActiveEffect\", [this.item.effects.contents[1]?.convertToApplied()])  \n  this.script.message(`${this.actor.name} dons the <strong>${this.item.name}</strong>. <br>\n        They gain +50 to Swim Tests and can breathe underwater.<br>\n        If they wear the mask for more than an hour or benefit from any of its effects, they are exposed to @Corruption[moderate]{Moderate Corruption}. \n        `,\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \n}\n\n// Notify of lingering effects when mask is removed\nelse if (!args.equipped)\n{\n    await this.item.effects.contents[0].delete();\n    await this.item.update({name : this.item.name += \" (Used)\"})\n    this.script.message(`<strong>${this.item.name}</strong> on ${this.actor.name} has been taken off and loses its properties. However, the effects last for [[1d10+4]] days, after which they should be manually removed.`, \n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\n    )\n    \n}\n",
  "NkqtQaLEGYst0PUO": "if (this.actor.has(game.i18n.localize(\"NAME.MagicResistanceTalent\"), \"talent\")) \r\n    return\r\n\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.eowbsW6oHGSNJmxV\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "nkSmu7v9WiAaK4vq": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Tailor)';\nconst difficulty = 'easy';\nconst target = 20;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n      \n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "nlQA0shW8FCXjY7u": "return args.type != \"cast\" || args.item.lore.value != \"fire\"",
  "NMZ3Fb164tUfwChF": "return !args.data.targets[0]?.actor?.hasCondition(\"entangled\")",
  "NnA4zpuO6iUXKhH7": "if ((args.opposedTest.attackerTest.item && args.opposedTest.attackerTest.item.isMelee) || (args.opposedTest.attackerTest.item && !args.opposedTest.attackerTest.item.name.includes(game.i18n.localize(\"NAME.Ranged\"))))\r\n{\r\n    let AP = parseInt(this.effect.sourceTest.result.SL)\r\n    args.modifiers.ap.value += AP;\r\n    args.modifiers.ap.magical += AP;\r\n    args.modifiers.ap.details.push(`${this.effect.name} (${AP})`)\r\n}",
  "NnDq4miIPNEtZUWb": "args.test.result.critModifier = args.test.result.critModifier || 0;\nargs.test.result.critModifier += 20;\n\nif (args.test.result.critical)\n{\n    args.test.result.critical = `${game.i18n.localize(\"Critical\")} (+${args.test.result.critModifier})`\n}",
  "nNwAFEURKlFhPcvA": "CorruptionMessageModel.createCorruptionMessage(\"minor\", this.script.getChatData());",
  "NNytXz5XFPrEF6dw": "if (args.opposedTest.result.hitloc.value == this.item.system.location.key && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 1);\r\n}\r\n    ",
  "Np25JqEiaoqerEk8": "if (test.result.tables.miscast) {\r\n  test.result.other.push(`<b>${this.effect.name}:</b> You may reroll any result from the @Table[waaagh-miscast]{Waaagh! Miscast Table}.`);\r\n}",
  "Np8P8IPT2GYlrh6G": "return args.skill?.name !== `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})` && args.type !== \"channelling\";",
  "NQSvFWhmBQAyx5Zz": "return args.item?.isRanged",
  "nqWu0ZplxzRiUEAg": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\n\n// Kind of insane but whatever\nlet opposedResult = test.opposedMessages[0]?.system.opposedHandler?.resultMessage?.system.opposedTest?.result\n\nreturn opposedResult?.winner == \"attacker\";",
  "NrVFrIXM8GnIbojv": "args.item.system.damage.value = `SB + ${this.actor.system.characteristics.fel.bonus}`;",
  "nSXzktHyNjGUXjaw": "return args.item?.system.isRanged",
  "NTFpkiGyBpOtrV0s": "if (this.actor.uuid == this.effect.sourceActor.uuid)\r\n{\r\n\treturn;\r\n}\r\n\r\nif (this.actor.has(\"Cold Blooded\") && !this.actor.hasSystemEffect(\"nausea\")) { \r\n  let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {appendTitle : `- ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\r\n  let myRoll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n  let duration = myRoll.total\r\n  this.actor.addSystemEffect(\"nausea\");\r\n  this.script.scriptMessage(`Nausea symptom added, duration : ${duration} hours`);\r\n}\r\n}\r\nreturn false;",
  "nuIpPD4uaZRuJni8": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.qdMbxW09FUoYBzmB\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "nvrFhHHVq3KzirlR": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"))\r\n",
  "NX9fApO15NQuTipW": "return [\"ws\", \"bs\"].includes(args.characteristic)",
  "nxNqWmmF6mJTnrLo": "return args.weapon?.system.usesHands.includes(this.item.system.location.key);",
  "nYtAjSArsNbrU2ob": "if ([\"ag\", \"i\", \"int\"].includes(args.characteristic))\r\n{\r\n    args.fields.modifier -= 10;\r\n}\r\nelse if ([\"wp\"].includes(args.characteristic))\r\n{\r\n    args.fields.modifier += 10;\r\n}",
  "nzh8d46l1ikhkz8Q": "return (args.type == \"weapon\" && (args.item.system.weaponGroup.value == \"blackpowder\" || args.item.system.weaponGroup.value == \"engineering\")) || (args.type == \"cast\" && args.item.system.lore.value == \"fire\")",
  "o1zD8mej9TWKNxUq": "args.fields.slBonus -= 1;",
  "o3JUBKLvE6bBxK2n": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), { fields: { difficulty: \"average\" } })\r\nawait test.roll();\r\nif (test.failed) \r\n{\r\n    await this.actor.addCondition(\"prone\")\r\n    let injury = await fromUuid(\"Compendium.wfrp4e-core.items.ZhMADOqoo0y8Q9bx\");\r\n    injury = injury.toObject()\r\n    let toes = Math.clamped(Math.abs(test.result.SL) + 1, 1, 5)\r\n    injury.system.location.key = this.item.system.location.key[0] + injury.system.location.value\r\n    if (injury.system.location.key[0] == \"r\")\r\n    {\r\n        injury.system.location.value = `${toes} Right ${injury.system.location.value}s`\r\n    }\r\n    else if (injury.system.location.key[0] == \"l\")\r\n    {\r\n        injury.system.location.value = `${toes} Left ${injury.system.location.value}s`\r\n    }\r\n    foundry.utils.setProperty(injury, \"system.wfrp4e.count\", toes)\r\n    this.actor.createEmbeddedDocuments(\"Item\", [injury])\r\n}",
  "O45vpR4jDbQQnmvJ": "let items = [];\n\nlet etiquette = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.sYbgpSnRqSZWgwFP\")).toObject();\netiquette.name += \" (Followers of Khorne)\";\n\nitems.push(etiquette);\n\nlet animosity = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.Q2MCUrG2HppMcvN0\")).toObject();\nanimosity.name = animosity.name.replace(\"(Target)\", \"(Followers of Slaanesh)\");\n\nitems.push(animosity);\n\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect : this.effect.id});\n",
  "O7lXFZLrLdFaShGR": "args.context.catfall = true;",
  "o88xuUConwt0vFLw": "let points = this.effect.sourceTest.result.overcast.usage.other.current;\r\n\r\nthis.actor.update({\"system.status.fortune.value\" : this.actor.system.status.fortune.value + points});\r\n\r\nthis.script.message(`Otrzymane Punkty Szczęścia: ${points}`)",
  "O9fc0hLHdkTgSuLg": "let bite = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\r\nlet venom = await fromUuid(\"Compendium.wfrp4e-core.items.gFkRm9wS65qe18Xv\")\r\nlet biteData = bite.toObject();\r\nlet venomData = venom.toObject();\r\n\r\nbiteData.system.specification.value = 3 - this.actor.characteristics.s.bonus;\r\nvenomData.system.specification.value = \"Średni\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [biteData, venomData], {fromEffect : this.effect.id})",
  "Oa9FmLXRRZRpLrrq": "let test = await this.actor.setupTrait(this.item); \r\nawait test.roll();",
  "OBF6r2CsMOEokAsS": "args.weaponProperties.damaging = true;\nargs.weaponProperties.impale = true;",
  "obIXhQXKFyyQoNNV": "this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {appendTitle: ` - ${this.effect.name}`, fields: { difficulty: \"average\" } }).then(async test => {\r\n    await test.roll()\r\n    if (test.failed) {\r\n        this.actor.modifyWounds(-1);\r\n        this.script.message(\"Otrzymano 1 Ranę\")\r\n    }\r\n})",
  "ocBW3osTFnb5JCfe": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MVI0lXcg6vvtooAF\")\nlet data = item.toObject()\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n",
  "OCFrGXAYfo9OYnhc": "return args.item?.system.magicMissile?.value || args.item?.system.attackType",
  "OcQe0zfksf1DCJYe": "args.actor.system.characteristics.s.value += 30\nargs.actor.system.characteristics.t.value += 30\n\nargs.actor.system.characteristics.s.bonus += 3\nargs.actor.system.characteristics.t.bonus += 3\n\nif (args.actor.system.characteristics.s.value > 100)\n{\n   args.actor.system.characteristics.s.value = 100\n   args.actor.system.characteristics.s.bonus = 10\n}\n\nif (args.actor.system.characteristics.t.value > 100)\n{\n   args.actor.system.characteristics.t.value = 100\nargs.actor.system.characteristics.t.bonus = 10\n}",
  "oDNfCNyt5KaUYmg2": "if(args.opposedTest.result.winner == \"defender\")\r\n{\r\n    let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n    let msg = `Rzut: ${roll}.`\r\n    if (roll >= 7)\r\n    {\r\n          msg = `Atak uderza z PS w wysokości: ${roll - 6}.`\r\n    }\r\n    this.script.message(msg, {blind: true,  whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "OeCgX3hIsfLfmGvC": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Perception\"))\r\nawait test.roll();\r\nif (test.succeeded)\r\n{\r\n    this.actor.removeCondition(\"surprised\");\r\n}",
  "OeKeQAAcJhdI4Qky": "if (this.actor.hasCondition(\"stunned\") || this.actor.hasCondition(\"unconscious\"))\r\n{\r\n\tthis.script.notification(\"Przerwany!\");\r\n\tawait this.effect.update({\"disabled\" : true})\r\n}",
  "oEsUsI74yGTZ9CwU": "return args.item?.name == game.i18n.localize(\"NAME.CharmAnimal\")",
  "OEy2lxvic37dRBEt": "let filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = await ItemDialog.createFromFilters(filters, 3, {text :\"Wybierz 3 Zaklęcia Proste\"})\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"\"\r\n    }\r\n]\r\n\r\nlet arcane = await ItemDialog.createFromFilters(filters, 3, {text :\"Wybierz 3 Zaklęcia Magii Tajemnej\"})\r\n\r\nlet items = petty.concat(arcane).map(i => i.toObject())\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "ofddAHvzn1xUueSG": "args.AP.head.value -= tinDifference(args.AP.head.layers)\nargs.AP.body.value -= tinDifference(args.AP.body.layers)\nargs.AP.lArm.value -= tinDifference(args.AP.lArm.layers)\nargs.AP.rArm.value -= tinDifference(args.AP.rArm.layers)\nargs.AP.rLeg.value -= tinDifference(args.AP.rLeg.layers)\nargs.AP.lLeg.value -= tinDifference(args.AP.lLeg.layers)\n\nfunction tinDifference(layers)\n{ \n   let metalAP = layers.filter(i => i.metal).reduce((prev, current) => prev + current.value, 0)\n\n   let tinAP = layers.filter(i => i.metal).reduce((prev, current) => prev + Math.max(0, current.value - 2), 0)\n\n   return metalAP - tinAP;\n}",
  "Ofn6vDbP3fZ4UlSc": "args.fields.modifier += -20;\r\n        ",
  "OFViRemr1cpnO3af": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"difficult\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (!test.succeeded)\n{\n    await this.actor.addCondition(\"bleeding\");\n}",
  "oGdsGPgJWcyWkiWl": "this.actor.addCondition(\"broken\")\r\n\r\nif (this.actor.has(game.i18n.localize(\"NAME.Undead\")))\r\n{\r\n    this.script.message(await this.actor.applyBasicDamage(this.effect.sourceTest.result.damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true}))\r\n}",
  "ogJBAXTXyhTqACPO": "return args.item?.system.attackType != \"melee\"",
  "OgSI0Z6SHjYuqKIz": "let blows = this.item.getFlag(\"wfrp4e\", \"blows\") || 0\r\nlet difficulties = Object.keys(game.wfrp4e.config.difficultyLabels)\r\n\r\nblows = Math.clamped(blows, 0, difficulties.length - 1)\r\nif (this.item.system.protects[args.opposedTest.result.hitloc.value])\r\n{\r\n    let difficulty = difficulties[blows];\r\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields: {difficulty}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test => {\r\n        await test.roll();\r\n        if (test.failed)\r\n        {\r\n            this.script.message(`${this.actor.name}: musi wydostać się z walki i uciekać, dopóki nie zda <strong>Wymagającego (+0) Testu Siły Woli</strong>`);\r\n            this.item.setFlag(\"wfrp4e\", \"failedCool\", true);\r\n        }\r\n    })\r\n}",
  "OGX4BneaYAnV25TO": "let chatData = { whisper: ChatMessage.getWhisperRecipients(\"GM\") }\r\nlet message = \"\"\r\n\r\nlet wounds = foundry.utils.duplicate(this.actor.status.wounds)\r\nlet regenRoll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nlet regen = regenRoll.total;\r\n\r\nif (wounds.value >= wounds.max)\r\n    return\r\n\r\nif (wounds.value > 0) \r\n{\r\n    wounds.value += regen\r\n    if (wounds.value > wounds.max)\r\n    {\r\n        wounds.value = wounds.max\r\n    }\r\n    message += `<b>${this.actor.name}</b>: Odzyskane punkty Żywotności: ${regen}.`\r\n\r\n    if (regen == 10)\r\n    {\r\n        message += `<br>Dodatkowo zregenerowano krytyczną ranę.`;\r\n    }\r\n}\r\nelse if (regen >= 8) \r\n{\r\n    message += `<b>${this.actor.name}</b>: wylosowano ${regen} i odzyskano 1 punkt Żywotności.`;\r\n    wounds.value += 1\r\n    if (regen == 10)\r\n    {\r\n        message += `<br>Dodatkowo zregenerowano krytyczną ranę.`;\r\n    }\r\n}\r\nelse \r\n{\r\n    message += `<b>${this.actor.name}</b>: wylosowano ${regen} - brak efektu.`;\r\n}\r\n\r\nawait this.actor.update({ \"system.status.wounds\": wounds })\r\nthis.script.message(message, { whisper: ChatMessage.getWhisperRecipients(\"GM\") })",
  "oHenUKtaS3jT5xQn": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.4xF7M6ylIiGntekh\")\r\nitem = item.toObject()\r\nitem.name = this.effect.name\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})\r\n",
  "ohl803m0tUwNfKAk": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\nlet data = item.toObject();\ndata.system.specification.value = 5 - this.actor.characteristics.s.bonus\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "OicQSEVZBbqLtrcf": "let choice = await ItemDialog.create(this.actor.itemTypes.critical, (this.effect.sourceTest.result.overcast.usage.other.current || 1), \"Wybierz krytyczne rany do zagojenia (nie można zregenerować utraconych części ciała)\");\r\n\r\nthis.script.message(`Uleczono: <strong>${choice.map(i => i.name).join(`, `)}</strong>`);\r\nthis.actor.deleteEmbeddedDocuments(\"Item\", choice.map(i => i.id))",
  "OJMgS8ZQv0j4tEFf": "return [\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"].includes(args.characteristic)",
  "okr3TtzpFoefUuJS": "let item = await fromUuid('Compendium.wfrp4e-core.items.EaqlLRQigwnsEAXX')\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Obojczyk\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "okW06V9UiPC4Vcrn": "let characteristics = {\r\n    \"ws\" : 5,\r\n    \"bs\" : 0,\r\n    \"s\" : 5,\r\n    \"t\" : 5,\r\n    \"i\" : 10,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 5,\r\n    \"fel\" : 5\r\n}\r\nlet skills = [\"Opanowanie\", \"Unik\"]\r\nlet skillAdvancements = [10, 10]\r\nlet talents = [\"Bitewny Refleks\", \"Nieugięty\"]\r\nlet trappings = [\"Skórzana kurta\", \"Skórzane nogawice\", \"Skórzany hełm\", \"Broń ręczna\", \"Włócznia\", \"Tarcza\"]\r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n\r\n",
  "OMAUX1fnHyIpplul": "return ![\"fel\", \"dex\"].includes(args.characteristic)",
  "OnkEe4ISru1hjJWP": "this.actor.flags.useless[this.item.system.location.key] = true;",
  "Op88kMtimSEWlY2h": "if (this.item.system.quantity.value)\n{\n\tthis.item.system.reduceQuantity();\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\n\tactor.applyEffect({effectData : [this.item.effects.contents[1].convertToApplied()]})\n}\nelse\n{\n\tthis.script.notification(\"None left!\", \"error\")\n}",
  "oPg4se8iQRD14kmB": "let filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"weapon\"\r\n    },\r\n    {\r\n        property : \"system.weaponGroup.value\",\r\n        value : [\"twohanded\", \"polearm\"]\r\n    }\r\n]\r\n\r\nlet items = await ItemDialog.createFromFilters(filters, 1, { text : \"Wybierz odpowiednią broń drzewcową lub dwuręczną\" })\r\nitems = items.map(i => i.toObject())\r\n\r\nitems.forEach(i => i.system.equipped.value = true);\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "oqgd9G6oI1ncPYLw": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.CV9btQn09S9Fn8Jk\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id});",
  "oQI06eh8mJ9UqETO": "if (this.item.system.disabled) {\r\n  await this.effect.deleteCreatedItems();\r\n} else if (!this.actor.items.find(i => i.name === \"Stealthy\")) {\r\n  await this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.OzwDT6kzoLYeeR2d\", this.effect);\r\n}",
  "OqLKL0PiCvYH2QxW": "if (args.test.options.wallcrawler)\r\n{\r\n\tif (parseInt(args.test.result.SL) < 0 || args.test.failed)\r\n\t{\r\n\t\tif (parseInt(args.test.result.SL) < 0)\r\n\t\t{\r\n\t\t\targs.test.result.SL = \"+0\";\r\n\t\t\targs.test.result.description = game.i18n.localize(\"ROLL.MarginalSuccess\");\r\n\t\t}\r\n\t\targs.test.result.outcome = \"success\"\r\n        args.test.result.other.push(`<strong>${this.effect.name}</strong>: Minimum +0 PS`)\r\n\t}\r\n}",
  "OqxeuZfZDfm9ax6h": "this.actor.system.status.addArmour(1, {locations : \"head\", source : this.effect})",
  "OsLXutfXyQCAkhAf": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Sail';\nconst difficulty = 'average';\nconst target = 30;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n      \n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "oTXPA6rbPnYOKNmo": "let characteristics = {\r\n    \"ws\" : 35,\r\n    \"bs\" : 10,\r\n    \"s\" : 25,\r\n    \"t\" : 30,\r\n    \"i\" : 30,\r\n    \"ag\" : 25,\r\n    \"dex\" : 0,\r\n    \"int\" : 15,\r\n    \"wp\" : 35,\r\n    \"fel\" : 15\r\n}\r\nlet skills = [\"Cool\", \"Dodge\", \"Intimidate\", \"Intuition\", \"Language (Battle)\", \"Leadership\", \"Lore (Warfare)\", \"Perception\"]\r\nlet skillAdvancements = [25, 15, 25, 25, 15, 30, 20, 20]\r\n\r\nlet talents = [\"Combat Aware\", \"Combat Master\", \"Combat Reflexes\", \"Inspiring\", \"Luck\", \"Resolute\", \"Unshakable\", \"War Leader\"]\r\nlet trappings = [\"Hand Weapon\",  \"Shield\", \"Plate Breastplate\", \"Plate Bracers\", \"Plate Helm\", \"Plate Leggings\"]\r\nlet specialItems = [ \r\n    {name: \"Two Handed Weapon\", type: \"trapping\", trappingType: \"clothingAccessories\" }, \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nlet filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"weapon\"\r\n    },\r\n    {\r\n        property : \"system.weaponGroup.value\",\r\n        value : [\"twohanded\", \"polearm\"]\r\n    }\r\n]\r\n\r\nitems = items.concat(await ItemDialog.createFromFilters(filters, 1, {text: \"Choose an appropriate Polearm or Two-Handed Weapon\"}))\r\n\r\nlet ride = await foundry.applications.api.DialogV2.confirm({window : {title : \"Skill\"}, content : \"Add Chaos Steed and +20 Ride (Horse)?\"})\r\n\r\nif (ride)\r\n{\r\n    let skill = await game.wfrp4e.utility.findSkill(\"Ride (Horse)\")\r\n    skill = skill.toObject();\r\n    skill.system.advances.value = 20;\r\n    items = items.concat({name : \"Chaos Steed\", type: \"trapping\", \"system.trappingType.value\" : \"misc\"}, skill)\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nconsole.log(\">>>>>>><\", items)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "oV81zgbZsuTFG6L2": "let caster = this.effect.sourceActor;\r\n\r\nthis.actor.modifyWounds(caster.system.characteristics.fel.bonus);\r\n\r\nthis.script.message(`Uleczone Punkty Żywotności: ${caster.system.characteristics.fel.bonus}`);",
  "OvIELZLvnlN2H2uw": "args.update({light : {\n    \"dim\": 2,\n    \"bright\": 1,\n    \"alpha\": 0.5,\n    \"animation\": {\n        \"speed\": 4,\n        \"intensity\": 4,\n        \"type\": \"pulse\",\n    },\n    \"color\": \"#949bff\",\n}});",
  "oW1gtYVT5nrxDjM7": "return args.characteristic != \"ag\"",
  "oWa7RkScnl6lR5vd": "if (args.test.characteristicKey == \"wp\") \r\n{\r\n    if (args.test.failed)\r\n    {\r\n        let item = await fromUuid(\"Compendium.wfrp4e-core.items.AGcJl5rHjkyIQBPP\")\r\n        let data = item.toObject();\r\n        this.actor.createEmbeddedDocuments(\"Item\", [data])\r\n        \r\n        this.script.message(`Test Siły Woli nie powiódł się, <b>${this.actor.prototypeToken.name}</b>: otrzymano @UUID[Compendium.wfrp4e-core.items.AGcJl5rHjkyIQBPP] na [[1d10]] godzin`)\r\n    }\r\n}",
  "oWM43EdUiyHgUlfW": "if (args.test.item && args.test.item.name == game.i18n.localize(\"NAME.ConsumeAlcohol\"))\r\n    args.test.preData.canReverse = true",
  "OXoqtpOdfkURZbuL": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.yRhhOlt18COq4e1q\")\nlet data = item.toObject()\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n",
  "OxsBnnVI3Smpknpb": "if (this.actor.status.advantage.value && !this.actor.sameSideAs(this.effect.sourceActor))\r\n{\r\n    this.actor.modifyAdvantage(-1);\r\n    this.script.notification(`${this.actor.name}: utracono 1 Punkt Przewag`);\r\n}",
  "OYLqLl6vikJD8flg": "const crowd = this.effect.getFlag(\"wfrp4e\", \"crowd\") ?? 0;\r\nconst bonus = 2 + Math.floor(crowd * 0.1);\r\n\r\nargs.fields.slBonus += bonus ;",
  "Oz7pWF9mEc1pQypj": "let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nroll.toMessage({flavor : this.effect.name, speaker : {alias : this.actor.prototypeToken.name}})\r\nthis.actor.addCondition(\"stunned\", roll.total)",
  "p222EiR8RRtlPm31": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\nawait test.roll();\nreturn test.failed;",
  "P29tT1eMMdAw3CPF": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.3S4OYOZLauXctmev\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"hard\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\tthis.actor.addCondition(\"unconscious\")\r\n}",
  "p7NJB1PsY6X5q8OO": "if (this.actor.system.details.experience.current < 100) {\r\n  return this.script.notification(game.i18n.localize(\"SCRIPT.NotEnoughXP\"))\r\n}\r\n\r\nlet traits = await warhammer.utility.findAllItems(\"trait\", null, true);\r\ntraits = traits.filter(t => t.name.includes(\"Companion Trait\"));\r\n\r\nlet items = await ItemDialog.create(traits);\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\nlet expLog = foundry.utils.duplicate(this.actor.details.experience.log || []);\r\nexpLog.push({amount : 100, reason: items[0].name, spent: this.actor.details.experience.spent + 100, total: this.actor.details.experience.total, type: \"spent\"});\r\nthis.actor.update({\r\n    \"system.details.experience.spent\": this.actor.details.experience.spent + 100,\r\n    \"system.details.experience.log\": expLog\r\n  });",
  "pAgiAGyaLJY10894": "return args.skill?.name == game.i18n.localize(\"NAME.Charm\");",
  "pBMioPUtDn1mk9f5": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.5KP9sOoLSGvj9EXp\")\nlet data = item.toObject();    \nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "PBW6IZtwawNHxB6y": "return args.context.dodge && this.actor.isMounted",
  "PdClojv7yNgQpOUc": "return args.skill?.name != game.i18n.localize(\"NAME.Endurance\");",
  "pdvCwjxHI56EmxuU": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.sJ3yX1kvzu2hgNq5\")\nlet amphibious = item.toObject();\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")\nlet as = item.toObject();\nas.name += \" (Sight)\";\nawait this.actor.createEmbeddedDocuments(\"Item\", [amphibious, as], {fromEffect : this.effect.id})",
  "PeZYj8b0vedyJj00": "// This script needs to be separate because equipTransfer is off on the other effect, and thus won't execute when added to an actor\r\n\r\nlet mainEffect = this.item.effects.contents[0];\r\nif (mainEffect.name.includes(\"(Tradycja)\"))\r\n{\r\n    let choice = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.magicLores, this.item.img), 1, \"Wybierz Tradycję Magiczną\");\r\n    if (choice.length)\r\n    {\r\n        mainEffect.update({name : mainEffect.name.replace(\"Tradycja\", choice[0].name)})\r\n        this.item.update({name : this.item.name += ` (${choice[0].name})`})\r\n    }\r\n}\r\n\r\nthis.effect.delete();",
  "pG5OVokZzCRHIrwz": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.mgeiaDZXei7JBEgo\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "Pg9C6nJX5QHIdqa9": "return !args.item?.system.attackType\n",
  "Ph3TdQw1lGiFr049": "    if (!args.test.context.phantasmal && \r\n      (this.actor.isOpposing || args.test.context.defending) && \r\n      args.test.result.roll % 11 == 0 && \r\n      args.test.succeeded && \r\n      [\"Język (Magiczny)\", \"Unik\"].includes(args.test.item?.name))\r\n    {\r\n         args.test.context.phantasmal = true; // Flag so items aren't readded if test is edited\r\n         let text = `<strong>${this.effect.name}</strong>: Dodano cechy Niestabilny i Ochrona`\r\n         args.test.result.other.push(text)  \r\n        this.script.notification(text);\r\n     \r\n        let ward = await fromUuid(\"Compendium.wfrp4e-core.items.Bvd2aZ0gQUXHfCTh\")\r\n        let wardData = ward.toObject();\r\n        wardData.system.specification.value = 9;\r\n        \r\n        let unstable = await fromUuid(\"Compendium.wfrp4e-core.items.D0ImWEIMSDgElsnl\")\r\n        let unstableData = unstable.toObject();\r\n        this.actor.createEmbeddedDocuments(\"Item\", [wardData, unstableData], {fromEffect: this.effect.id})\r\n    }\r\n",
  "pHyXdPnWwoFrUA5n": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Entertain\"));",
  "PI1QNaKFeqood6d7": "if (args.attackerTest.weapon && args.defenderTest.weapon)\n{\n\n   let attackerReach = game.wfrp4e.config.reachNum[args.attackerTest.weapon.reach.value]\n   let defenderReach = game.wfrp4e.config.reachNum[args.defenderTest.weapon.reach.value]\n   \n   if (attackerReach == defenderReach)\n      attackerReach = attackerReach < 7 ? attackerReach + 1 : attackerReach\n\n   attackerReach = warhammer.utility.findKey(attackerReach, game.wfrp4e.config.reachNum)\n   defenderReach = warhammer.utility.findKey(defenderReach, game.wfrp4e.config.reachNum)\n\n  args.attackerTest.weapon.reach.value = attackerReach\n  args.defenderTest.weapon.reach.value = defenderReach\n}",
  "pj7gjxHrnrZonC6U": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.8pVzgPkgWpTJvfhG\")\nlet data = item.toObject();\ndata.name = `${data.name} (Undead, Warm-bloods)`;\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "PjOi61gB2nSYooLs": "return this.sourceActor.uuid === this.actor.uuid || !args.item?.system?.isRanged;",
  "PjRxGuUDKGmSmVDc": "fromUuid(\"Compendium.wfrp4e-core.items.EO05HX7jql0g605A\").then(item => {\r\n   item = item.toObject()\r\n   item.system.specification.value = this.actor.characteristics.ag.value\r\n   this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})\r\n})",
  "pkKpxVqRHIzywerL": "const ablaze = this.actor.hasCondition(\"ablaze\");\n\nif (ablaze) {\n    ablaze.delete();\n    this.script.notification(\"Resisted Ablaze\");\n}",
  "pLKv4moua6XhNdmA": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.1dUizIgLBgn4jICC\");\r\nlet data = item.toObject();\r\ndata.name += \" (Lasy)\";\r\nthis.actor.createEmbeddedDocuments(\"Item\", Array(this.effect.sourceTest.result.overcast.usage.other.current).fill(data), {fromEffect : this.effect.id})",
  "PmELrzD3RmF9qKkO": "if (this.item.system.specification.value == \"Rozmiar\")\r\n{\r\n    let size = this.item.specifier;\r\n    if (!size)\r\n    {\r\n        let choice = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.actorSizes, this.item.img), 1, \"Wybierz rozmiar\");\r\n        if (choice[0])\r\n        {\r\n            size = choice[0]?.name;\r\n        }\r\n    }\r\n    this.item.updateSource({\"system.specification.value\" : size, name : this.item.baseName})\r\n    this.effect.updateSource({name : this.effect.name + ` (${size})`})\r\n}",
  "PMISUsaEDBA7D3od": "// After consumption, the user gains the Magic Resistance 3 Creature Trait, \n// reducing the SL of any spell affecting it by 3. \n// This effect lasts for one hour.\nconst hasMagicResistance = this.actor.has(\"Magic Resistance\")\n\nif (hasMagicResistance === undefined) {\n  fromUuid(\"Compendium.wfrp4e-core.items.yrkI7ATjqLPDTFmZ\").then(trait => {\n    let traitItem = trait.toObject()\n    traitItem.system.specification.value = 2\n    this.actor.createEmbeddedDocuments(\"Item\", [traitItem], {fromEffect: this.effect.id})\n  })\n  this.script.message(`<p><strong>${this.actor.prototypeToken.name}</strong> has gained the Magic Resistance Trait. This effect lasts for one hour.</p>`, {whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })   \n}\n\nif (hasMagicResistance) {\n  // Multiple doses may be consumed at once, with each one adding an additional 1 to the Magic Resistance rating and increasing the duration by one hour.  \n  let msg = `<p><strong>${this.actor.prototypeToken.name}</strong> has enhanced their Magic Resistance by 1 to Rating ${parseInt(hasMagicResistance.system.specification.value)}. This effect lasts for one hour.</p>`\n\n  // Resist toxic effect\n  this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\n    fields: {difficulty: \"challenging\"}\n  }).then(async test => {\n    await test.roll()\n\n    // If they fail ...\n    if (!test.succeeded) {\n      msg += `<p>However, they begin to ooze the thick, poisonous slime that coats every Dreadmaw.  They have gained 1 Poisoned Condition now and should continue to receive an additional @Condition[Poisoned] Condition at the end of each of the round.</p>\n      <p>If they are still alive at the end of 10 rounds, the effect ends and all Poisoned Conditions gained from ${this.effect.name} are removed.</p>`\n      this.actor.addCondition(\"poisoned\", 1)\n    }\n    this.script.message(msg, {whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })\n  })\n}\n",
  "PMNjdEAusVBfam09": "return args.skill?.name === game.i18n.localize(\"NAME.Charm\");",
  "Pn5fekTbkwlr61XU": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Engineer)';\nconst difficulty = 'easy';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n      \n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "pnB9TzSEytkxk3Rb": "return this.actor.hasSystemEffect(\"infighting\")",
  "pNPjXEoQGHLKzq0r": "let talent = this.actor.has(\"Magia Tajemna (Światła)\", \"talent\")\r\nlet demon = this.actor.has(game.i18n.localize(\"NAME.Daemonic\"))\r\n\r\nif (!talent)\r\n{\r\n   await this.actor.addCondition(\"blinded\")\r\n}\r\n\r\nif (demon)\r\n{\r\n    await this.actor.addCondition(\"stunned\")\r\n}",
  "PoNnT5EqvLj2r5yf": "return args.skill?.name != game.i18n.localize(\"NAME.OutdoorSurvival\") && args.skill?.name != game.i18n.localize(\"NAME.Track\");",
  "ppc8L3WtIx6JzlAd": "if (args.equipped) {\r\n  await this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.mDgEMOoJpi8DkRYb\", this.effect);\r\n} else {\r\n  this.effect.deleteCreatedItems()\r\n}",
  "pPV9oEydXb7oi6jX": " if (args.totalWoundLoss > 0)\n {\n    args.actor.addCondition('ablaze')\n }",
  "pq1YQffxtOcqCRTn": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {appendTitle: ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (!test.succeeded)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "pqQkeUVpuZ0jOKnZ": "const tables = [\r\n  game.wfrp4e.tables.findTable(\"mutatephys\"),\r\n  game.wfrp4e.tables.findTable(\"mutatephys\", \"Khorne\"),\r\n];\r\n\r\nif (!tables.length) {\r\n  return ui.notifications.error(\"Mutation table not found, please ensure a table with the `mutatephys` key is imported in the world.\");\r\n}\r\n\r\nconst values = {}\r\n\r\nlet i = 0;\r\nfor (const table of tables) {\r\n  values[i] = table.name;\r\n  i++;\r\n}\r\n\r\nconst key = await ValueDialog.create({}, null, values);\r\nconst table = tables[key];\r\n\r\nconst results = (await table.drawMany(2)).results;\r\nconst uuids = results.map(result => `Compendium.${result.documentCollection}.${result.documentId}`);\r\n\r\nawait this.actor.addEffectItems(uuids, this.effect);\r\nthis.script.notification(\"Rolled and applied mutations\");",
  "pR4Q2OnPxXtwRVli": "let criticals = this.actor.itemTypes.critical;\r\n\r\nif (criticals.length)\r\n{\r\n    this.script.notification(\"Nie może doznać krytycznych ran\");\r\n    this.actor.deleteEmbeddedDocuments(\"Item\", criticals.map(i => i.id))\r\n}\r\n\r\nif (getProperty(args.data, \"system.status.wounds.value\") == 0)\r\n{\r\n    this.script.notification(`Uśpiony na ${Math.ceil(CONFIG.Dice.randomUniform() * 10)} Rund`)\r\n}",
  "PsO7aTdELJt35eHP": "let morale = await new Roll(\"-1d10\").roll({allowInteractive : false});\r\nlet mood = await new Roll(\"-2d10\").roll({allowInteractive : false});\r\n\r\nmorale.toMessage(this.script.getChatData({flavor : \"Morale\"}));\r\nmood.toMessage(this.script.getChatData({flavor : \"Manann's Mood\"}));\r\n\r\nawait this.actor.system.status.morale.addEntry(\"Albatross Died\", morale.total)\r\nawait this.actor.system.status.mood.addEntry(\"Albatross Died\", mood.total);\r\n\r\nthis.effect.delete();",
  "PVjaKAHTKDA0rA9J": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\nawait test.roll();",
  "pvk5OhTNdVgwXoUa": "args.fields.successBonus += 2;",
  "pVSnn4Zw6y1EBDhv": "args.actor.system.details.man -= 1;\nargs.actor.system.details.move.value -= 1;",
  "pvTcazVvW4v04otW": "if (args.totalWoundLoss > 0) {\n    await 0rgs.actor.addCondition(\"poisoned\", 2)\n}",
  "PwqTmw7rsG8hzqCS": "if (args.test.result.critical && args.test.result.roll % 10 == 0) \n{\n    game.wfrp4e.tables.findTable(\"knuckleduster-diseases\").roll().then(roll => {\n      let results = roll.results[0]\n\n      this.script.message(`<strong>${this.actor.name}</strong> contracts @UUID[Compendium.${results.documentCollection}.${results.documentId}]{${results.text}}`, {blind : true, whisper: ChatMessage.getWhisperRecipients(\"GM\") })\n    })\n\n  }\n\n",
  "px7eEdhOEt7zOTrq": "return [\"int\", \"t\", \"wp\", \"i\"].includes(args.characteristic)",
  "pzimrxrqpv282Oqb": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.TaYriYcJkFuIdBKp\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id});\n",
  "pzknBcJtZWeliE27": "return args.item?.name == game.i18n.localize(\"NAME.Leadership\") || args.item?.name == game.i18n.localize(\"NAME.Cool\")",
  "q0LvphC8RDSyR0oY": "let choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n    ws : game.wfrp4e.config.characteristics.ws,\r\n    t : game.wfrp4e.config.characteristics.t,\r\n    ag : game.wfrp4e.config.characteristics.ag,\r\n    wp : game.wfrp4e.config.characteristics.wp\r\n}, this.effect.img), 1, \"Wybierz Cechę\");\r\n\r\nthis.effect.updateSource({\"flags.wfrp4e.characteristic\" : choice[0].id})",
  "Q1trEhtqjIiDvFPF": "args.prefillModifiers.modifier -= 10 * this.effect.system.condition.value",
  "q3nRyXaxksdCiLFM": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.j6v78dnOOdCB6c3d\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "Q4EQgP4gZR8TTm7S": "let penalty = 0\r\nif (args.item?.system.attackType)\r\n{\r\n   penalty -= 30\r\n}\r\nif (args.actor.has(game.i18n.localize(\"NAME.SecondSight\"), \"talent\"))\r\n    penalty += 10\r\n\r\nargs.prefillModifiers.modifier += penalty",
  "Q5gh5Y9dCdclcwsD": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) && args.skill?.name != `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`",
  "Q68WiUWY7GxiXBbT": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9GNpAqgsKzxZKJpp\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = \"Kiedy sam\";\r\ndata.effects[0].disabled = true;\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "Q7eULXQ9AfDRmUGO": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'difficult';\nconst target = 40;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n      \n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "q8lOAWr2970sZeTw": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpentry)';\nconst difficulty = 'challenging';\nconst target = 20;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "Q9EmlWmuDac83cJw": "return args.skill?.name == game.i18n.localize(\"NAME.Climb\")  || args.skill?.name?.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "QaEUhlvxFPzowH0v": "args.actor.characteristics.ag.modifier -= 10;\n\n                            if (args.actor.details.move.value > 3)\n                            {\n                                args.actor.details.move.value -= 1;\n                                if (args.actor.details.move.value < 3)\n                                    args.actor.details.move.value = 3\n                            }",
  "qAEZgtu5CrfUkxhx": "if (args.test.options.staunchBleeding) \r\n{\r\n if (args.test.succeeded) \r\n {\r\n   let staunch =  Number(args.test.result.SL) + 1\r\n   if (args.test.options.fieldDressing && args.test.result.reversed)\r\n   {\r\n     staunch =  Math.min(1, Number(args.test.result.SL)) + 1\r\n   }\r\n   args.test.result.other.push(`<b>${this.actor.name}</b>: usunięto pacjentowi liczbę stanów krwawienia równą: <b>${staunch}</b>.`)\r\n }\r\n   else if (this.actor.characteristics.int.bonus + Number(args.test.result.SL) < 0)\r\n   {\r\n      args.test.result.other.push(`Pacjent otrzymuje @UUID[Compendium.wfrp4e-core.items.Item.1hQuVFZt9QnnbWzg]{Pomniejszą Infekcję}.`)\r\n   }\r\n}",
  "QaGNsqKm2Nf0zGVm": "return [\"t\", \"int\", \"wp\", \"fel\"].includes(args.characteristic)",
  "qaVde0sTuMBRi2nl": "return [\"NAME.Evaluate\", \"NAME.Gamble\"].map(i => game.i18n.localize(i)).includes(args.skill?.name)",
  "QBBrzcSAe8QqE4WP": "const SL = this.effect.sourceTest.result.SL;\r\nconst damage = 8 + SL;\r\n\r\nawait this.actor.applyBasicDamage(damage, {loc: \"roll\"});\r\n\r\nconst test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` - ${this.effect.name}`,\r\n  fields: {difficulty: \"challenging\"},\r\n  context: {\r\n    failure: `Receives @Condition[Ablaze] Condition.`\r\n  }\r\n})\r\n\r\nawait test.roll();\r\nif (test.failed) {\r\n  await this.actor.addCondition(\"ablaze\");\r\n}",
  "QbIYnshWeP1U8SUy": "args.applyAP = false;\r\nargs.applyTB = false;",
  "qcyl98GYD55BkJsD": "this.actor.status.encumbrance.state = 0;\r\nthis.actor.status.encumbrance.pct = 0;",
  "qDYJnO2JosPJrjpz": "if (args.totalWoundLoss <= 0) return;\r\n\r\n// Poisoned handled by Venom trait\r\n\r\nconst test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"average\"},\r\n  context: {\r\n    failure: `Gained 1 Corruption.`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed && args.actor.type === \"character\")\r\n  args.actor.update({\"system.status.corruption.value\": args.actor.system.status.corruption.value + 1});\r\n\r\n\r\nawait args.actor.applyEffect({effects : this.item.effects.getName(\"Bite of the Purple Skullback\")})",
  "QF8LanKNoAlTkQG0": "this.actor.system.status.encumbrance.max += 2",
  "QfTBRGXVfwQSghmd": "fromUuid(this.effect.origin).then(caster => {\n   if (caster) {\n      if (actor.items.find(it => it.name == game.i18n.localize(\"Bestial\"))) {\n         let healed = caster.characteristics.wp.bonus\n         let wounds = foundry.utils.duplicate(args.actor.status.wounds)\n         wounds.value += healed\n\n         if (wounds.value > wounds.max)\n            wounds.value = wounds.max\n\n         args.actor.update({ \"system.status.wounds\": wounds })\n         ChatMessage.create({ content: `${this.actor.prototypeToken.name} regains ${healed} Wounds`, speaker: { alias: this.effect.name } })\n      } else {\n         ui.notifications.warn(\"Target actor has no Bestial trait\")\n      }\n   }\n})\n\n",
  "Qgn92fZyc3Psn8QJ": "if (args.test.options.useOnesAttractive && (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target))\r\n{\r\n\r\nlet SL = Math.floor(args.test.target / 10) - Math.floor(args.test.result.roll / 10)\r\nlet ones = Number(args.test.result.roll.toString().split(\"\").pop())\r\n\r\nif (ones == 0)\r\n{\r\n   ones = 10;\r\n}\r\n\r\nif (ones > SL)\r\n\targs.test.data.result.SL = \"+\" + (ones + args.test.successBonus + args.test.slBonus)\r\n   args.test.result.other.push(`<b>${this.effect.name}</b>: Użyto wartości kości jedności jako PS`)\r\n}",
  "QHQ7XmFOjT9wXgw1": "if (args.actorsystem.details.move.oars.value > 0)\n  args.actor.system.details.move.oars.value -= 1;\n\nargs.actor.system.details.man -= 2;",
  "qijgjcOBCDmhglRX": "return args.skill?.name == game.i18n.localize(\"NAME.SleightOfHand\");",
  "qjli5evn8UA9uTeZ": "return args.actor.uuid == this.effect.sourceActor.uuid;",
  "qK4q4o6cQhcGzFX3": "let fear = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\r\nlet leader = await fromUuid(\"Compendium.wfrp4e-core.items.Item.vCgEAetBMngR53aT\")\r\nlet fearData = fear.toObject();\r\nlet leaderData = leader.toObject();\r\nfearData.system.specification.value = this.effect.sourceTest.result.overcast.usage.other.current; \r\ntalents = new Array(1 + this.effect.sourceTest.result.overcast.available).fill(leaderData); // Assume any unused overcast is for war leader\r\nthis.actor.createEmbeddedDocuments(\"Item\", [fearData].concat(talents), {fromEffect : this.effect.id})",
  "Qk7t2l5ep9RDVpgE": "args.context.diceman= true;",
  "QKjR6P1WEHXf4K77": "args.fields.slBonus -= 2\n",
  "QKTA2TqZ77pvHWSJ": "    this.actor.getActiveTokens().forEach(t => t.document.update({light : {\r\n      \"dim\": 0,\r\n      \"bright\": 0,\r\n      \"alpha\": 0.5,\r\n      \"animation\": {\r\n          \"type\": \"\",\r\n      },\r\n      \"color\": \"#000000\",\r\n  }}));",
  "QLBxcP85duX1Z7LX": "if (!args.item.actor?.has(\"Błogosławieństwo (Taal)\", \"talent\")) return;\r\n\r\nargs.item.system.AP.head = 3;",
  "QLUaOkwuSPvBp7jU": "this.script.scriptNotification(\"Cannot attack targets that are not Entangled\")\nargs.abort = true;",
  "qmH61HmrEJcmQTiu": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.tNWrJUOArwfWXsPw\");\nitem = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id});",
  "qmOt7h17hGAKqQe0": "\r\n\r\nif (!args.attackerTest.item?.system?.isMelee) \r\n{\r\n    let choice = await foundry.applications.api.DialogV2.confirm({ window: { title: this.effect.name }, content: `<p><strong>${this.effect.name}</strong>: Czy ten Magiczny lub Zasięgowy atak pochodził spoza Kopuły?</p>` })\r\n\r\n    if (choice) \r\n    {\r\n        args.ward = 6;\r\n    }\r\n}",
  "qnJu82zgnfOsnqZV": "let closed = !this.item.getFlag(\"wfrp4e-soc\", \"gunport\") || false;\n\nawait this.item.setFlag(\"wfrp4e-soc\", \"gunport\", closed);\nlet scriptData = this.effect.system.scriptData;\n\nif (closed) {\n  scriptData[0].label = \"Open\";\n} else {\n  scriptData[0].label = \"Close\";\n}\n\nawait this.effect.update({\"system.scriptData\": scriptData});",
  "QNxmImpLTou6WdMQ": "let test = args.test\nif (test.result.minormis || test.result.majormis || test.result.catastrophicmis)\n         test.result.other.push(\"Can make a <b>Difficult (-10) Willpower</b> Test to prevent the Miscast\")",
  "QoEOxRruQXYrZrv3": "let filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"skill\"\r\n    },\r\n    {\r\n        property : \"name\",\r\n        value : /Melee/gm,\r\n        regex: true\r\n    }\r\n]\r\n\r\nlet items = await ItemDialog.createFromFilters(filters, 2, { text : \"Wybierz dwie umiejętności aby dodać +20\" })\r\nitems = items.map(i => i.toObject())\r\nitems.forEach(i => i.system.advances.value = 20)\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "QPVVDPcJ4Xi5FmQl": "if(this.actor.hasCondition(\"fatigued\") && args.opposedTest.result.hitloc.value == \"head\" && (args.opposedTest.attackerTest.result.critical || args.actor.status.wounds.value - args.totalWoundLoss < 0))\r\n{\r\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), { fields: { difficulty: \"average\" }, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\n    await test.roll();\r\n    if (test.failed)\r\n    {\r\n        this.actor.addCondition(\"unconscious\")\r\n    }\r\n}",
  "QQ2gHThZHdO4yLLX": "return args.skill?.name == game.i18n.localize(\"NAME.Swim\");",
  "QqkE7rlqhkeRohFD": "return !([\"cast\", \"channelling\"].includes(args.type) && this.actor.hasCondition(\"fatigued\"))",
  "QQPiREc50HT5W2Tr": "if (args.item.type == \"weapon\" && args.item.weaponGroup.value == \"brawling\")\r\n    args.item.damage.value += \" + 1\"",
  "QqybHxNCzPEzG1Qh": "return args.context.dualWieldOffhand",
  "QRSACifDrvojIXHB": "if (!this.actor.effects.find(e => e.isCondition))\r\n{\r\n\treturn this.script.notification(\"Aktor nie posiada żadnych Stanów\")\r\n}\r\n\r\nlet choice = await ItemDialog.create(this.actor.effects.filter(i => i.isCondition), 1, \"Wybierz Stan\")\r\n\r\nif (choice[0])\r\n{\r\n\tthis.actor.removeCondition(choice[0].conditionId)\r\n}\r\n",
  "qSwCYMMiIHmSV1X5": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n     let effectData = this.item.effects.contents[0].convertToApplied();\r\n\t effectData.system.sourceData.item = this.item.uuid\r\n     effectData.duration.seconds = 10800\r\n\tactor.applyEffect({effectData : [effectData]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "qT0WBPxLMMO9gvCd": "if (!this.actor.has(\"Widzenie w Ciemności\") && !this.actor.has(\"Widzenie w Ciemności\", \"talent\") && !this.actor.hasCondition(\"blinded\"))\r\n{\r\n    this.actor.addCondition(\"blinded\", 1, {\"flags.wfrp4e.nightshroud\" : true})\r\n}",
  "qTcK1TSjLTi0jNQK": "let AP = args.actor.status.armour;\n\nAP[\"head\"].value += 1;\nAP[\"rArm\"].value += 1;\nAP[\"lArm\"].value += 1;\nAP[\"body\"].value += 1;\nAP[\"lLeg\"].value += 1;\nAP[\"rLeg\"].value += 1;",
  "qTk96NKh14YOIShf": "return args.skill?.name === game.i18n.localize(\"NAME.Haggle\");",
  "qu194dVXm9Vx1TGk": "if (args.test.options.useOnesSupportive && (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target))\r\n{\r\n\r\nlet SL = Math.floor(args.test.target / 10) - Math.floor(args.test.result.roll / 10)\r\nlet ones = Number(args.test.result.roll.toString().split(\"\").pop())\r\n\r\nif (ones > SL)\r\n\targs.test.data.result.SL = \"+\" + (ones + args.test.successBonus + args.test.slBonus)\r\n   args.test.result.other.push(`<b>${this.effect.name}</b>: Użyto wartości kości jedności jako PS`)\r\n}",
  "quPcuKsq2fcild4a": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"easy\"}, context: {failure : `<strong>${this.effect.name}</strong>: Vomit!`} })\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "qUwnVlWpsmDom3RK": "args.fields.modifier -= 5;",
  "QwHoqu2oO8QO8Mad": "let content = `<b>${this.effect.name}</b>: Wszyscy będący w zwarciu z <b>${this.actor.prototypeToken.name}</b> otrzymują [[/r 1d10]] Obrażeń, zmniejszonych o wartość Bonusu Wt oraz Pancerza.`;\r\nthis.script.message(content)",
  "qxzhPtysAjPWspKf": "if (this.actor.has(game.i18n.localize(\"NAME.Undead\")) || this.actor.has(game.i18n.localize(\"NAME.Daemonic\")))\r\n{\r\n    this.script.notification(`Nie może wejśc ze względu na: ${this.effect.name}!`);\r\n}",
  "qZ8TBagp2d4dJAqI": "return !args.weapon || args.weapon?.system.isMelee",
  "qzGPJflVW7c2Ciim": "return args.skill?.name !== game.i18n.localize(\"NAME.Cool\");",
  "qZschZU0nee0kJlk": "args.fields.modifier -= 30;",
  "R32U01LBjBrK1pns": "const templateMap = {\r\n    'P2e7Yx98bK3u110a' : \"\",\r\n    'iuMp3KLaMT2WCmie' : \"4s01nHFKVKTEZd3B\", \r\n    'RBuYcT5tppwcmnC5' : \"h3yuJDWnixliXeBG\", \r\n    'vcGpNwNbhvfzVveQ' : \"7QrsbofccMOE1YsF\", \r\n    'jmhKZy0w9TzkEK9c' : \"scVTPVyDDbli4WZL\", \r\n    '9Byj6k7SmdTYis2V' : \"4Cd7Dknee2WjReOo\", \r\n    'laJwc2l9tzJPgaaJ' : \"2hJ2a5YjbwZWWYrd\",\r\n}\r\nlet template = (await game.wfrp4e.tables.rollTable(\"hireling-templates\", {hideDSN: true})).object;\r\nlet physicalQuirk = (await game.wfrp4e.tables.rollTable(\"physical-quirks\", {hideDSN: true})).text;\r\nlet workEthic = (await game.wfrp4e.tables.rollTable(\"work-ethic\", {hideDSN: true})).text;\r\nlet personalityQuirk = (await game.wfrp4e.tables.rollTable(\"personality-quirks\", {hideDSN: true})).text;\r\n\r\n\r\nlet templateItem = await warhammer.utility.findItemId(templateMap[template._id]);\r\n\r\nlet bio = \r\n`\r\n<p><strong>Szablon</strong>: ${template.text}</p>\r\n<p><strong>Fizyczne dziwactwo</strong>: ${physicalQuirk}</p>\r\n<p><strong>Etyka pracy</strong>: ${workEthic}</p>\r\n<p><strong>Osobowościowe dziwactwa</strong>: ${personalityQuirk}</p>\r\n`\r\n\r\nthis.script.message(bio, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n\r\nawait this.actor.update({\"system.details.gmnotes.value\" : bio})\r\n\r\nif (templateItem)\r\n{\r\n    this.actor.createEmbeddedDocuments(\"Item\", [templateItem.toObject()])\r\n}",
  "R3OfRdi6xv0e9mzB": "return args.item.name.includes(\"Weapon\")",
  "R5dOZWFxE2n6tooX": "return this.item.system.usesLocation(args.weapon)",
  "r6hi5vMdLhTaaPfb": "args.actor.details.move.value += this.effect.sourceTest.result.overcast.usage.other.current",
  "R6SnyF3y4Vsq6oga": "let lore = this.effect.name.split(\"(\")[1].split(\")\")[0].toLowerCase();\n\n// If channelling corresponding lore\nif (args.type == \"channelling\" && args.spell.system.lore.value == lore)\n    args.prefillModifiers.slBonus  += 1\n// If channelling or casting different lore\nelse if (args.spell.system.lore.value != lore && args.spell.system.lore.value != \"petty\")\n    args.prefillModifiers.slBonus  -= 1",
  "R8ecKGRzOr4ThvVa": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Maintenance Crew Test';\nconst difficulty = 'hard';\nconst target = 80;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "R8FBHZaaARA3z9pB": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'hard';\nconst target = 40;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "R95pDZMHnD9iHAl8": "return args.skill?.name.includes(this.item.system.tests.value);",
  "ramav4ymrDDkPKK4": "if (this.actor.hasCondition(\"bleeding\"))\r\n{\r\n    this.actor.removeCondition(\"bleeding\");\r\n    this.script.notification(\"Usunięto 1 Stan Krwawienia\");\r\n}\r\nelse \r\n{\r\n    this.script.notification(\"Brak Stanów Krwawienia do usunięcia\");\r\n}",
  "ratP9ByLjQPiLlFK": "args.data.canReverse = true",
  "rBAoyhzeU3Q8MVSk": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'difficult';\nconst target = 50;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        \n      }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "rCh3ltUrUMovd2Kc": "if (this.actor.hasCondition(\"surprised\"))\r\n{\r\n    this.script.notification(\"Nie może zostać zaskoczony\");\r\n    this.actor.removeCondition(\"surprised\");\r\n}",
  "rdaMhMyHrJjQ6vVC": "game.wfrp4e.utility.postFear(this.item.Advances, this.actor.name)",
  "RDtJXji3hgcKnEBk": "let as = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")).toObject();\r\nlet hv = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.Nj3tC8A5fZ3zEdMR\")).toObject();\r\nlet ms = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.6w30u0VPsAicrqb5\")).toObject();\r\nlet ss = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.OEjUvJKi0xmBwbS2\")).toObject();\r\n\r\nas.name += ` (${game.i18n.localize(\"SPEC.Sight\")})`;\r\n\r\nlet roll = (await new Roll(\"1d10\").roll());\r\nroll.toMessage(this.script.getChatData())\r\nlet items = []\r\n\r\nif (roll.total <= 2)\r\n{\r\n    items = items.concat([as]);\r\n}\r\nelse if (roll.total <= 4)\r\n{\r\n    items = items.concat([hv]);\r\n}\r\nelse if (roll.total <= 6)\r\n{\r\n    items = items.concat([ms]);\r\n}\r\nelse if (roll.total <= 8)\r\n{\r\n    items = items.concat([ss]);\r\n}\r\nelse if (roll.total <= 10)\r\n{\r\n    items = items.concat([as, hv, ms, ss]);\r\n}\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id})",
  "re1UFtxvRRjpPB7Z": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.nF5z1OEhpi4t6a6S\");\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nif (data.system.location.key[0] == \"r\")\r\n{\r\n\tdata.system.location.value = \"Prawa kostka\"\r\n}\r\nelse if (data.system.location.key[0] == \"l\")\r\n{\r\n\tdata.system.location.value = \"Lewa kostka\"\r\n}\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {skipLocationValue : true, fromEffect: this.effect.id})\r\n",
  "red2bt4PGgIWAdTR": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n     let effectData = this.item.effects.contents[0].convertToApplied();\r\n     let minutes = Math.ceil(CONFIG.Dice.randomUniform() * 10) * 10;\r\n     effectData.duration.seconds = 60 * minutes\r\n     this.script.message(`<strong>${game.i18n.localize(\"Duration\")}</strong>: ${minutes} ${game.i18n.localize(\"Minutes\")}`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n\tactor.applyEffect({effectData : [effectData]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nie nie zostało!\", \"error\")\r\n}",
  "ReJpL0IVesKUbXgj": "args.fields.slBonus -= 8;",
  "rF0Z3hTUUnSxL3Mq": "let armour = (await fromUuid(\"Compendium.wfrp4e-core.items.VUJUZVN3VYhOaPjj\")).toObject()\r\nlet bite = (await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")).toObject()\r\nlet fear = (await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")).toObject()\r\nlet nightVision = (await fromUuid(\"Compendium.wfrp4e-core.items.FmHDbCOy3pH8yKhm\")).toObject()\r\nlet tracker = (await fromUuid(\"Compendium.wfrp4e-core.items.ClOlztW6hH8rslbp\")).toObject()\r\nlet weapon = (await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")).toObject()\r\n\r\narmour.name = \"Pancerz (Skóra)\"\r\narmour.system.specification.value = 2\r\nbite.system.specification.value = 3\r\nfear.system.specification.value = 2\r\nweapon.system.specification.value = 4\r\nlet items = [armour, bite, fear, nightVision, tracker, weapon]\r\n\r\n\r\nlet belligerent = (await fromUuid(\"Compendium.wfrp4e-core.items.GbDyBCu8ZjDp6dkj\")).toObject()//{Belligerent}\r\nlet bestial = (await fromUuid(\"Compendium.wfrp4e-core.items.AGcJl5rHjkyIQBPP\")).toObject()//{Bestial}\r\nlet big = (await fromUuid(\"Compendium.wfrp4e-core.items.a8MC97PLzl10WocT\")).toObject()//{Big}\r\nlet blessed = (await fromUuid(\"Compendium.wfrp4e-core.items.5muSFXd6oc760uVj\")).toObject()//{Blessed (Ulric)}\r\nlet champion = (await fromUuid(\"Compendium.wfrp4e-core.items.4mF5Sp3t09kZhBYc\")).toObject()//{Champion}\r\nlet die = (await fromUuid(\"Compendium.wfrp4e-core.items.UsJ2uIOOtHA7JqD5\")).toObject()//{Die Hard}\r\nlet fast = (await fromUuid(\"Compendium.wfrp4e-core.items.9MjH4xyVrd3Inzak\")).toObject()//{Fast}\r\nlet frenzy = (await fromUuid(\"Compendium.wfrp4e-core.items.yRhhOlt18COq4e1q\")).toObject()//{Frenzy}\r\nlet immunity = (await fromUuid(\"Compendium.wfrp4e-core.items.IAWyzDfC286a9MPz\")).toObject()//{Immunity to Psychology}\r\nlet regenerate = (await fromUuid(\"Compendium.wfrp4e-core.items.SfUUdOGjdYpr3KSR\")).toObject()//{Regenerate}\r\nlet size = (await fromUuid(\"Compendium.wfrp4e-core.items.8slW8CJ2oVTxeQ6q\")).toObject()//{Size (Large)}\r\n\r\nblessed.system.specification.value = \"Ulryk\"\r\nsize.system.specification.value = \"Duży\"\r\n\r\nlet optional = [belligerent, bestial, big, blessed, champion, die, fast, frenzy, immunity, regenerate, size];\r\n\r\nlet chosen = await ItemDialog.create(optional, \"unlimited\", \"Wybierz opcjonalne cechy\");\r\n\r\nitems = items.concat(chosen || [])\r\nthis.script.scriptNotification(`Dodano: ${items.map(i => i.name).join(\", \")}`);\r\nthis.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect : this.effect.id})\r\n",
  "RgNdS87nO7RVawuw": "this.actor.removeCondition(\"fatigued\", 1);",
  "rgnGu3IQrS8Vj9Op": "const bonus = game.settings.get(\"wfrp4e\", \"homebrew\").advantageBonus;\r\n\r\nargs.fields.modifier += bonus;",
  "rgSwSeB3shIMVMb6": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.x0WMGwuQzReXcQrs\")\nlet data = item.toObject();    \nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id});",
  "RHyBLYT5oHf7EPnG": "let skills = this.actor.itemTypes.skill.filter(i => i.name.includes(game.i18n.localize(\"NAME.Melee\")))\r\n\r\nlet skill = await ItemDialog.create(skills, 1, \"Wybierz umiejętność wybranej broni\");\r\nlet group = game.wfrp4e.utility.extractParenthesesText(skill[0]?.name)\r\nlet groupKey = warhammer.utility.findKey(group, game.wfrp4e.config.weaponGroups)\r\n\r\nlet weapon = {\r\n\tname : this.effect.name,\r\n\ttype : \"weapon\",\r\n\timg : this.effect.img,\r\n\tsystem : {\r\n\t\t\"damage.value\" : this.actor.system.characteristics.wp.bonus,\r\n\t\t\"weaponGroup.value\" : groupKey || \"basic\",\r\n\t\t\"twohanded.value\" : [\"polearm\", \"twohanded\"].includes(groupKey),\r\n\t\t\"reach.value\" : \"average\",\r\n\t\t\"qualities.value\" : [{name : \"magical\"}]\r\n\t},\r\n}\r\n\r\nItem.implementation.create(foundry.utils.expandObject(weapon), {parent : this.actor, fromEffect : this.effect.id})\r\nthis.script.notification(\"Utworzony Broń. Dalsze dostosowywanie należy wykonać ręcznie w Karcie przedmiotu\");",
  "RI8crJxeD8JLDwMh": "return args.weapon?.system?.weaponGroup?.value != \"fencing\"",
  "rIISfbCShejmJNKw": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.oRx92ByVNEBN6YkK\")\nlet data = item.toObject()\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\n",
  "rJ8pspSekyDLkiqG": "return args.skill.name === game.i18n.localize(\"NAME.Cool\")",
  "RJpglw5eVRM1f9t0": "args.wounds *= 5",
  "RKIFGN583PQnqHGk": "if (args.opposedTest.result.hitloc.value == \"body\" && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 2)\r\n    this.script.message(\"Otrzymano 2 Stany Krwawienia\")\r\n}",
  "RlhOAKfN0ghrrooR": "let holed = this.actor.appliedEffects.filter(e => e.name.includes(\"Holed\"));\n\nfor (let effect of holed) {\n  await effect.update({name: effect.name.replace(/\\d+/, rating => parseInt(rating) * 2)});\n}\n\nthis.script.notification(`Holed Ratings of ${this.actor.name} have been doubled.`);",
  "rLMaVNEGdZ6xj5Au": "return ![\"i\", \"int\", \"fel\"].includes(args.characteristic)",
  "rlTvhnDpj4lzfusf": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Sail\")) && args.skill?.name !== game.i18n.localize(\"NAME.Climb\");",
  "RlVvlmhOfscaJqCd": "const deletes = this.actor.itemTags.armour.map(a => {\r\n  return {_id: a._id}\r\n});\r\nconst armourTrait = this.actor.itemTags.trait.find(t => t.name === game.i18n.localize(\"NAME.TraitArmour\"));\r\n\r\nif (armourTrait)\r\n  deletes.push({_id: armourTrait._id});\r\n\r\nthis.actor.deleteEmbeddedDocuments(\"Item\", deletes);",
  "rly9iBUy8EX7NhQT": "if (game.user.targets.size !== 1)\n  return ui.notifications.warn(\"You must target exactly one Boat.\");\n\nconst target = game.user.targets.first();\nconst vehicle = target.actor;\n\nif (!(vehicle.system instanceof VehicleModel)) \n  return ui.notifications.warn(\"You can only Constrict a Boat\");\n\nif (vehicle.size > 3)\n  return ui.notifications.warn(\"You can only Constrict vessels of Size Large or smaller\");\n\nconst turns = Math.ceil(vehicle.system.details.length.value / 10);\n\nconst mainEffect = this.item.effects.contents[0];\nconst effectData = mainEffect.toObject();\n\neffectData.statuses = [effectData.name.slugify()];\n\nfoundry.utils.setProperty(effectData, \"flags.wfrp4e.target\", target.id);\nfoundry.utils.setProperty(effectData, \"flags.wfrp4e.turns\", turns);\n\nawait this.actor.applyEffect({effectData: [effectData]});\n\nconst speaker = ChatMessage.getSpeaker({actor: this.actor});\n\nthis.script.message(`<b>${speaker.alias}</b> started wrapping itself around the <b>${target.name}</b> and will be able to start crushing it after ${turns} turns.`);",
  "RNHrSTfMLXm5sXkC": "return [\"ws\", \"bs\", \"s\", \"ag\"].includes(args.characteristic)",
  "rnioLwiJP7ps5Jwy": "if (args.item.type  == \"skill\" && args.item.name == \"Melee (Basic)\")\n{\n     args.item.system.modifier.value += 30;\n}",
  "Rnpw6UQdJifLeuna": "this.effect.updateSource({\"system.transferData.type\" : \"crew\"})",
  "RNr9CwyvLhlnwD2h": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Sail\"));",
  "roKvPHDSpX4IV11C": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Perform\")) && args.characteristic != \"ag\"",
  "ROXCqAFSTLouJniL": "if (args.test.spell.name == \"Warp Lightning\")\n{\n    if (args.test.result.minormis || args.test.result.majormis || args.test.result.catastrophicmis)\n    {\n        this.script.message(`<strong>${this.item.name}</strong> Overloads!`)\n    }\n}",
  "roYVcP5Zqcsa8jVw": "args.actor.system.details.move.value -= 1;",
  "RPqgRUkiLY5thVbC": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Strength';\nconst difficulty = 'average';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        \n      }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "RprZWlnopSqZt7KZ": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "rpxQU26BU7nwjtqY": "let location = this.item.system.location.key\r\nlet test = await this.actor.setupCharacteristic(\"dex\", {context : {failure : `<strong>${this.effect.name}</strong>: Upuść przedmiot!`}, skipTargets: true, appendTitle :  \" - \" + this.effect.name, fields : {difficulty : \"average\"}})\r\nawait test.roll();\r\n\r\n\r\nif (location && test.failed)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}\r\n\r\nreturn test.succeeded",
  "rqTT8yOyK4bUwbdm": "let test = args.test\nif (test.spell.lore.value == \"fire\")\n{\n   if (test.result.overcast.usage.target?.AoE)\n   {\n       test.result.overcast.usage.target.current += test.actor.characteristics.wp.bonus\n       test.result.overcast.usage.target.initial += test.actor.characteristics.wp.bonus\n    }\n   if (test.result.overcast.usage.range)\n   {\n       test.result.overcast.usage.range.current *= 2\n       test.result.overcast.usage.range.initial *= 2\n   }\n \n}",
  "RqWnhnwFxaHubgiA": "await args.actor.addCondition(\"blinded\");\r\nawait args.actor.addCondition(\"deafened\");\r\nawait args.actor.addCondition(\"stunned\");",
  "rr4htuVq45onXdRG": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {appendTitle: ` - ${this.effect.name}`, fields : {difficulty : \"average\"}})\r\ntest.roll();",
  "RrchOMpEdIvceJxl": "return args.skill?.name == `${game.i18n.localize(\"NAME.Stealth\")} (${game.i18n.localize(\"SPEC.Rural\")})`",
  "rRfff55c7elyvbCb": "return this.actor.flags.useless[this.item.system.location.key] && args.weapon?.system.usesHands.includes(this.item.system.location.key[0] + \"Arm\")",
  "RRK91ySi5SzYCRvy": "return args.weapon?.system.isRanged",
  "RSsGiDFibuqg3sHr": "let diseaseIndex = game.packs\r\n.filter(i => i.metadata.type == \"Item\")\r\n.reduce((acc, pack) => acc.concat(pack.index.contents), [])\r\n.filter(i => i.type == \"disease\")\r\n.map(i => {\r\n\ti.id = i._id\r\n\treturn i\r\n})\r\n\r\nlet choice = await ItemDialog.create(diseaseIndex , 1, \"Wybierz Chorobę\");\r\n\r\nif (choice[0])\r\n{\r\n\tawait this.item.updateSource({\"system.specification.value\" : choice[0].name})\r\n}",
  "RsWXCcYHONf3ANlD": "this.actor.addCondition(\"stunned\", 1);\n",
  "rUGSx06BuBvX9kgf": "if (args.test.result.charging)\r\n{\r\n   args.test.result.damage += 1\r\n   args.test.result.additionalDamage += 1\r\n   if (!args.test.result.resolute) {\r\n      args.test.result.breakdown.damage.other.push({label : this.effect.name, value : this.item.Advances});\r\n      args.test.result.resolute = true // Prevent duplicate messages\r\n     }\r\n}\r\n",
  "RuW1PWUFxIbbSlIm": "return ![\"t\", \"wp\", \"ag\", \"i\", \"int\"].includes(args.characteristic)",
  "RvipIYj9H7n4UDMe": "let characteristics = {\r\n    \"ws\" : -10,\r\n    \"bs\" : -10,\r\n    \"s\" : -5,\r\n    \"t\" : -5,\r\n    \"i\" : -10,\r\n    \"ag\" : -10,\r\n    \"dex\" : -10,\r\n    \"int\" : 0,\r\n    \"wp\" : 0,\r\n    \"fel\" : 0\r\n}\r\nlet skills = []\r\nlet skillAdvancements = []\r\nlet talents = []\r\nlet trappings = []\r\nlet items = []\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "rVpPNILEzWL9lj6b": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.kJNAY1YRaCy9IgmT\")\nlet terrorTraitItem = item.toObject()\nterrorTraitItem.system.specification.value = Number(this.effect.item.system.specification.value) \nthis.actor.createEmbeddedDocuments(\"Item\", [terrorTraitItem]);",
  "rVRDoxiWILo7d8FF": "let specification = Number(this.item.specification.value) || 1;\nargs.actor.system.status.wounds.max += Math.floor(args.actor.system.status.wounds.max * 0.3 * specification);\nargs.actor.system.status.carries.max -= Math.floor(args.actor.system.status.carries.max * 0.1 * specification);\nargs.actor.system.details.price.gc += args.actor.system.details.price.gc * 0.2 * specification;",
  "RwMw848y13Jq2L4f": "let test = await this.actor.setupSkill(\"Endurance\", {fields : {difficulty : \"difficult\"}, appendTitle : ` - ${this.effect.name}`});\nawait test.roll();\nif (test.failed)\n{\n\tawait this.actor.addCondition(\"blinded\");\n}\n\nlet msg = ``\nlet armour = args.actor.itemTypes.armour.filter(i => i.system.isMetal && i.system.isEquipped);\nfor(let item of armour)\n{\n\tfor(let key in item.system.AP)\n\t{\n\t\tlet AP = item.system.AP[key]\n\t\tlet damage = Math.floor(AP / 2);\n\t\tawait item.system.damageItem(damage, [key]);\n\t}\n\tmsg += `<p><strong>${item.name}</strong> AP reduced by half</p>`\n}\nif (msg)\n{\n\tthis.script.message(msg, {speaker : {alias : args.actor.name}});\n}",
  "rX8FTinyTMj9WJri": "if (!this.actor.flags.holed) return;\nif (this.actor.flags.holed.applied === true) return;\nif (this.actor.hasCondition(\"dead\")) return;\n\nconst currentHoled = this.actor.flags.holed.holed || 0;\n\nconst openGunPorts = this.actor.itemTypes.vehicleMod.reduce((acc, m) => {\n  if (!m.name.toLowerCase().includes(\"gun port\")) \n    return acc;\n  \n  let closed = m.getFlag(\"wfrp4e-soc\", \"gunport\");\n  if (!closed) acc++;\n \n  return acc;\n}, 0);\n\nconst totalHoled = currentHoled + openGunPorts;\nconst toughness = this.actor.system.characteristics.t.value;\nthis.actor.flags.holed.total = totalHoled;\n\nif (totalHoled >= toughness) {\n  const speaker = ChatMessage.getSpeaker({actor: this.actor});\n  this.script.message(`\n        <p><b>${speaker.alias}</b> sank due to having <em>Holed (${totalHoled})</em> rating equal to, or exceeding its <em>Toughness (${toughness })</em></p>\n        <p>\n          <em>Holed</em> due to Critical Damage: ${currentHoled}<br/>\n          <em>Holed</em> due to opened Gun Ports: ${openGunPorts}\n        </p>\n      `, {   flavor: this.effect.name.split(\"(\")[0]});\n  this.actor.addCondition(\"dead\");\n} else if (totalHoled >= (toughness * 0.5)) {\n  this.actor.system.details.move.value -= 1;\n  this.actor.system.details.man -= 1;\n  this.actor.flags.holed.half = true;\n}\n\nthis.actor.flags.holed.applied = true;",
  "rxB1AqfVMDqTRieE": "return ![\"ws\", \"bs\", \"ag\"].includes(args.characteristic) && args.skill?.name != game.i18n.localize(\"NAME.Perception\")",
  "rXMylpnEtZpwou6x": "this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty : \"average\"}}).then(async test =>\n{\n     await test.roll()\n     if (test.failed)\n     {\n         this.actor.addCondition(\"fatigued\")    \n     }\n})",
  "RyQtuiRykUCQ6Xag": "if (!this.item.actor.name.includes(\"Brunner\")) return;\r\n\r\nargs.actor.addCondition(\"ablaze\");",
  "RZlMkxJz5apn0mUj": "return args.item?.system.attackType != \"ranged\"",
  "s07GKMPCvQ8Heorc": "const value = this.effect.sourceActor.system.characteristics.wp.bonus;\nthis.script.message(await args.actor.applyBasicDamage(value, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true}));",
  "s0kTuDE0qv68V2KI": "    this.actor.getActiveTokens().forEach(t => t.document.update({texture : {tint : \"#FFBF00\"}}));\n",
  "S1QihXuvdEVzeRtB": "let dice = await new Roll(\"1d10\").roll()\r\nlet roll = dice.total\r\nlet talent \r\nlet message\r\nlet modifier = 0\r\n\r\nif (roll <= 3)\r\n{\r\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.mNoCuaVbFBflfO6X\")\r\n}\r\n\r\nelse if (roll <= 6)\r\n{\r\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.OEjUvJKi0xmBwbS2\")\r\n    modifier = -3\r\n}\r\n\r\nelse if (roll <= 9)\r\n{\r\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.mdPGZsn2396dEpOf\")\r\n    modifier = -3\r\n}\r\n\r\nelse if (roll = 10)\r\n{\r\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.qdMbxW09FUoYBzmB\")\r\n    modifier = -5\r\n}\r\n\r\nmessage = `Wyrzucono ${roll}, Otrzymano ${item.name}, ${modifier} Siły`\r\ndice.toMessage(this.script.getChatData())\r\n\r\nlet changes = foundry.utils.duplicate(this.effect.changes)\r\nchanges[0].value = modifier\r\n\r\nthis.effect.updateSource({changes})\r\n\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id})\r\n\r\nthis.script.notification(message)",
  "S3DCTw4yJ85eSaKp": "this.actor.setupCharacteristic(\"s\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(test => test.roll())",
  "S3Dev4hleOYqDNe9": "if (args.test.options.healWounds) {\r\n if (args.test.succeeded) \r\n {\r\n   let wounds = this.actor.characteristics.int.bonus + Number(args.test.result.SL)\r\n   if (args.test.options.fieldDressing && args.test.result.reversed)\r\n   {\r\n      wounds = this.actor.characteristics.int.bonus + Math.min(1, Number(args.test.result.SL))\r\n   }\r\n\targs.test.result.woundsHealed = wounds\r\n\targs.test.result.other.push(`<b>${this.actor.name}</b>: uleczono pacjentowi liczbę ran równą: <b>${wounds}</b>.`);\r\n   }\r\n   else if (this.actor.characteristics.int.bonus + Number(args.test.result.SL) < 0)\r\n   {\r\n      args.test.result.other.push(`Pacjent otrzymuje @UUID[Compendium.wfrp4e-core.items.Item.1hQuVFZt9QnnbWzg]{Pomniejszą Infekcję}.`);\r\n   }\r\n}",
  "S4793DLFhjMxpM8x": "return ![\"ws\", \"bs\"].includes(args.characteristic) && !args.item?.system.attackType && !args.context.dodge",
  "s5bO0Sf0qpS27Tve": "await args.actor.addCondition(\"ablaze\", 3)\nawait args.actor.addCondition(\"prone\");",
  "s6eZXfZkC1My6EXl": "let lore = this.effect.name.split(\" \")[2].toLowerCase();\nif (args.item.type == \"spell\" && args.item.system.lore.value == lore)\n{\n    args.item.system.cn.value -= 1\n}\n",
  "S6tUyFJvGMV19mvP": "this.actor.status.addArmour(2, {source: this.effect})",
  "s7gJQdzuM3fz2zQK": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.QluSTTTq3viHJJUh\")\r\nlet data = item.toObject();\r\ndata.system.location.value = \"Biodro\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n   \r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "s7kW3lm2eU5IPrLP": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.JQa5DLnTs2SEzRrc\")\nlet dv = item.toObject();\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.OzwDT6kzoLYeeR2d\")\nlet stealthy = item.toObject();\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.XSb3QVB9ipPBFt56\")\nlet shadow = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [dv, stealthy, shadow], {fromEffect : this.effect.id});",
  "s8idWt9YdMTRfnjV": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.BqPZn6q3VHn9HUrW\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = 4 - this.actor.characteristics.s.bonus\r\ndata.name = item.name.replace(\"()\", \"\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "s8xU6OOZbbfo6VIw": "args.fields.slBonus += this.actor.system.characteristics.ag.bonus\r\n",
  "s94yKZ4o5XN4JWM1": "// Any attack with such ammunition which inflicts at least one Wound,\n// also inflicts one Bleeding Condition.\n\nif (args.totalWoundLoss > 0) {\n  args.actor.addCondition(\"bleeding\")\n}\n",
  "S95QqpX1cZyIVCPy": "if (parseInt(this.item.system.specification.value) > 0)\r\n{\r\n\tthis.actor.system.status.ward.value = parseInt(this.item.system.specification.value);\r\n}\r\n\r\n",
  "s9J1TUkpGdvSWvPO": "this.actor.addCondition(\"blinded\");",
  "sagKJM6oDFlw4ED2": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\nawait test.roll();\nreturn test.failed;",
  "sAVpm7hFRHpbCLXm": "return [\"ws\", \"bs\", \"s\",  \"t\", \"ag\", \"i\"].includes(args.characteristic)",
  "sB4KB9bT3nQhAoqG": "// This script needs to be separate because equipTransfer is off on the other effect, and thus won't execute when added to an actor\r\n\r\nlet mainEffect = this.item.effects.contents[0];\r\nif (mainEffect.name.includes(\"(Tradycja)\"))\r\n{\r\n    let choice = await ItemDialog.create(ItemDialog.objectToArray(game.wfrp4e.config.magicLores, this.item.img), 1, \"Wybierz Tradycję Magiczną\");\r\n    if (choice.length)\r\n    {\r\n        mainEffect.update({name : mainEffect.name.replace(\"(Tradycja)\", choice[0].name)})\r\n        this.item.update({name : this.item.name += ` (${choice[0].name})`})\r\n    }\r\n}\r\n\r\nthis.effect.delete();",
  "sbK1a7txpSoXFzyB": "if (args.test.options.useOnesArgumentative && (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target))\r\n{\r\n\r\nlet SL = Math.floor(args.test.target / 10) - Math.floor(args.test.result.roll / 10)\r\nlet ones = Number(args.test.result.roll.toString().split(\"\").pop())\r\n\r\nif (ones == 0)\r\n{\r\n   ones = 10;\r\n}\r\n\r\nif (ones > SL)\r\n\targs.test.data.result.SL = \"+\" + (ones + args.test.successBonus + args.test.slBonus)\r\n   args.test.result.other.push(`<b>${this.effect.name}</b>: Użyto wartości kości jedności jako PS.`)\r\n}",
  "scfm5iWWBxWI6QaK": "let darkvision = await fromUuid(\"Compendium.wfrp4e-core.items.Item.JQa5DLnTs2SEzRrc\")\r\nlet fear = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\r\nlet acutesense = await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")\r\nfear = fear.toObject();\r\nfear.system.specification.value = 1;\r\nthis.actor.createEmbeddedDocuments(\"Item\", [darkvision, fear, acutesense], {fromEffect : this.effect.id})",
  "SefcrhXsdYGFcCW6": "args.actor.system.details.move.value -= 3;\nargs.actor.system.details.man -= 2;\nargs.actor.system.status.carries.max *= 2;",
  "SGr50Hq1AHIEzIFN": "let choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n    int : game.wfrp4e.config.characteristics.int,\r\n    fel : game.wfrp4e.config.characteristics.fel\r\n}, this.effect.img), 1, \"Wybierz Cechę\");\r\n\r\nthis.effect.updateSource({\"flags.wfrp4e.characteristic\" : choice[0].id})",
  "sgS9rblPkQB36C8S": "if (this.item.name.includes(\"(\"))\r\n{\r\n\tlet trade = this.item.parenthesesText;\r\n\tif (trade?.toLowerCase() != \"dowolne\")\r\n\t    return this.item.updateSource({\"system.tests.value\" : this.item.system.tests.value.replace(\"Dowolne\", trade)})\r\n}\r\n\r\nlet index = game.packs\r\n.filter(i => i.metadata.type == \"Item\")\r\n.reduce((acc, pack) => acc.concat(pack.index.contents), [])\r\n.filter(i => i.type == \"skill\" && i.name.includes(game.i18n.localize(\"NAME.Trade\")))\r\n.map(i => {\r\n\ti.id = i._id\r\n\treturn i\r\n})\r\n\r\nlet choice = await ItemDialog.create(index, 1, \"Wybierz Umiejętność Rzemieślniczą\")\r\nlet text;\r\nif (!choice[0])\r\n{\r\n    let custom = await ValueDialog.create({text : \"wpisz własny rodzaj rzemiosła\", title : \"Własne Rzemiosło\"});  \r\n    text = custom || \"\"\r\n}\r\nelse \r\n{\r\n    text = game.wfrp4e.utility.extractParenthesesText(choice[0].name)\r\n}\r\n\r\nawait this.item.updateSource({name : this.item.name.replace(\"(Dowolne Rzemiosło)\", \"\").replace(\"(Dowolne Rzemiosło)\", \"\").trim() + ` (${text})`, \"system.tests.value\" : this.item.system.tests.value.replace(\"Dowolne\", text)});",
  "sHfkTRqTWPg2JAGN": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.JQa5DLnTs2SEzRrc\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "shkBUtUuMPDKvFm7": "let test = await this.actor.setupSkill(\"Unik\", {fields : {difficulty : \"average\"}})\r\nlet caster = this.effect.sourceActor\r\n\r\nlet fallen = this.effect.sourceTest.result.SL + caster.characteristics.wp.bonus\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n   this.script.message(`<b>${this.actor.prototypeToken.name}</b>: upadek w odległości ${fallen} metrów`)\r\n}",
  "sHVLKIdPbzLVItCa": "if (args.actorsystem.details.move.oars.value > 0)\n  args.actor.system.details.move.oars.value -= 1;",
  "sjnoYbWpAugyDilW": "let test = await args.actor.setupSkill(\"Charm\",  {\n    appendTitle: ` – ${this.effect.name}`,\n    skipTargets: true,\n    fields: {difficulty: 'average'},\n    characteristic: 'fel',\n    context: {\n        success: \"Animal becomes docile towards Humans, Elves who honour Isha, and similar allies.\"\n    }\n});\nawait test.roll();",
  "SK8paBvnvc5YLFI1": "if (args.test.options.doombolt && !args.test.options.doomboltRolled)\r\n{\r\n\targs.test.options.doomboltRolled = true;\r\n\r\n\tlet test = await this.actor.setupSkill(`${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`, {fields : {difficulty : \"hard\"}, context : {failure : \"@Table[majormis]{Major Miscast}\"}});\r\n\tawait test.roll();\r\n\r\n\tif (test.succeeded)\r\n\t{\r\n\t\targs.test.preData.additionalDamage = 4;\r\n\t}\r\n}",
  "sKO8TcLIkCTnFvXu": "args.abort = true;\r\nthis.script.notification(`Nie można używać: ${this.item.system.location.value}!`, \"error\")",
  "skVq3eDEYKFF2iZp": "// I'm assuming the endurance test specified is for the end-round check\r\nawait this.actor.addCondition(\"poisoned\", 4);\r\n",
  "SLy1Fs3oXcHgFgjK": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\r\nlet data = item.toObject();\r\nlet value = foundry.utils.getProperty(this.effect.sourceTest, \"result.overcast.usage.other.current\") || 1\r\ndata.system.specification.value = value\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "sm9d5lk6cM0OuUkf": "this.actor.applyFear(Math.min(4, this.effect.sourceTest.result.overcast.usage.other.current))",
  "SNjG7IvgQzvCGczR": "if (this.actor.system.details.experience.current < 100) {\n  return this.script.notification(game.i18n.localize(\"SCRIPT.NotEnoughXP\"))\n}\n\nlet item = await game.wfrp4e.utility.findItem(\"Messenger\", \"trait\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item]);\nlet expLog = foundry.utils.duplicate(this.actor.details.experience.log || []);\nexpLog.push({amount : 100, reason: item.name, spent: this.actor.details.experience.spent + 100, total: this.actor.details.experience.total, type: \"spent\"});\nthis.actor.update({\n    \"system.details.experience.spent\": this.actor.details.experience.spent + 100,\n    \"system.details.experience.log\": expLog\n  });",
  "sNSfDBIA2k17hPYI": "let ablaze = this.actor.hasCondition(\"ablaze\");\r\nif (ablaze)\r\n{\r\n\tablaze?.delete();\r\n\tthis.script.notification(\"Ingoruje Podpalenie\");\r\n}\r\n",
  "SO4Aa9argKbuO9rQ": "args.prefillModifiers.modifier -= 20",
  "SPOkFWZWziZk5b7A": "return args.item?.system?.attackType != \"melee\"",
  "sPvfYQEnyAYNpIhF": "let shouldDamage = await foundry.applications.api.DialogV2.confirm({\r\n  window : {title: this.effect.name + \" - \" + args.actor.name},\r\n  content: \"Czy jesteś humanoidalnym stworzeniem, które nie poświęciły się Rhyi (lub innej diety natury lub potężnego ducha natury, której kult Rhyi jest dobrze rozmieszczony, taki jak Isha lub Taal) od ostatniej wiosny równonocy?\"\r\n});\r\n\r\nif (shouldDamage) {\r\n  let damage = 1 + this.effect.sourceTest.result.baseSL;\r\n  await args.actor.applyBasicDamage(damage, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL});\r\n  args.actor.addCondition(\"fatigued\");\r\n}",
  "sQDh3g11pWchxpW9": "return true",
  "SrCHfOJFZwDickqa": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"average\"}});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}",
  "SRmfstEs278bP9Pz": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.yRhhOlt18COq4e1q\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "sSMg43ZjnNmpytfj": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name});\nawait test.roll();\n",
  "Ssn21dxoMQiqD1y4": "return args.type == \"cast\" && args.item.lore.value == \"fire\"",
  "SSqGxyN9hw0HDmED": "this.actor.addCondition(\"prone\");",
  "StAderQaQQsxb6Rv": "let target = await game.wfrp4e.tables.rollTable(\"fixations\")\nif (target)\n{\n    this.script.notification(target.result);\n    let hatred = this.actor.items.find(i => i.getFlag(\"wfrp4e\", \"fromEffect\") == this.effect.id)\n    if (hatred)\n    {\n        hatred.update({\"system.specification.value\" : target.result})\n    }\n}",
  "SThruXFhxUdNKCG4": "const test = await this.actor.setupCharacteristic(\"int\", {fields: {difficulty: \"easy\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\nawait test.roll();\n\nif (test.failed) {\n   this.actor.addCondition('stunned');\n}\n\nthis.script.scriptNotification(`${this.actor.name} failed the Intelligence Test and gained Stunned Condition!`);",
  "SUfCkHdJg7rttdM1": "let amount = this.effect.sourceActor.system.characteristics.fel.bonus;\nargs.actor.addCondition(\"blinded\",  amount);",
  "sUHuj00IpoZ7Gd03": "return args.skill?.name != game.i18n.localize(\"NAME.Swim\");",
  "svCqdytEOtqFXCcs": "let characteristics = {\r\n    \"ws\" : 0,\r\n    \"bs\" : 0,\r\n    \"s\" : 0,\r\n    \"t\" : 10,\r\n    \"i\" : 15,\r\n    \"ag\" : 0,\r\n    \"dex\" : 10,\r\n    \"int\" : 20,\r\n    \"wp\" : 20,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [\"Channelling\", \"Cool\", \"Dodge\", \"Entertain (Storytelling)\", \"Intuition\", \"Language (Magick)\", \"Lore (Magic)\", \"Perception\"]\r\nlet skillAdvancements = [5, 15, 10, 10, 15, 10, 10, 20]\r\n\r\nlet talents = [\"Arcane Magic\", \"Petty Magic\", \"Second Sight\"]\r\nlet trappings = [\"Hand Weapon\", \"Robes\", \"Quarterstaff\"]\r\nlet specialItems = [ \r\n    {name: \"Magic Item\", type: \"trapping\", trappingType: \"misc\" }, \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWfrp4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nlet ride = await foundry.applications.api.DialogV2.confirm({window : {title : \"Skill\"}, content : \"Add Chaos Steed and +20 Ride (Horse)?\"})\r\n\r\nif (ride)\r\n{\r\n    let skill = await game.wfrp4e.utility.findSkill(\"Ride (Horse)\")\r\n    skill = skill.toObject();\r\n    skill.system.advances.value = 20;\r\n    items = items.concat({name : \"Chaos Steed\", type: \"trapping\", \"system.trappingType.value\" : \"misc\"}, skill)\r\n}\r\n\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "SvFKt9hMcFQjeILA": "args.actor.addCondition(\"entangled\", this.effect.sourceTest.result.overcast.usage.other.current)",
  "SWIJjM2RCmzfr64u": "if (args.test.result.hitloc.result == \"head\" && args.test.result.critical)\n{\n args.test.result.critModifier = args.test.result.critModifier ? args.test.result.critModifier + 40 : 40\n\n  args.test.result.critical += ` (+${args.test.result.critModifier})`\n}\n",
  "sWyO1DNaqb2EdHoW": "if (!this.actor.items.getName(game.i18n.localize(\"NAME.Frenzy\"))) // Either frenzy trait or psychology\r\n{\r\n  // Add Frenzy psychology\r\n  let item = await fromUuid(\"Compendium.wfrp4e-core.items.DrNUTPeodEgpWTnT\")\r\n  let data = item.toObject();\r\n  data.effects[0].disabled = false;\r\n  this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n}\r\n\r\nthis.script.message(`<p><strong>Po wypiciu tej mikstury, ${this.actor.prototypeToken.name}</strong> wpada w Szał Bojowy. Stan ten trwa [[1d10]] rund, i nie może zostać zakończony wcześniej.</p>`, \r\n  {whisper: ChatMessage.getWhisperRecipients(\"GM\"), blind: true })   ",
  "sx7Ikn8WW00gBFb4": "let location = (Math.ceil(CONFIG.Dice.randomUniform() * 2) == 2 ? \"r\" : \"l\") + \"Arm\"\r\n\r\nif (location == \"lArm\")\r\n{\r\n\tthis.script.notification(\"Wylosowano Lewą\")\r\n}\r\nelse if (location == \"rArm\")\r\n{\r\n\tthis.script.notification(\"Wylosowano Prawą\")\r\n}\r\n\r\nthis.effect.updateSource({\"flags.wfrp4e.location\" : location});\r\n\r\nif (location)\r\n{\r\n    let dropped = this.actor.itemTypes.weapon.filter(i => i.isEquipped & i.system.usesHands.includes(location));\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}\r\n\r\nlet roll = await new Roll(\"1d10\").roll()\r\n\r\nroll.toMessage(this.script.getChatData({flavor : `${this.effect.name} (Czas Trwania)`}));\r\n\r\nthis.effect.updateSource({\"duration.rounds\" : roll.total})",
  "syBgPp7rOymCZejX": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"stunned\")\n}",
  "sYlGRLApZ3Ub24ea": "this.actor.system.status.addArmour(3, {source: this.effect.name, magical: true})",
  "syqqBkyP5tGqZ78t": "this.actor.has(\"Niewrażliwość na Psychologię\")?.delete();\r\n\r\nlet roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n\r\nroll.toMessage(this.script.getChatData());\r\n\r\nthis.script.notification(`Usunięto odporność na psychologię, otrzymano Stany Paniki: ${roll.total}`)\r\nthis.actor.addCondition(\"broken\", roll.total, {\"flags.wfrp4e.blasted-mind\" : true})",
  "syRJs8P4aBFB5USD": "if (this.actor?.system?.details?.god?.value !== \"Sigmar\") return\r\nif (this.actor?.currentCareer?.careergroup?.value !== \"Priest\" \r\n  && this.actor?.currentCareer?.careergroup?.value !== \"Warrior Priest\" ) return\r\n  \r\nlet currentSin = this.actor.system.status.sin.value \r\nlet updatedSin = currentSin + 2\r\nawait this.actor.update({\"system.status.sin.value\": updatedSin})",
  "sz0PqS1kroMOzUZk": "let characteristics = {\n    \"ws\" : -15,\n    \"bs\" : -30,\n    \"s\" : 0,\n    \"t\" : 0,\n    \"i\" : -10,\n    \"ag\" : -10,\n    \"dex\" : 0,\n    \"int\" : -20,\n    \"wp\" : 15,\n    \"fel\" : -20\n}\nlet skills = [\"Melee (Brawling)\"]\nlet skillAdvancements = [10]\n\nlet talents = [\"Fearless (Everything)\", \"Frenzy\", \"Implacable\"]\nlet trappings = [\"Plate Breastplate\", \"Plate Bracers\", \"Plate Helm\", \"Plate Leggings\"]\nlet specialItems = []    \nlet items = [];\n\nlet updateObj = this.actor.toObject();\n\nfor (let ch in characteristics)\n{\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\n}\n\nfor (let item of specialItems) {\n    let newItem\n    if (item.type == \"weapon\") {\n        newItem = new ItemWfrp4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\n    } else if (item.type == \"trapping\") {\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\n    } else {\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\n    }\n    items.push(newItem.toObject())\n}\n\nfor (let index = 0; index < skills.length; index++)\n{\n    let skill = skills[index]\n    let skillItem;\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\n    if (skillItem)\n        skillItem.system.advances.value += skillAdvancements[index]\n    else \n    {\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\n        skillItem = skillItem.toObject();\n        skillItem.system.advances.value = skillAdvancements[index];\n        items.push(skillItem);\n    }\n}\n\nfor (let talent of talents)\n{\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\n    if (talentItem)\n    {\n        items.push(talentItem.toObject());\n    }\n    else \n    {\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\n    }\n}\n\nfor (let trapping of trappings) \n{\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\n    if (trappingItem)\n    {\n        trappingItem = trappingItem.toObject()\n\n        trappingItem.system.equipped.value = true;\n\n        items.push(trappingItem);\n    }\n    else \n    {\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\n    }\n}\n\nupdateObj.name = updateObj.name += \" \" + this.effect.name\n\nawait this.actor.update(updateObj)\nconsole.log(\">>>>>>><\", items)\nthis.actor.createEmbeddedDocuments(\"Item\", items);\n",
  "sZwLitzwKBTaFca3": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.5hH73j2NgPdsLCZN\")\r\nlet data = item.toObject();\r\ndata.name = data.name.replace(\"x\", \"Zielonoskórzy, Nieumarli, Chaos\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "T0KBl8iEkcPq08RI": "if (args.applyAP && args.modifiers.ap.magical) \r\n{\r\n    args.modifiers.ap.ignored += args.modifiers.ap.magical\r\n    args.modifiers.ap.details.push(\"<strong>\" + this.effect.name + \"</strong>: Ignore Magical AP (\" + args.modifiers.ap.magical + \")\");\r\n}",
  "T3RfSt3VMEat3iDD": "return args.skill?.name !== game.i18n.localize(\"NAME.Perception\");",
  "t48hkacYdOpzWvK9": "args.context.beatBlade = true;",
  "T4JEEDYCEIUbVHv4": "let fatigued = this.actor.hasCondition(\"fatigued\")\r\n                            if (!fatigued)\r\n                            {\r\n                                this.actor.addCondition(\"fatigued\")\r\n                                ui.notifications.notify(this.actor.name + \" otrzymuje Stan Zmęczenie, którego nie można usunąć dopóki sympton Osłabienie jest niewyleczony.\")\r\n                            }",
  "t56mnblo1kv3gM1M": "return args.skill?.name.includes(`${game.i18n.localize(\"NAME.Melee\")} (${game.i18n.localize(\"SPEC.Basic\")})`) || (args.type == \"weapon\" && args.item?.system.weaponGroup.value == \"basic\");",
  "T5fiTzhXEQAv9Drf": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.rlDZZTj5PXjuRXa2\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key;\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n\r\nlet location = this.item.system.location.key;\r\n\r\nif (location)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}",
  "T74FEjfFrh3f6MKv": "args.wpb = args.sb;",
  "t8LYOuN5peEdWeXP": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.mNoCuaVbFBflfO6X\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "TAw9vXnfyIAl5DGs": "if (this.item.system.quantity.value)\r\n{\r\n    CorruptionMessageModel.createCorruptionMessage(\"minor\", this.script.getChatData());\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n\tactor.applyEffect({effectData : [this.item.effects.contents[1].convertToApplied()]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"None left!\", \"error\")\r\n}",
  "TBpNFRL5uehs0fze": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n\tactor.applyEffect({effectData : [this.item.effects.contents[0]]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "TCgEBuMPPd5SLAsc": "args.fields.modifier -= 15",
  "tCIT1a12Gt6k2ohA": "let resistance\r\nif (this.item.name.includes(\"(\") && !this.item.name.toLowerCase().includes(\"(wybrane zagrożenie)\"))\r\n{\r\n\tresistance = this.item.parenthesesText\r\n}\r\nelse \r\n{\r\n    resistance = await ValueDialog.create({text : \"Wprowadź nazwę Odporności\", title : \"Odporny na\"}) \r\n    \r\n    if (resistance)\r\n    {\r\n        this.item.updateSource({name : `${this.item.name.split(\"(\")[0].trim()} (${resistance})`})\r\n        this.effect.updateSource({name : this.effect.name + ` (${resistance})`})\r\n    }\r\n}    \r\nthis.item.updateSource({\"system.tests.value\" : this.item.system.tests.value.replace(\"Wybrane Zagrożenie\", resistance)})\r\n\r\nif (resistance && !this.effect.name.includes(\"(\"))\r\n{\r\n    this.effect.updateSource({name : this.effect.name += ` (${resistance})`})\r\n}",
  "TcqumwUFAL6V0cty": "if (this.item.getFlag(\"wfrp4e\", \"failedCool\"))\n{\n    this.item.system.AP = {\n        \"head\": 0,\n        \"lArm\": 0,\n        \"rArm\": 0,\n        \"lLeg\": 0,\n        \"rLeg\": 0,\n        \"body\": 0\n      }\n}",
  "TCtXPvDpbfz1yrVZ": "let choice1 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Melee (Basic)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 20\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\nlet choice2 = [\r\n    {\r\n        type : \"skill\",\r\n        name : \"Melee (Two-Handed)\",\r\n        diff : {\r\n            system : {\r\n                advances : {\r\n                    value : 20\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\n    let choice = await foundry.applications.api.DialogV2.wait({\r\n        window : {title : \"Choice\"},\r\n        content : \r\n        `<p>\r\n        Select your choice\r\n        </p>\r\n        <ol>\r\n        <li>Melee (Basic)</li>\r\n        <li>Melee (Two-Handed)</li>\r\n        </ol> \r\n        `,\r\n        buttons : [\r\n            {\r\n                action : \"basic\",\r\n                label : \"Basic\",\r\n                callback : () => {\r\n                    return choice1\r\n                }\r\n            },\r\n            {\r\n                action : \"twoHanded\",\r\n                label : \"Two-Handed\",\r\n                callback : () => {\r\n                    return choice2\r\n                }\r\n            }\r\n        ]\r\n    })\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            item = item.toObject()\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "tcZug8ehU6lyYBd9": "return args.skill?.name != `${game.i18n.localize(\"NAME.Ranged\")} (${game.i18n.localize(\"SPEC.Blackpowder\")})`",
  "tdICiJ26rJrDbxT6": "return args.characteristic != \"i\"",
  "TdjlJro0RRVSh8g8": "return args.skill?.name != game.i18n.localize(\"NAME.Gamble\") && args.skill?.name != game.i18n.localize(\"NAME.SleightOfHand\");",
  "tDrs0aNIYmZPsOoS": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\")\r\n}\r\n",
  "TEiNj5FgkoD3YbhS": "this.actor.hasCondition(\"bleeding\")?.delete()",
  "tFAKRRRfTjQfdQz3": "this.actor.getActiveTokens().forEach(t => t.document.update({\"texture.tint\" : \"\"}));",
  "tG1qGqzBLmAR3WHm": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) \n{\n    let add = 0\n\n    if (test.result.roll % 11 == 0 || test.result.roll == 100) \n    {\n        add = 1 // can't use isFumble if no hit location\n    }\n\n     await this.actor.addCondition(\"stunned\", Math.max(1, Math.abs(test.result.SL)) + add)\n     await this.actor.addCondition(\"blinded\", Math.max(1, Math.abs(test.result.SL)))\n\n}",
  "tg9N6aUo8WRPKj3H": "// If the creature currently has a Surprised, Unconscious, or Entangled Condition, it does not gain this Advantage.\nconst surprised = this.actor.hasCondition(\"surprised\")\nconst unconscious = this.actor.hasCondition(\"unconscious\")\nconst entangled = this.actor.hasCondition(\"entangled\")\nif (entangled || unconscious || surprised) return\n\n// If, at the beginning of its turn, this creature does not have at least Rating Advantage points, its Advantage pool immediately increases to Rating.\nconst grimRating = parseInt(this.item.specification.value) || 1\nif (grimRating > this.actor.status.advantage.value) {\n  this.actor.setAdvantage(grimRating)\n}",
  "TGN070HeJLl3gSMY": "let test = await this.actor.setupCharacteristic(\"ag\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context: { failure: \"Upadek\" }})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"prone\");\r\n}",
  "tGVEV6TLl310mFLP": "let nonmagical = args.modifiers.ap.value - args.modifiers.ap.magical\r\nif (args.applyAP && nonmagical) \r\n{\r\n    let nonmagical = args.modifiers.ap.value - args.modifiers.ap.magical\r\n    args.modifiers.ap.ignored += nonmagical\r\n    args.modifiers.ap.details.push(\"<strong>\" + this.effect.name + \"</strong>: Zignorowano Niemagiczny Pancerz (\" + nonmagical + \")\");\r\n}",
  "tHBlC7SpYiQ7SUGo": "return args.characteristic !== \"t\";",
  "thxlWeZbow8iE7xA": "const uuid = \"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\";\nconst item = await fromUuid(uuid);\nconst data = item.toObject();\ndata.system.specification.value = 1;\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id});",
  "TIoUbjOtj7PTK2t8": "const test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"challenging\"},\r\n  context: {\r\n    failure: `Butcher loses teeth.`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed) {\r\n  const SL = Number(test.result.SL);\r\n  this.script.message(`Butcher loses ${SL} teeth.`);\r\n}",
  "tKBq1nGZo8t6vvQ6": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.5hH73j2NgPdsLCZN\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id})",
  "tkZ8Ybqu518LQYEn": "await args.actor.addCondition(\"ablaze\");\r\n\targs.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.4CMKeDTDrRQZbPIJ\", this.effect, [{\"system.specification.value\": \"Krezok Soulflayer\"}])",
  "TmaS8o33825QUMrx": "let stomp = game.wfrp4e.config.systemItems.stomp;\r\nlet test = await this.actor.setupTrait(stomp)\r\nawait test.roll();",
  "tn6SwmjAuNzqE6dx": "let damage = 0\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\r\nawait test.roll();\r\n\r\nif (test.succeeded)\r\n{\r\n    damage = 10;\r\n}\r\nelse if (test.failed)\r\n{\r\n   damage = 20;\r\n}\r\n\r\nthis.script.message(await this.actor.applyBasicDamage(damage, {loc : \"roll\", hideDSN: true, suppressMsg : true}))",
  "tnE8LF6E3svIlLca": "return args.skill?.name == game.i18n.localize(\"NAME.Research\");",
  "TnFobCxG4pxlYmKr": "let gorCharacteristics = {\n    \"ws\": 45,\n    \"bs\": 30,\n    \"s\": 35,\n    \"t\": 45,\n    \"i\": 30,\n    \"ag\": 35,\n    \"dex\": 25,\n    \"int\": 25,\n    \"wp\": 30,\n    \"fel\": 25\n}\nfor (let char in this.actor.characteristics) {\n    if (this.actor.characteristics[char].initial < gorCharacteristics[char])\n        this.actor.characteristics[char].initial = gorCharacteristics[char]\n}",
  "tnilBagajWM8UGQt": "return args.item?.name != game.i18n.localize(\"NAME.ConsumeAlcohol\")",
  "tNTO1LVN7JqHf4YN": "if (args.test.characteristicKey == \"wp\") \r\n{\r\n    if (args.test.failed)\r\n    {\r\n        this.actor.createEmbeddedDocuments(\"ActiveEffect\", [game.wfrp4e.config.symptomEffects[\"malaise\"]])\r\n        this.script.message(`Test Siły Woli nie udał się, <b>${this.actor.prototypeToken.name}</b>: Otrzymano @Symptom[Apatia]{Apatię} na [[1d10]] godzin`, {whisper: ChatMessage.getWhisperRecipients(\"GM\")})\r\n    }\r\n}",
  "TNWmIkuubqBn38he": "this.effect.deleteCreatedItems();",
  "ToKlHDAjJOsC51ag": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.GlShFJF2TpsNh1FX\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\r\n   \r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    args.actor.addCondition(\"unconscious\")\r\n}",
  "tolkNN5P7oOC8GKZ": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"difficult\"}})\nawait test.roll();\n\nif (test.failed)\n{\n    let sourceActor = this.effect.sourceActor;\n    if (sourceActor)\n    {\n        this.script.message(await this.actor.applyBasicDamage(sourceActor.system.characteristics.wp.bonus, {suppressMsg : true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL}))\n    }\n}",
  "toSrgcvWq9b5eN0K": "let location = await game.wfrp4e.tables.rollTable(\"hitloc\", {hideDSN: true})\r\n\r\nthis.item.updateSource({name : `${this.item.name} (${location.description})`})\r\nthis.script.message(`<strong>Miejsce:</strong> ${location.description}`, { whisper: ChatMessage.getWhisperRecipients(\"GM\") })",
  "TOyQLrugFGzwc5nY": "return !(args.skill?.name.includes(game.i18n.localize(\"NAME.Melee\")) || args.item?.isMelee || args.context.corruption);",
  "TpZItJ5Ugbazaobd": "let locations = [];\r\n\r\nwhile (locations.length < 2)\r\n{\r\n    let loc = await game.wfrp4e.tables.rollTable(\"hitloc\", {hideDSN : true})\r\n    if (!locations.includes(loc.result))\r\n    {\r\n        locations.push(loc.result);\r\n    }\r\n}\r\n\r\nlocationText = locations.map(i => game.wfrp4e.config.locations[i]).join(\", \")\r\n\r\nthis.item.updateSource({name : this.item.name += ` (${locationText})`, \"flags.wfrp4e.locations\" : locations})\r\nthis.effect.updateSource({\"flags.wfrp4e.locations\" : locations})",
  "Tq45Nd8J3eTvHT41": "return args.skill?.name != game.i18n.localize(\"NAME.Perception\") && args.skill?.name != game.i18n.localize(\"NAME.SetTrap\");",
  "TQRL4mZhZohXg1Au": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\ntest.roll();",
  "TrIYdcG3jDER4WgY": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.xsGbDFqK2qh7lsIj\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = \"Pomniejsza\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "TU2xjbJ0zFtytF3J": "return args.skill?.name == game.i18n.localize(\"NAME.CharmAnimal\");",
  "tuIsytv3jl2yAIb2": "return args.skill?.name !== game.i18n.localize(\"NAME.Charm\") && args.skill?.name !== game.i18n.localize(\"NAME.Intimidate\") && args.skill?.name !== game.i18n.localize(\"NAME.Leadership\")",
  "tUwP7TjrOOOnaCYJ": "let fatigued = this.actor.hasCondition(\"fatigued\")\r\nif (fatigued)\r\n{\r\n   this.script.notification(`Usunięte Stany Zmęczenia: ${fatigued.conditionValue}`)\r\n   fatigued.delete();  \r\n}\r\nelse \r\n{\r\n\tthis.script.notification(`Brak Stanów Zmęczenia do usunięcia`)\r\n}",
  "TwgdEucxcHloc4cX": "let choice1 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Nogawice kolcze\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Kolczuga\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Czepiec kolczy\"\r\n    },\r\n]\r\nlet choice2 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Nogawice kolcze\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Kolczuga\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Czepiec kolczy\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzane nogawice\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzany hełm\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzana kurta\"\r\n    },\r\n]\r\nlet choice3 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowy napierśnik\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowe Naramienniki\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Hełm płytowy\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowe Nagolenniki\"\r\n    },\r\n]\r\n\r\n\r\nlet choice = await foundry.applications.api.DialogV2.wait({\r\n    window : {title : \"Wybór zbroi\"},\r\n    content : \r\n    `<p>\r\n    Wybierz\r\n    </p>\r\n    <ol>\r\n        <li>Kolczuga</li>\r\n        <li>Kolczuga i skóra</li>\r\n        <li>Płyta</li>\r\n    </ol> \r\n    `,\r\n    buttons : [\r\n        {\r\n            action : 1,\r\n            label : \"Kolczuga\",\r\n            callback : () => {\r\n                return choice1\r\n            }\r\n        },\r\n        {\r\n            action : 2,\r\n            label : \"Kolczuga i skóra\",\r\n            callback : () => {\r\n                return choice2\r\n            }\r\n        },\r\n        {\r\n            action : 3,\r\n            label : \"Płyta\",\r\n            callback : () => {\r\n                return choice3\r\n            }\r\n        }\r\n    ]\r\n})\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${c.name}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "TwwKxFjK6TNGKbRB": "this.script.message(await this.actor.applyBasicDamage(12, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true}))\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"hard\"}})\nawait test.roll();\nif (test.failed)\n{\n   this.actor.addSystemEffect(\"cold1\")\n}\n\n",
  "TXce477AiXHKbepk": "return args.type !== \"pray\" || args.item?.system?.type?.value !== \"miracle\" || args.item?.system?.god?.value?.toLowerCase() !== \"taal\";",
  "TxfmxDGBj04AQQpt": "let weapon = args.opposedTest.defenderTest.weapon\r\nif (\r\n    !args.opposedTest.result.swapped && \r\n    args.opposedTest.result.winner == \"defender\" && \r\n    args.opposedTest.attackerTest.result.damage && \r\n    weapon && \r\n    weapon?.system.properties.qualities.fast\r\n    )\r\n{\r\n    await args.opposedTest.swap(this.effect.label);\r\n}",
  "TY0xSQ00XXyEr49r": "args.fields.slBonus += 1;",
  "TzgmYRXFXRspIo1i": "this.effect.delete();",
  "U1RUcgP8LD2qeGTm": "return !args.context.reload",
  "U1UpSRJOSjPpO4HS": "let mutations = await warhammer.utility.findAllItems(\"mutation\", \"Wczytywanie Mutacji...\", true)\r\nlet roll = Math.floor(CONFIG.Dice.randomUniform() * mutations.length);\r\nthis.actor.createEmbeddedDocuments(\"Item\", [(await fromUuid(mutations[roll].uuid)).toObject()]);\r\nthis.script.notification(`Otrzymano: ${mutations[roll].name}`)",
  "U26XMie3Kjoddisj": "let stunned = this.actor.hasCondition(\"stunned\")\r\nif (stunned)\r\n{\r\n   this.script.notification(`Usunięto 1 Stan Oszołomienia`)\r\n   this.actor.removeCondition(\"stunned\");\r\n}\r\nelse \r\n{\r\n\tthis.script.notification(`Brak Stanów Oszołomienia do usunięcia`)\r\n}",
  "U2xKn7R1gm8kiQm8": "this.actor.hasCondition(\"broken\")?.delete();\r\n\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.8pVzgPkgWpTJvfhG\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "u3olS2p7Ls1JXfAH": "this.script.message(await game.wfrp4e.tables.formatChatRoll(\"mutatephys\", {}, \"Tzeentch\"));",
  "u46KnlxCjP42F6QY": "let table = await fromUuid(\"RollTable.uATmVS40DQLC1woJ\");\n\nif (table)\n{\n    table.roll();\n}\nelse \n{\n    this.script.notification(\"Personality table not found\", \"error\");\n}",
  "U4A8FDNmwBGTuQZO": "if (args.attacker.has(game.i18n.localize(\"NAME.Undead\")) && !args.attacker.has(game.i18n.localize(\"NAME.Ethereal\")))\r\n{\r\n    args.totalWoundLoss =  Math.floor(args.totalWoundLoss / 2)\r\n    args.modifiers.other.push({label : this.effect.name, details : \"Zmniejszone o połowę\", value : \"× 0.5\"})\r\n}",
  "u4fKgGFEnOCnvvsv": "return args.item?.system?.isRanged;",
  "u5dNZ0s3lWfL8KFb": "return args.fields.charging",
  "U5ndCwcJ1s3Ns26w": "args.item.system.qualities.value.push({name : \"magical\"});\r\nargs.item.system.damage.value += ` + ${parseInt(this.effect.sourceTest.result.SL)}`;\r\nargs.item.name += ` (${this.effect.name})`",
  "u6CYMSZADrfXd48Q": "args.fields.modifier += 20;",
  "U78c4oUjKwyUu6jT": "return (args.skill?.name != game.i18n.localize(\"NAME.Perception\") && args.characteristic != \"fel\")",
  "U7lRf56BFaTfsC6B": "const type = await ValueDialog.create({\n  title: game.i18n.localize(\"SCRIPT.FellstaveDialogTitle\"),\n  text: game.i18n.localize(\"SCRIPT.FellstaveDialogText\")\n}, \"\");\n\nawait this.effect.item.update({name: `${this.effect.item.name} (${type})`});\nconst updates = this.effect.item.effects.map(e => {\n  return {_id: e.id, name: e.name + ` (${type})`}\n});\nthis.effect.item.updateEmbeddedDocuments(\"ActiveEffect\", updates);",
  "U9xh2wriSqCosugW": "if (args.test.options.stag)\r\n{\r\n\tif (parseInt(args.test.result.SL) < 0 || args.test.failed)\r\n\t{\r\n\t\tif (parseInt(args.test.result.SL) < 0)\r\n\t\t{\r\n\t\t\targs.test.result.SL = \"+0\";\r\n\t\t\targs.test.result.description = game.i18n.localize(\"ROLL.MarginalSuccess\");\r\n\t\t}\r\n\t\targs.test.result.outcome = \"success\";\r\n        args.test.result.other.push(`<strong>${this.effect.name}</strong>: Minimum +0 PS`);\r\n\t}\r\n}",
  "uA5qaat5EXzkzltq": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"difficult\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (!test.succeeded)\n{\n    let plague = await fromUuid(\"Compendium.wfrp4e-core.items.Item.aKiuGzlVO51JvsjV\")\n    let obj = plague.toObject();\n    await this.actor.createEmbeddedDocuments(\"Item\", [obj]);\n}\n\nthis.effect.delete();",
  "uACa6u4JLNMRgFlr": "const talents = await Promise.all([game.i18n.localize(\"NAME.FuriousAssault\"), game.i18n.localize(\"NAME.SeaLegsTalent\")].map(game.wfrp4e.utility.findTalent))\r\nthis.actor.createEmbeddedDocuments(\"Item\", talents, {fromEffect : this.effect.id})",
  "UaImulhbPURkLJg2": "return this.actor.attacker && (args.skill?.name == `${game.i18n.localize(\"NAME.Melee\")} (${game.i18n.localize(\"SPEC.Basic\")})` || (args.type == \"weapon\" && args.item?.system.weaponGroup.value == \"basic\"))",
  "uAy4w7y8Uu9POF8C": "args.item.system.qualities.value.push({name : \"impact\"})",
  "UC6G3pFQwzUhrw6F": "return args.skill?.name != game.i18n.localize(\"NAME.CharmAnimal\");",
  "ucF4aiJ1gpDB333G": "if (args.test.options.catfall && (args.test.result.roll <= game.settings.get(\"wfrp4e\", \"automaticSuccess\") || args.test.result.roll <= args.test.target) && !args.test.result.catfall)\r\n{\r\n   args.test.result.other.push(`<b>${this.effect.name}</b>: Obrażenia od upadku zmniejszone o liczbę metrów: ${Number(args.test.result.SL) + 1}`)\r\n   args.test.result.catfall = true; // Prevent duplicate messages\r\n}",
  "UDPsaymtZf39UsMk": "let fatigued = this.actor.hasCondition(\"fatigued\")\r\nif (!fatigued)\r\n{\r\n    this.actor.addCondition(\"fatigued\")\r\n    ui.notifications.notify(\"Zmęczenie dodane do \" + this.actor.name + \", które nie może zostać usunięte, dopóki objaw Apatia nie zostanie uleczony.\")\r\n}",
  "UfkysrAftCs09Fct": "return args.skill.name !== game.i18n.localize(\"NAME.Gamble\")",
  "ugL5IBB6R2yWyMWd": "if (args.totalWoundLoss > 0)\r\n{\r\n    let apply = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content : `<p>Zadać Obrażenia z ${this.effect.name}? Atakujący musiał użyć gołych rąk lub broni do walki w zwarciu wykonanej z metalu.`})\r\n    if (apply)\r\n    {\r\n            \r\n        let damage = 5 + this.actor.characteristics.wp.bonus;\r\n        \r\n        let loc = args.opposedTest.attackerTest.weapon?.system.usesHands[0] || \"rArm\";\r\n        \r\n        let APatLoc = args.opposedTest.attacker.system.status.armour[loc];\r\n        \r\n        let metalAP = APatLoc.layers.reduce((metal, layer) => metal += (layer.metal ? layer.value : 0), 0)\r\n        \r\n        let APused = Math.max(0, APatLoc.value - metalAP); // remove metal AP at location;\r\n        \r\n        damage -= (APused + args.opposedTest.attacker.system.characteristics.t.bonus)\r\n        \r\n        let msg = await args.opposedTest.attacker.applyBasicDamage(damage, {suppressMsg : true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL});\r\n        msg += ` (zignorowano liczbę punktów metalowego pancerza: ${metalAP} z lokacji: ${game.wfrp4e.config.locations[loc]})`\r\n        this.script.message(msg)\r\n    }\r\n}",
  "UgQW0UMPOZ0jwfVJ": "let current = this.actor.status.fortune.value\r\n\r\nthis.actor.update({\"system.status.fortune.value\" : 1 + current})\r\n\r\nthis.script.message(`<b>${this.actor.prototypeToken.name}</b>: Punkty Szczęścia zwiększone z ${current} do ${1 + current}`)",
  "UH5MIzqi2MvEqTwj": "if (args.totalWoundLoss > 0)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    roll.toMessage(this.script.getChatData());\r\n    args.totalWoundLoss += roll.total;\r\n    args.modifiers.other.push({label : this.effect.name, value : roll.total})\r\n}",
  "uhCq5NwjQ2a2idPn": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Tailor)';\nconst difficulty = 'easy';\nconst target = 30;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        \n      }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "uLBDnWC3S0lRitbj": "let test = await this.actor.setupCharacteristic(\"int\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\n\r\nlet opposedResult = test.opposedMessages[0]?.system.opposedHandler?.resultMessage?.system.opposedTest?.result\r\n\r\nif (opposedResult?.winner == \"attacker\")\r\n{\r\n    if (test.failed && (test.result.roll % 11 == 0 || test.result.roll == 100))\r\n    {\r\n        this.actor.addCondition(\"unconscious\")\r\n        await this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + 1})\r\n        this.script.message(\"Otrzymano Punkt Zepsucia\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    }\r\n    else \r\n    {\r\n        await this.actor.addCondition(\"stunned\", 1 + opposedResult.differenceSL);\r\n    }\r\n}\r\nelse \r\n{\r\n    return false;\r\n}",
  "ULmZMLezDamerN04": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Wczytywanie Zaklęć...\", true, [\"system.lore.value\"])\r\n\r\nlet lore = (await game.wfrp4e.tables.rollTable(\"random-caster\", {hideDSN: true})).text\r\nthis.script.notification(lore)\r\nif (lore == \"Wybór Mistrza Gry\") {\r\n   return\r\n}\r\n\r\nelse if (lore == \"Magia Tajemna\") {\r\n    lore = \"Magia Tajemna\"\r\n}\r\n\r\nelse if (lore == \"Magia Prosta\") {\r\n    lore = \"petty\"\r\n}\r\n\r\nelse {\r\n    lore = lore.toLowerCase();\r\n}\r\n\r\nlet spellsWithLore = []\r\nif (lore == \"Magia Tajemna\") {\r\n    spellsWithLore = spells.filter(i => !i.system.lore.value)\r\n}\r\nelse {\r\n    spellsWithLore = spells.filter(i => i.system.lore.value == lore)\r\n}\r\n\r\nlet selectedSpell = spellsWithLore[Math.floor(CONFIG.Dice.randomUniform() * spellsWithLore.length)]\r\nItem.implementation.create(selectedSpell.toObject(), { parent: this.actor}).then(item => {\r\n    this.actor.setupCast(item).then(test => test.roll());\r\n})",
  "UlRSaZG4ZUU6fMND": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'challenging';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        \n      }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "ulXfbycWUu36vdmS": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {appendTitle : ` - ${this.effect.name}`, fields : {difficulty : \"difficult\", slBonus : -1 * this.effect.sourceTest.result.SL}})\r\nawait test.roll();\r\nif (test.succeeded)\r\n{\r\n\tthis.script.notification(`Resisted ${this.effect.name}`);\r\n}\r\nreturn test.failed;",
  "UlygtNPSDlWPIFCI": ",args.fields.slBonus++;,args.fields.slBonus++;,args.fields.slBonus++;",
  "Um6xMMiUftLXJxEt": "return [\"fel\", \"dex\"].includes(args.characteristic)",
  "uMvD2HWFNGqCmrBM": "if (args.test.options.addChargingDice)\r\n{\r\n\targs.test.result.diceDamage = {formula: \"1d10\", value : Math.ceil(CONFIG.Dice.randomUniform() * 10) }\r\n\targs.test.result.additionalDamage += args.test.result.diceDamage.value;\r\n}",
  "UnqnWi0dZYLf5fTT": "let choice1 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Nogawice kolcze\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Kolczuga\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Czepiec kolczy\"\r\n    },\r\n]\r\nlet choice2 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Nogawice kolcze\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Kolczuga\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Czepiec kolczy\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzane nogawice\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzany hełm\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Skórzana kurta\"\r\n    },\r\n]\r\nlet choice3 = [\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowy napierśnik\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowe Naramienniki\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Hełm płytowy\"\r\n    },\r\n    {\r\n        type : \"armour\",\r\n        name : \"Płytowe Nagolenniki\"\r\n    },\r\n]\r\n\r\nlet choice = await foundry.applications.api.DialogV2.wait({\r\n    window : {title : \"Wybór zbroi\"},\r\n    content : \r\n    `<p>\r\n    Wybierz\r\n    </p>\r\n    <ol>\r\n    <li>Kolczuga</li>\r\n    <li>Kolczuga i skóra</li>\r\n    <li>Płyta</li>\r\n    </ol> \r\n    `,\r\n    buttons : [\r\n        {\r\n            action : 1,\r\n            label : \"Kolczuga\",\r\n            callback : () => {\r\n                return choice1\r\n            }\r\n        },\r\n        {\r\n            action : 2,\r\n            label : \"Kolczuga i skóra\",\r\n            callback : () => {\r\n                return choice2\r\n            }\r\n        },\r\n        {\r\n            action : 3,\r\n            label : \"Płyta\",\r\n            callback : () => {\r\n                return choice3\r\n            }\r\n        }\r\n    ]\r\n})\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${c.name}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "uNYstk3eXmWamhzs": "args.actor.addCondition(\"blinded\")",
  "uOHAsKlkFuIaAmjb": "args.actor.modifyWounds(1)",
  "upfK6GM33qZCZjll": "return args.item?.name != `${game.i18n.localize(\"NAME.Play\")} (${game.i18n.localize(\"SPEC.Lute\")})`",
  "UQtXuQmUlTyDKqhe": "let characteristics = {\r\n    \"ws\" : 10,\r\n    \"bs\" : 20,\r\n    \"s\" : 0,\r\n    \"t\" : 10,\r\n    \"i\" : 15,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 40,\r\n    \"wp\" : 45,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [\"Channelling\", \"Cool\", \"Intimidate\", \"Language (Magick)\", \"Language (Nehekharan)\", \"Lore (Magic)\", \"Perception\"]\r\nlet skillAdvancements = [10, 20, 15, 15, 10, 10, 10]\r\nlet talents = [\"Arcane Magic\", \"Hardy\", \"Menacing\", \"Petty Magic\", \"Read/Write\", \"Second Sight\"]\r\nlet trappings = [\"Hand Weapon\"]\r\nlet specialItems = [ \r\n    {name: \"Mouldering Robes\", type: \"trapping\", trappingType: \"clothingAccessories\" }, \r\n    {name: \"Pouches containing ritual components\", type: \"trapping\", trappingType: \"clothingAccessories\" }, \r\n    {name: \"Staff\", type: \"weapon\", damage: \"SB+2\"}, \r\n    {name: \"Dark Magic (Necromancy)\", type: \"talent\"},\r\n]   \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWfrp4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nlet filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = (await ItemDialog.createFromFilters(filters, 3, {text: \"Choose 3 Petty Spells\"})).map(i => i.toObject());\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"\"\r\n    }\r\n]\r\n\r\nlet arcane = (await ItemDialog.createFromFilters(filters, 2, {text : \"Choose 2 Arcane Spells\"})).map(i => i.toObject());\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"name\",\r\n        value: /^((?!\\().)*$/gm, // Remove all spells with parentheses (all arcane spells spells)\r\n        regex: true\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"necromancy\"\r\n    }\r\n]\r\n\r\nlet necromancy = (await ItemDialog.createFromFilters(filters, 1, {text : \"Choose 1 Necromancy Spell\"})).map(i => i.toObject());\r\n\r\narcane.forEach(i => {\r\n    i.img = \"modules/wfrp4e-core/icons/spells/necromancy.png\";\r\n    i.system.lore.value = \"necromancy\";\r\n})\r\nlet spells = [...petty, ...necromancy, ...arcane];\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items.concat(spells));\r\n",
  "ur2HAWDGSGvyAynU": "if (args.combat.combatant.actor.uuid === this.effect.sourceActor.uuid) {\n  this.effect.delete();\n}",
  "uRiAvo9fb3U7FIIy": "if (!this.actor.has(\"Blessing of Might\",\"prayer\")) this.actor.addEffectItems(\"Compendium.wfrp4e-core.items.Item.KSDrXcieyRc37YI7\", this.effect)",
  "UsAHQecRlWL5PhP6": "this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty : \"average\"}}).then(async test =>\n{\n     await test.roll()\n     if (test.failed)\n     {\n         this.actor.corruptionDialog(\"moderate\")    \n     }\n})",
  "UsuwsmU1TUQLQVM2": "let lore = this.effect.name.split(\"(\")[1].split(\")\")[0].toLowerCase();\nreturn !args.spell || (args.type == \"cast\" && [\"petty\", lore].includes(args.spell.system.lore.value));",
  "uSwkYENTOcnfRrqA": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Melee\")) && args.weapon?.system?.attackType != \"melee\"",
  "UTlgF4azrGQZsoDv": "const talents = await Promise.all([game.i18n.localize(\"NAME.Ambi\"), game.i18n.localize(\"NAME.Distract\")].map(game.wfrp4e.utility.findTalent))\r\nthis.actor.createEmbeddedDocuments(\"Item\", talents, {fromEffect : this.effect.id})",
  "UtqUthabeQ4rHDLQ": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.tNWrJUOArwfWXsPw\");\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect: this.effect.id});",
  "UUHQRPRrrRSr9MIA": "const venomFlag = this.effect.getFlag(\"wfrp4e-tribes\", \"venom\");\r\n\r\nif (venomFlag) {\r\n  this.actor.updateEmbeddedDocuments(\"Item\", [venomFlag]);\r\n}",
  "Uvk1X7sEhvv77YkD": "if (!args.flags.distractingApplied)\r\n{\r\n    args.fields.modifier -= 20;\r\n    args.flags.distractingApplied = true;\r\n}",
  "UvycHOjSPm5Zv9KJ": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Dodge\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\nawait test.roll();\nlet baseDamage = \"4\";\nif (test.succeeded)\n    baseDamage = \"0\";\n   \nlet damage = this.effect.sourceItem.system.computeSpellDamage(baseDamage, true) + parseInt(this.effect.sourceTest.result.SL);\n\nthis.script.message(await this.actor.applyBasicDamage(damage, {suppressMsg : true}))\nthis.actor.addCondition(\"ablaze\")",
  "uwdQvZtzy2HVeEzx": "if (args.totalWoundLoss > 0)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    roll.toMessage(this.script.getChatData());\r\n    args.modifiers.other.push({label : this.effect.name, value : roll.total})\r\n    \r\n    args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, skipTargets: true, appendTitle :  \" - \" + this.effect.name}).then(async test => {\r\n        await test.roll();\r\n        if (test.failed)\r\n        {\r\n            this.script.message(\"<strong>\" + args.actor.name + \"</strong> otrzymuje @Table[critbody]{Trafienie Krytyczne} w korpus\", {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \r\n        }\r\n    })\r\n}\r\n",
  "UwjkHRAQHESdYXJs": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\n    \"dim\": 2,\n    \"bright\": 1,\n    \"alpha\": 0.5,\n    \"animation\": {\n        \"speed\": 4,\n        \"intensity\": 4,\n        \"type\": \"pulse\",\n    },\n    \"color\": \"#949bff\",\n}}));",
  "UWrzokgabRKUpnkG": "return [\"t\", \"wp\", \"ag\", \"i\", \"int\"].includes(args.characteristic)",
  "ux3jaLpAUhZ5YqA6": "return args.item?.name != game.i18n.localize(\"NAME.Leadership\") && args.item?.name != game.i18n.localize(\"NAME.Cool\")",
  "Ux4buMc7llF1Kg8p": "if (!this.actor.hasCondition(\"stunned\") && !this.actor.hasCondition(\"unconcscious\"))\n{\n    this.effect.delete();\n}",
  "UXdlnmwVgjc1QpF2": "args.actor.system.details.move.value += 1;\nargs.actor.system.status.carries.max = Math.floor(args.actor.system.status.carries.max * 0.75);",
  "UxVfVoH7cbC9ESDr": "const test = await args.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"challenging\"},\r\n  context: {\r\n    failure: `Gained @Condition[Stunned] Condition.`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n  args.actor.addCondition(\"stunned\");",
  "UYLXm2W6jVn21Age": "args.fields.modifier += 40;",
  "v00nVCRKqqRvY28t": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: {difficulty: \"hard\"}});\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"stunned\", 3)\r\n}\r\n",
  "v18mmwUmuKiVfwzQ": "let test = await this.actor.setupTest(game.i18n.localize(\"NAME.Endurance\"), {appendTitle : ` - ${this.effect.name}`, skipTargets: true});\nawait test.roll();\nif (test.failed)\n{\n    this.actor.addCondition(\"stunned\");\n}",
  "V1D2Uo3WDKYQePU3": "let damage = this.effect.sourceTest.result.damage;\r\n        \r\nlet loc = \"head\"\r\nlet APatLoc = this.actor.system.status.armour[loc];\r\n\r\nlet metalAP = APatLoc.layers.reduce((metal, layer) => metal += (layer.metal ? layer.value : 0), 0)\r\n\r\nlet APused = Math.max(0, APatLoc.value - metalAP); // remove metal AP at location;\r\n\r\ndamage -= (APused + this.actor.system.characteristics.t.bonus)\r\n\r\nlet msg = await this.actor.applyBasicDamage(damage, {suppressMsg : true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL});\r\nmsg += ` (Zignorowano PP metalowego pancerza: ${metalAP} z lokacji ${game.wfrp4e.config.locations[loc]})`\r\nthis.script.message(msg)\r\n",
  "V2lsVTi6q28eL5jl": "args.fields.slBonus += parseInt(this.effect.sourceTest.result.SL)",
  "v4CCxVaVGf9i8U7X": "let cured = await ValueDialog.create({text : \"Wpisz liczbę chorób/klątw, które zostały uleczone\", title : this.effect.name})\r\n\r\nlet damage = 0;\r\n\r\nlet rolls = new Array(cured).fill(\"\").map(i => `max(0, 1d10 - ${this.actor.system.characteristics.fel.bonus})`)\r\n\r\nlet test = new Roll(`${rolls.join(\" + \")}`);\r\nawait test.roll();\r\ntest.toMessage({speaker : {alias : this.actor.name}, flavor : this.effect.name});\r\nthis.script.message(await this.actor.applyBasicDamage(test.total, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true }))",
  "v4ITTsSY9EvCbhZP": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.9h82z72XGo9tfgQS\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "V4PcjtHde941wv6J": "await this.actor.addCondition(\"prone\");\r\nconst SL = this.effect.sourceTest.result.slOver;\r\nconst stunned = 1 + SL;\r\nawait this.actor.addCondition(\"stunned\", stunned);\r\n\r\nif (stunned > this.actor.system.characteristics.t.bonus) {\r\n  const crit = `<a data-action=\"clickTable\" class=\"action-link critical\" data-table=\"crithead\" data-modifier=\"0\"><i class=\"fas fa-list\"></i> Obrażenie Krytyczneical</a>`;\r\n  \r\n  const test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {\r\n    skipTargets: true,\r\n    appendTitle: ` - ${this.effect.name}`,\r\n    fields: {difficulty: \"average\"},\r\n    context: {failure: `Otrzymuje w rękę: ${crit}.`}\r\n  })\r\n  \r\n  await test.roll();\r\n}",
  "v5xrDWcrTNFJkyQB": "let addOption = await foundry.applications.api.DialogV2.confirm({\r\n    window : {title : \"Opcjonalne\"},\r\n    content : \r\n    `\r\n    Dodać opcjonalne przedmioty?\r\n    <p>\r\n    Broń Zasięgowa (Łuk) +10 oraz długi łuk z 12 strzałami\r\n    </p>\r\n    `,\r\n})\r\n\r\nlet choice = []\r\n\r\nif (addOption)\r\n{\r\n    choice = [\r\n        {\r\n            type : \"skill\",\r\n            name : \"Broń Zasięgowa (Łuk)\",\r\n            diff : {\r\n                system : {\r\n                    advances : {\r\n                        value : 10\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            type : \"weapon\",\r\n            name : \"Łuk długi\",\r\n        },\r\n        {\r\n            type : \"ammunition\",\r\n            name : \"Strzała\",\r\n        }\r\n    ];\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet updateObj = this.actor.toObject();\r\nlet items = []\r\nfor (let c of choice)\r\n{\r\n    let existing \r\n    if (c.type == \"skill\")\r\n    {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type)\r\n        if (existing && c.diff?.system?.advances?.value)\r\n        {\r\n            existing.system.advances.value += c.diff.system.advances.value\r\n        }\r\n    }\r\n\r\n    if (!existing)\r\n    {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type)\r\n        if (item)\r\n        {\r\n            let equip = item.system.tags.has(\"equippable\");\r\n            item = item.toObject()\r\n            if (equip)\r\n            {\r\n                item.system.equipped.value = true;\r\n            }\r\n            items.push(foundry.utils.mergeObject(item, (c.diff || {})))\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n\r\n}\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "v6LIG7EwWYALxCpP": "return !this.effect.getFlag(\"wfrp4e\", \"trained\")?.includes(\"entertain\") || (!args.skill?.name.includes(game.i18n.localize(\"NAME.Entertain\")) && !args.skill?.name.includes(game.i18n.localize(\"NAME.Perform\")) && !args.skill?.name.includes(game.i18n.localize(\"NAME.Play\")))",
  "V7qmFwUMCY2tfziH": "this.actor.addCondition(\"stunned\")",
  "V9wD9FWHWxZUOGSI": "let roll = await (new Roll(`max(0, 1d10 - ${this.actor.characteristics.wp.bonus})`).roll())\r\nlet fatigued = roll.total\r\nroll.toMessage(this.script.getChatData());\r\nif (fatigued > this.actor.characteristics.wp.bonus)\r\n{\r\n    this.actor.addCondition(\"unconscious\")\r\n    this.script.notification(`Utrata Przytomności`)\r\n}\r\nelse \r\n{\r\n    fatigued = Math.max(0, fatigued)\r\n    if (fatigued)\r\n        this.actor.addCondition(\"fatigued\", fatigued)\r\n    this.script.notification(`Otrzymano Stany Zmęczenia w liczbie: ${fatigued}`)\r\n}",
  "V9xm4X1x3lPYTQaI": "if (args.extendedTest?.getFlag(\"wfrp4e\", \"fear\"))\r\n{\r\n\tthis.script.notification(\"Niewrażliwy na Strach\");\r\n\targs.extendedTest.delete();\r\n\targs.abort = true;\r\n}",
  "V9zm2hKUVLVZtAcN": "let characteristics = {\r\n  \"ws\" : -10,\r\n  \"bs\" : -10,\r\n  \"s\" : 0,\r\n  \"t\" : 15,\r\n  \"i\" : 15,\r\n  \"ag\" : -20,\r\n  \"dex\" : 0,\r\n  \"int\" : 20,\r\n  \"wp\" : 10,\r\n  \"fel\" : 10\r\n}\r\nlet skills = [\"Charyzma\", \"Splatanie Magii\", \"Występy (Przepowiednie)\", \"Intuicja\"]\r\nlet skillAdvancements = [0, 0, 20, 10]\r\nlet talents = [\"Rozpoznanie Artefaktu\", \"Groźny\", \"Szósty Zmysł\"]\r\nlet traits = [\"Wróżba Losu\", \"Rzucanie Czarów (Tradycja Życia)\", \"Ochrona\"]\r\nlet trappings = []\r\nlet items = [];\r\nlet spells = [\"Pole cierniowe\"];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n  updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n  let skill = skills[index]\r\n  let skillItem;\r\n  skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n  if (skillItem)\r\n      skillItem.system.advances.value += skillAdvancements[index]\r\n  else \r\n  {\r\n      skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n      skillItem = skillItem.toObject();\r\n      skillItem.system.advances.value = skillAdvancements[index];\r\n      items.push(skillItem);\r\n  }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n  let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n  if (talentItem)\r\n  {\r\n      items.push(talentItem.toObject());\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n  }\r\n}\r\n\r\nconst traitRegex = /(?:,?(.+?)(\\+?\\d{1,2}\\+?)?\\s*?(?:\\((.+?)\\)\\s*(\\+?\\d{1,2})?|,|$))/gm\r\nfor (let trait of traits)\r\n{\r\n  let traitMatches = trait.matchAll(traitRegex).next().value\r\n  let traitName = traitMatches[1]\r\n  let traitVal = traitMatches[2] || traitMatches[4] // could be match 2 or 4 depending on if there's a specialization\r\n  let traitSpec = traitMatches[3]\r\n\r\n  let traitItem;\r\n  try {\r\n      traitItem = await WFRP_Utility.findItem(traitName, \"trait\")\r\n  }\r\n  catch { }\r\n  if (!traitItem) {\r\n      ui.notifications.warn(`Could not find ${trait}`, {permanent : true})\r\n  }\r\n  traitItem = traitItem.toObject()\r\n\r\n  if (Number.isNumeric(traitVal))\r\n  {\r\n      traitItem.system.specification.value = traitName.includes('Weapon','Horns','Tail','Tentacles','Bite') ? traitVal - parseInt(characteristicValues[3]/10) : traitVal;\r\n      traitItem.name = (traitItem.name +  ` ${traitSpec ? \"(\"+ traitSpec + \")\" : \"\"}`).trim()\r\n  }\r\n  else \r\n      traitItem.system.specification.value = traitSpec\r\n\r\n  items.push(traitItem)\r\n\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n  let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n  if (trappingItem)\r\n  {\r\n      trappingItem = trappingItem.toObject()\r\n\r\n      trappingItem.system.equipped.value = true;\r\n\r\n      items.push(trappingItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n  }\r\n}\r\n\r\nfor (let spell of spells) \r\n{\r\n  let spellItem = await game.wfrp4e.utility.findItem(spell)\r\n  if (spellItem)\r\n  {\r\n      spellItem = spellItem.toObject()\r\n\r\n      items.push(spellItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${spell}`, {permanent : true})\r\n  }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "VAPsww9x3HAw1sKP": "return !args.context.dodge",
  "VAs1nXvicdQK18Do": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Language\"));",
  "Vb7rgl8T4VRswbnZ": "this.actor.status.addArmour(parseInt(this.item.system.specification.value) || 0, {source: this.effect, damage : this.item.getFlag(\"wfrp4e\", \"APdamage\")})",
  "VbI0Al6rJfypV3qY": "const failure = game.i18n.localize(\"ROLL.ImpressiveFailure\");\r\nconst success = game.i18n.localize(\"ROLL.AstoundingSuccess\");\r\n\r\nargs.test.result.description = args.test.succeeded ? success : failure;",
  "VbL0TgaBAmYjrezZ": "const talents = await Promise.all([game.i18n.localize(\"NAME.Hardy\")].map(game.wfrp4e.utility.findTalent))\r\nthis.actor.createEmbeddedDocuments(\"Item\", talents, {fromEffect : this.effect.id})",
  "vBqrydNzHmEHClqZ": "let maxWounds = this.actor.system.status.wounds.max\r\nthis.actor.update({\"system.status.wounds.value\": maxWounds})",
  "vc4bELo0cWYoILfB": "let choice = await ItemDialog.create(this.actor.itemTypes.disease, 1, \"Wybierz chorobę, którą chcesz uleczyć (Musi być naturalnego pochodzenia)\")\r\n\r\nthis.script.message(`Uleczono <strong>${choice[0]?.name}</strong>`);\r\nchoice[0].delete()",
  "vc8eVKtyjtOGvWlK": "if (!this.actor.hasCondition(\"entangled\"))\n{\n    this.effect.delete();\n}",
  "VcE8Hie2jbpuyuM3": "const vomit = this.actor.itemTags.trait.find(t => t.name === \"Vomit\");\r\nconst name = \"Bileful Vomit\";\r\n\r\nif (!vomit) return;\r\n\r\nconst effect = vomit.effects.find(e => e.name === \"Vomit\");\r\nconst scriptData = effect.system.scriptData;\r\n\r\n// REMINDER\r\n\r\nscriptData.push({\r\n  label:  'Spell Rules Reminder',\r\n  trigger: 'rollTest',\r\n  script: ` \r\n    args.test.result.other.push(\"This Vomit attack follows the rules for the Lore of Nurgle spell @UUID[Compendium.wfrp4e-core.items.Item.XhyZ140R1iA1J7wZ].\");\r\n  `\r\n});\r\n\r\n// /REMINDER\r\n\r\n// update Effect's name\r\nawait effect.update({\r\n  name,\r\n  \"system.scriptData\": scriptData\r\n});\r\n\r\n\r\n// update Trait's name\r\nawait vomit.update({name});\r\n\r\n// copy effect from Stream of Corruption spell\r\nconst effectData = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.XhyZ140R1iA1J7wZ.ActiveEffect.KAXAHr5NdusLTz6k\")).toObject();\r\n\r\nawait vomit.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);",
  "vcM0IgsYVmfWrlO3": "fromUuid(\"Compendium.wfrp4e-core.items.rOV2s6PQBBrhpMOv\").then(item => {\r\n    this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id});\r\n})",
  "VCnNWmRBH28Rx0JH": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"))",
  "vejhfB9aI58iF1vr": "let choice1 = [\r\n    {\r\n        type: \"trait\",\r\n        name: \"Disease\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Infected\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Distracting\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Infestation\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Territorial\",\r\n    }\r\n]\r\n\r\nlet updateObj;\r\nlet actor;\r\n\r\nasync function addTrait(c) {\r\n    let items = [];\r\n    console.log(\"TEST1\", c);\r\n    let existing;\r\n    if (c.type == \"trait\") {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type);\r\n    }\r\n    console.log(\"TEST\", existing);\r\n    if (!existing) {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type);\r\n        if (item) {\r\n            item = item.toObject();\r\n            items.push(item);\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${c}`, { permanent: true });\r\n    }\r\n    console.log(\"WISH LIST2\", choice1, items);\r\n    actor.createEmbeddedDocuments(\"Item\", items);\r\n}\r\n\r\nasync function dialogChoice() {\r\n    for (let c of choice1) \r\n    {\r\n        if (await foundry.applications.api.DialogV2.confirm({window : {title: \"Option\"}, content:`<p>Add Option?</p><ol><li>${c.name}</li></ol>`}))\r\n        {\r\n            addTrait(c)\r\n            c.valid = true;\r\n        }\r\n    }\r\n}\r\n\r\nupdateObj = this.actor.toObject();\r\nactor = this.actor\r\nawait dialogChoice();\r\n\r\n",
  "vFUVWZ1l8wpTjLcx": "if (!this.actor.has(game.i18n.localize(\"NAME.Daemonic\")))\r\n    return\r\n\r\nlet caster = this.effect.sourceActor;\r\nif (caster) \r\n{\r\n    let wp = caster.system.characteristics.wp\r\n    if (this.actor.system.characteristics.wp.value >= wp.value)\r\n    {\r\n        this.script.notification(\"Cel ma wyższą Siłę Woli, brak efektu\")\r\n        return\r\n    }\r\n    this.actor.applyBasicDamage(wp.bonus, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL })\r\n}",
  "vgfs0DXvF5iKrz1M": "return args.characteristic != \"ag\" || this.item.getFlag(\"wfrp4e\", \"passed\")",
  "VGuZMIR1lE8I1F1y": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {fields : {difficulty : \"difficult\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\nif (test.failed) {\n        this.actor.addCondition(\"stunned\");\n}",
  "VINX6TBAJQznhVcN": "const repaired_message = `<p>Finished replacing <em>${this.item.name}</em> with a makeshift one.</p>`;\nconst test = 'Maintenance Crew Test';\nconst difficulty = 'hard';\nconst target = 80;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n      \n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "vj3zArmX27vCxYJW": "return ![\"NAME.Perception\", \"NAME.Navigation\"].map(i => game.i18n.localize(i)).includes(args.skill?.name)",
  "vJQRBxDfPwHens0a": "if (args.totalWoundLoss > 0) \n{\n    args.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields: { difficulty: \"difficult\" } }).then(async test => {\n        await test.roll();\n        if (test.failed) \n        {\n           await args.actor.addCondition(\"poisoned\")\n            this.script.message(await args.actor.applyBasicDamage(3, {suppressMsg : true, damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL }))\n        }\n    })\n}",
  "vjyTKcNrJzX4XWnS": "let SL = parseInt(this.effect.sourceTest.result.SL)\nif (SL < 0)\n   SL = 0\nthis.actor.addCondition(\"fatigued\", 1 + SL)",
  "VKpKq4RSbI1KkUQK": "this.actor.flags.useless[this.effect.getFlag(\"wfrp4e\", \"location\")] = true;",
  "Vkuu70BZV4DPYO2Q": "return args.item?.system?.attackType != \"ranged\"",
  "VLdF2HPnCrNIgp7a": "let items = [];\n\nlet etiquette = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.sYbgpSnRqSZWgwFP\")).toObject();\netiquette.name += \" (Followers of Khorne)\";\n\nitems.push(etiquette);\n\nlet animosity = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.0VpT5yubw4UL7j6f\")).toObject();\n  animosity.system.specification.value = \"Followers of Slaanesh\";\n\nitems.push(animosity);\n\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect : this.effect.id});\n",
  "VlFUDaKUYoBYKYn0": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context : {failure: \"Otrzymano 1 Punkt Zepsucia\"}})\r\nawait test.roll();\r\nif (test.failed && this.actor.type == \"character\")\r\n{\r\n    this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + 1})\r\n    this.script.message(\"Otrzymano 1 Punkt Zepsucia\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "VlHuDIAvPr8JM1P5": "return args.skill?.name !== game.i18n.localize(\"NAME.Row\");",
  "vM2BPwYhHQaBAt2C": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.KII1gWnxIZ8HzmU5\");\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})",
  "vn13U388mwquGN9y": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.wGTD2LezlI6Atyy0\");\nlet leader = item.toObject();\n\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.Item.u0CFf3xwiyidD9T5\");\nlet luck = item.toObject();\nawait this.actor.createEmbeddedDocuments(\"Item\", [leader, luck], {fromEffect : this.effect.id});",
  "VNOKTzCrFbZ6PJUj": "return ![game.i18n.localize(\"NAME.CharmAnimal\"), game.i18n.localize(\"NAME.Endurance\"), game.i18n.localize(\"NAME.OutdoorSurvival\")].includes(args.skill?.name)",
  "vNp9wgdSvnNEjZyS": "args.fields.slBonus -= 2; ",
  "Vns6WrafVq8NjX7t": "return args.skill?.name != game.i18n.localize(\"NAME.Heal\")",
  "vNUGuypkhx2P5YIA": "return args.characteristic !== \"fel\"",
  "vPG4rV640aSzKzxe": "return !this.actor.flags.useless[this.item.system.location.key[0] + \"Arm\"] || [\"fel\", \"wp\", \"int\", \"t\"].includes(args.characteristic)",
  "vphNSTVxfZjApblV": "const bonus = this.effect.getFlag(\"wfrp4e-tribes\", \"bonus\");\r\n\r\nargs.fields.modifier += bonus;",
  "VQaC6ynouW5EQCbC": "let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n\r\nawait roll.toMessage(this.script.getChatData());\r\n\r\nthis.script.message(await this.actor.applyBasicDamage(roll.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true}));\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name});\r\nawait test.roll();\r\n\r\nif (test.succeeded)\r\n{\r\n    return false;\r\n}",
  "VqTrKPtxv9hpn0Hr": "return args.skill?.name != `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`",
  "vS2D9QUslR7ZtXXm": "let test = await this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    roll.toMessage(this.script.getChatData())\r\n\r\n    this.script.message(await this.actor.applyBasicDamage(roll.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg : true}))\r\n}",
  "vSDMygIT9nNvEGWG": "// Each time the blade is used, the GM should secretly roll a d10.\r\n// On a 1, its poison has run dry, \r\n// and the next time it is employed it will shatter.\r\n\r\nif (Math.ceil(CONFIG.Dice.randomUniform() * 10) == 1) {\r\n  this.item.setFlag(\"wfrp4e\", \"brittle\", true)\r\n  ChatMessage.create({\r\n    content: `\r\n      <strong>${this.item.name}</strong>: trucizna skończyła się. Podczas następnego użycia zostanie roztrzaskany.`, \r\n    whisper: ChatMessage.getWhisperRecipients(\"GM\"),\r\n    blind: true\r\n  })\r\n}\r\n",
  "vTebTUzXortx1Qut": "let specification = Number(this.item.specification.value) || 1;\nargs.actor.system.characteristics.t.initial += 10 * specification;\nargs.actor.system.status.carries.max -= Math.floor(args.actor.system.status.carries.max * 0.1 * specification);\nargs.actor.system.details.price.gc += args.actor.system.details.price.gc * 0.1 * specification;",
  "VTS4RzbmReI87K9a": "args.fields.slBonus = Math.floor(this.item.system.total.value * 0.1);",
  "VTzpExK3QSCaFQPf": "if (args.equipped) \n{\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.SfUUdOGjdYpr3KSR\")\n    let regen = item.toObject();\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.kJNAY1YRaCy9IgmT\");\n    let terror = item.toObject();\n    terror.system.specification.value = 2;\n    this.actor.createEmbeddedDocuments(\"Item\", [regen, terror], {fromEffect : this.effect.id});\n} \nelse \n{\n  this.effect.deleteCreatedItems();\n}",
  "VuE1mhrB6X6MYTzg": "return args.characteristic == \"fel\"",
  "vUpMQlbwDiYfMCNS": "this.actor.addCondition(\"ablaze\");",
  "VurA2XNqC0d9U49C": "this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test =>\n{\n     await test.roll()\n     if (test.failed)\n     {\n         this.actor.addCondition(\"fatigued\")    \n     }\n})",
  "vuzRRj5d9XdNYx3o": "let broken = this.actor.hasCondition(\"broken\")\r\nif (broken)\r\n{\r\n    broken.delete();\r\n    this.script.notification(\"Usunięto Stan Panika\")\r\n}",
  "vvdo1NxjmGVkmFCT": "await this.actor.addCondition(\"stunned\");\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"hard\"}, skipTargets: true, appendTitle :  \" - \" + this.effect.name})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n\tawait this.actor.addCondition(\"prone\")\r\n\tawait this.actor.addCondition(\"stunned\")\r\n}\r\n          \r\nlet location = this.item.system.location.key;\r\n\r\nif (location)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono przedmiot(y): ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}",
  "vvVhAqreedtmOR9b": "args.totalWoundLoss = Math.max(0, args.totalWoundLoss - 1)\nargs.modifiers.other.push({label : this.effect.name, value : -1)",
  "VXERNoc5IazQGuGO": "if (args.applyAP && args.modifiers.ap.metal)\n{\n    args.modifiers.ap.ignored += args.modifiers.ap.metal\n    args.modifiers.other.push({value : args.modifiers.ap.metal, label : this.effect.name, details : \"Add Metal AP to Damage\" })\n    args.modifiers.ap.details.push(\"<strong>\" + this.effect.name + \"</strong>: Ignore Metal (\" + args.modifiers.ap.metal + \")\");\n    args.modifiers.ap.metal = 0\n}",
  "vY3xeTTL3ghPrJpN": "this.actor.addCondition(\"entangled\");",
  "vZ5HCrhY8e4R1TrG": "let eye = await fromUuid(\"Compendium.wfrp4e-core.items.weczkAMPlTjX7lqU\")\r\nlet nose = await fromUuid(\"Compendium.wfrp4e-core.items.SpPRZZRHxly7uo2G\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [eye, nose]);",
  "VzgTGb5QXKoyPNh3": "if (args.attackerTest.weapon && args.defenderTest.weapon)\n{\n   let attackerReach = game.wfrp4e.config.reachNum[args.attackerTest.weapon.reach.value]\n   let defenderReach = game.wfrp4e.config.reachNum[args.defenderTest.weapon.reach.value]\n   \n   if (attackerReach == defenderReach)\n      defenderReach  = defenderReach < 7 ? defenderReach  + 1 : defenderReach \n\n   attackerReach = warhammer.utility.findKey(attackerReach, game.wfrp4e.config.reachNum)\n   defenderReach = warhammer.utility.findKey(defenderReach, game.wfrp4e.config.reachNum)\n\n  args.attackerTest.weapon.reach.value = attackerReach\n  args.defenderTest.weapon.reach.value = defenderReach\n}",
  "vzMxIDjRlQSxXtCW": "// Remove the miscast if doubles rolled and succeeded\r\n// Decrement the major miscast to minor miscast\r\nif(args.test.succeeded && args.test.result.tables.miscast && args.test.result.roll % 11 == 0)\r\n{\r\n    if (args.test.result.tables.miscast.key == \"minormis\")\r\n    {\r\n        delete args.test.result.tables.miscast;\r\n    }\r\n    else if (args.test.result.tables.miscast.key == \"majormis\")\r\n    {\r\n        args.test.result.tables.miscast.key = \"minormis\"\r\n        args.test.result.tables.miscast.label = game.i18n.localize(\"ROLL.MinorMis\");\r\n    }\r\n}",
  "VzO0ZDcTWvaBn4vm": "if (args.test.preData.skillName?.includes(game.i18n.localize(\"NAME.Language\")) || args.test instanceof game.wfrp4e.rolls.CastTest)\r\n{\r\n\tif (parseInt(args.test.result.SL) > 0 || args.test.succeeded)\r\n\t{\r\n\t\tif (parseInt(args.test.result.SL) > 0)\r\n\t\t{\r\n\t\t\targs.test.result.SL = \"-0\";\r\n\t\t\targs.test.result.description = game.i18n.localize(\"ROLL.MarginalFailure\");\r\n\t\t}\r\n\t\targs.test.result.outcome = \"failure\"\r\n        args.test.result.other.push(`<strong>${this.effect.name}</strong>: Maksymalnie -0 PS`);\r\n\t}\r\n}",
  "vzSj3vvPryp02EVC": "if (args.test.failed)\n                            {\n                                let applicableCharacteristics = [\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"];\n                                if (applicableCharacteristics.includes(args.test.characteristicKey))\n                                {\n                                    this.actor.addCondition(\"stunned\");\n                                }\n                            }",
  "w3r54pKZQKaH2Yer": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.pTorrE0l3VybAbtn\")\r\nlet data = item.toObject();\r\nlet slOver = this.effect.sourceTest.result.slOver;\r\nlet overcast = this.effect.sourceTest.result.overcast\r\nslOver -= ((overcast.total - overcast.available) * 2) // If they used an overcast, subtract 2 SL for each one\r\nlet added = Math.floor(slOver / 3) || 0\r\ndata.system.specification.value = 1 + added; // For each +3 SL, add 1 specification\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "w4JKuTECFmu3YmTR": "return !args.skill?.name?.includes(game.i18n.localize(\"NAME.Ride\"))",
  "w4RuGIfseGoxXA3k": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'challenging';\nconst target = 20;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "w4zubIHP0XgMXsFe": "return !args.context.terror && !args.extendedTest?.getFlag(\"wfrp4e\", \"fear\");",
  "W5qtA7Ul5cOj18Nd": "this.item.update({\"system.AP\" : {lArm : 3, rArm : 3, lLeg : 3, rLeg: 3}});",
  "w6tr8mWy0ZSUkHLt": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.77p3QRKgFWakkndF\",     // Blather\n  \"Compendium.wfrp4e-core.items.Item.b4x1qEWcevX7xK58\",       // Schemer\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "w7K0lbxQKJ2tsc6f": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.EO05HX7jql0g605A\")\nlet data = item.toObject();\ndata.system.specification.value = 60\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "W9nyUNQStMr1pUHJ": "if (args.opposedTest.result.hitloc.value == this.item.system.location.key)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 1);\r\n    this.script.notification(\"Otrzymano Stan Krwawienie\")\r\n}",
  "WaeL2I8VVJmBBKHk": "const vomit = this.actor.itemTags.trait.find(t => t.name === \"Vomit\");\r\nconst name = \"Corrupting Vomit\";\r\n\r\nif (!vomit) return;\r\n\r\nconst effect = vomit.effects.find(e => e.name === \"Vomit\");\r\nconst scriptData = effect.system.scriptData;\r\n\r\nscriptData[0].script = `\r\nargs.actor.addCondition(\"stunned\");\r\nargs.actor.corruptionDialog(\"moderate\");\r\n`\r\n\r\nawait effect.update({\r\n  name,\r\n  \"system.scriptData\": scriptData\r\n});\r\n\r\nawait vomit.update({name});",
  "wAETU6aTRr9d4oCU": "args.fields.slBonus++;",
  "wAntJhgb8Og5vJXh": "args.context.staunchBleeding = true;",
  "wb1DpSdIhSqYG5cp": "args.fields.slBonus = -1 * parseInt(this.effect.sourceTest.result.SL)",
  "WB6sIpLEPC8YPX67": "if (args.context.dodge)\r\n{\r\n\targs.abort = true;\r\n\tthis.script.notification(\"Nie można unikać!\")\r\n}\r\nreturn [\"t\", \"int\", \"wp\", \"fel\"].includes(args.characteristic)",
  "wbM7tpw4TxvadcWm": "let items = this.effect.itemTargets;\r\nlet msg = \"\";\r\nfor(let item of items)\r\n{\r\n    if (item.system.properties.qualities.durable)\r\n    {\r\n        await item.update({\"system.qualities.value\" : []});\r\n        msg += `<p>${item.name}: utracono wszystkie Zalety</p>`\r\n    }\r\n    else \r\n    {\r\n        msg += `<p>${item.name}: rozsypano w pył!</p>` \r\n        await item.update({name : item.name + \" (Pył)\"})\r\n    }\r\n}\r\nif(msg)\r\n{\r\n    this.script.message(msg);\r\n}",
  "we6JUzDvybekAbtn": "return args.type !== \"channelling\" && !args.skill?.name.includes(game.i18n.localize(\"NAME.Channelling\")) && args.skill?.name !== `${game.i18n.localize(\"NAME.Language\")} (${game.i18n.localize(\"SPEC.Magick\")})`",
  "WeTlTniskT3Ej6vg": "args.modifiers.other.push({label : this.effect.name, value : 2})",
  "wFHjQyCR6Wzn6TeQ": "this.actor.system.status.addArmour(1, {source: this.effect, magical: true});",
  "Wh1VV3javfzcV3bP": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Loading Spells\", true, [\"system.lore.value\"]);\r\n\r\nspells = spells.filter(i => [\"dark\", \"light\", \"fire\", \"life\", \"beasts\", \"shadows\", \"death\", \"heavens\", \"metal\"].includes(i.system.lore.value)).sort((a, b) => a.name > b.name ? 1 : -1);\r\n\r\nlet choices = await ItemDialog.create(spells, 7, {text : \"Choose 7 taken from any combination of spells from Colour Magic Lore, the Lore of Witchcraft, or Lore of Dark Magic\", title : this.effect.name})\r\n\r\nthis.actor.addEffectItems(choices.map(i => i.uuid), this.effect)",
  "whUSkaR1yem21bXp": "let characteristics = {\r\n  \"ws\" : 10,\r\n  \"bs\" : 5,\r\n  \"s\" : 0,\r\n  \"t\" : 5,\r\n  \"i\" : 10,\r\n  \"ag\" : 0,\r\n  \"dex\" : 6,\r\n  \"int\" : -5,\r\n  \"wp\" : 0,\r\n  \"fel\" : 10\r\n}\r\nlet skills = [\"Broń Biała (Podstawowa\", \"Tropienie\"]\r\nlet skillAdvancements = [8, 7]\r\nlet talents = [\"Berserkerska Szarża\", \"Cios Mierzony\", \"Morderczy Atak\"]\r\nlet traits = [\"Latanie (8)\", \"Furia\", \"Rój\", \"Tropiciel\"]\r\nlet trappings = []\r\nlet items = [];\r\nlet spells = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n  updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n  let skill = skills[index]\r\n  let skillItem;\r\n  skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n  if (skillItem)\r\n      skillItem.system.advances.value += skillAdvancements[index]\r\n  else \r\n  {\r\n      skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n      skillItem = skillItem.toObject();\r\n      skillItem.system.advances.value = skillAdvancements[index];\r\n      items.push(skillItem);\r\n  }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n  let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n  if (talentItem)\r\n  {\r\n      items.push(talentItem.toObject());\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n  }\r\n}\r\n\r\nconst traitRegex = /(?:,?(.+?)(\\+?\\d{1,2}\\+?)?\\s*?(?:\\((.+?)\\)\\s*(\\+?\\d{1,2})?|,|$))/gm\r\nfor (let trait of traits)\r\n{\r\n  let traitMatches = trait.matchAll(traitRegex).next().value\r\n  let traitName = traitMatches[1]\r\n  let traitVal = traitMatches[2] || traitMatches[4] // could be match 2 or 4 depending on if there's a specialization\r\n  let traitSpec = traitMatches[3]\r\n\r\n  let traitItem;\r\n  try {\r\n      traitItem = await WFRP_Utility.findItem(traitName, \"trait\")\r\n  }\r\n  catch { }\r\n  if (!traitItem) {\r\n      ui.notifications.warn(`Could not find ${trait}`, {permanent : true})\r\n  }\r\n  traitItem = traitItem.toObject()\r\n\r\n  if (Number.isNumeric(traitVal))\r\n  {\r\n      traitItem.system.specification.value = traitName.includes('Weapon','Horns','Tail','Tentacles','Bite') ? traitVal - parseInt(characteristicValues[3]/10) : traitVal;\r\n      traitItem.name = (traitItem.name +  ` ${traitSpec ? \"(\"+ traitSpec + \")\" : \"\"}`).trim()\r\n  }\r\n  else \r\n      traitItem.system.specification.value = traitSpec\r\n\r\n  items.push(traitItem)\r\n\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n  let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n  if (trappingItem)\r\n  {\r\n      trappingItem = trappingItem.toObject()\r\n\r\n      trappingItem.system.equipped.value = true;\r\n\r\n      items.push(trappingItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n  }\r\n}\r\n\r\nfor (let spell of spells) \r\n{\r\n  let spellItem = await game.wfrp4e.utility.findItem(spell)\r\n  if (spellItem)\r\n  {\r\n      spellItem = spellItem.toObject()\r\n\r\n      items.push(spellItem);\r\n  }\r\n  else \r\n  {\r\n      ui.notifications.warn(`Could not find ${spell}`, {permanent : true})\r\n  }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "WiYtNU2Y5BJfIpeM": "let location = this.item.system.location.key;\r\n\r\nif (location)\r\n{\r\n    let dropped = this.item.system.weaponsAtLocation;\r\n\r\n    if (dropped.length)\r\n    {\r\n        this.script.notification(`Upuszczono ${dropped.map(i => i.name).join(\", \")}!`)\r\n        for(let weapon of dropped)\r\n        {\r\n            await weapon.system.toggleEquip();\r\n        }\r\n    }\r\n}",
  "WJkwIrdj4NceOYe8": "return args.characteristic !== 'fel';",
  "WKXyVHQwQCNTfSKv": "if ((args.item.type == \"weapon\" || args.item.system.attackType) && !args.item.isMagical )\r\n{\r\n    args.item.system.qualities.value.push({name : \"magical\"})\r\n}",
  "wkY4Uj2NjT8mQNT4": "args.item.system.damage.value = \"+6\";\nargs.item.system.qualities.value.push({name : \"magical\"});",
  "WnWA0e0bgqBsZp2L": "this.item.update({\"system.twohanded.value\" : !this.item.system.twohanded.value})",
  "Wo4wQKUxSItAhRzZ": "let lore = this.effect.name.split(\"(\")[1].split(\")\")[0].toLowerCase();\n\n// If channelling corresponding lore\nif (args.type == \"channelling\" && args.spell.system.lore.value == lore)\n    args.prefillModifiers.slBonus  += 3\n// If channelling or casting different lore\nelse if (args.spell.system.lore.value != lore && args.spell.system.lore.value != \"petty\")\n    args.prefillModifiers.slBonus  -= 1",
  "WO5n7Vbx8AgoVrwC": "let characteristics = {\r\n    \"ws\" : 0,\r\n    \"bs\" : 0,\r\n    \"s\" : 0,\r\n    \"t\" : 0,\r\n    \"i\" : 10,\r\n    \"ag\" : 0,\r\n    \"dex\" : 0,\r\n    \"int\" : 10,\r\n    \"wp\" : 5,\r\n    \"fel\" : 5\r\n}\r\nlet skills = [\"Intuicja\", \"Wiedza (Lokalna)\", \"Percepcja\"]\r\nlet skillAdvancements = [10, 10, 10]\r\nlet talents = []\r\nlet trappings = [\"Kolczuga\", \"Nogawice kolcze\", \"Czepiec kolczy\", \"Broń ręczna\"]\r\nlet items = []\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "WOpRJluHKER1MdgI": "let difficulty = \"\"\n                            if (this.effect.name.includes(\"Moderate\"))\n                                difficulty = \"easy\"\n                            else if (this.effect.name.includes(\"Severe\"))\n                                difficulty = \"average\"\n                            else\n                                difficulty = \"veasy\"\n        \n                            let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {context : {failure : this.actor.name + \" dies from Blight\"}, fields: {difficulty}, appendTitle : \" - Blight\"})\n                            await test.roll();\n                            if (test.failed)\n                            {\n                                this.actor.addCondition(\"dead\");\n                            }",
  "WPQbVpD1uwSLAXq1": "if (this.actor.system.status.wounds.value == 0)\r\n{\r\n\tthis.actor.addCondition(\"dead\");\r\n}",
  "Wqff6ICWYzvLDYC8": "if (this.actor.system.details.experience.current < 100) {\n  return this.script.notification(game.i18n.localize(\"SCRIPT.NotEnoughXP\"))\n}\n\nlet item = await game.wfrp4e.utility.findItem(\"Sensory Sharing\", \"trait\")\nthis.actor.createEmbeddedDocuments(\"Item\", [item]);\nlet expLog = foundry.utils.duplicate(this.actor.details.experience.log || []);\nexpLog.push({amount : 100, reason: item.name, spent: this.actor.details.experience.spent + 100, total: this.actor.details.experience.total, type: \"spent\"});\nthis.actor.update({\n    \"system.details.experience.spent\": this.actor.details.experience.spent + 100,\n    \"system.details.experience.log\": expLog\n  });",
  "WR0Kqn8CF5iwToak": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Tailor)';\nconst difficulty = 'difficult';\nconst target = 40;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "WRe1eGmGVGejPcS8": "let wind = this.effect.name.split(\" \")[2]\nreturn args.type == \"cast\" && game.wfrp4e.config.magicWind[args.item.system.lore.value] == wind;",
  "wRxgpGmlUpe7nwzJ": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\n      \"dim\": 0,\n      \"bright\": 0,\n      \"angle\": 360,\n      \"alpha\": 0.5,\n      \"animation\": {\n          \"speed\": 0,\n          \"intensity\": 0,\n          \"type\": \"none\",\n      },\n      \"color\": \"\",\n  }}));",
  "wS6OIR3QN4mOUHn0": "if (args.totalWoundLoss > args.actor.characteristics.t.bonus)\r\n{\r\n  args.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\")).then(async test => {\r\n    await test.roll()\r\n    if (test.failed) {\r\n      let disease = await fromUuid(\"Compendium.wfrp4e-core.items.M8XyRs9DN12XsFTQ\")\r\n      disease = disease.toObject()\r\n      disease.system.duration.active = true\r\n      args.actor.createEmbeddedDocuments(\"Item\", [disease])\r\n    }\r\n  })\r\n}",
  "wsqNM4NHnwaAAQym": "    args.applyAP = false;\r\n\r\n    this.script.notification(\"Ten test dotyczy tylko przestępców, w przeciwnym razie zamknij okno dialogowe.\");\r\n    this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"average\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test => \r\n    {\r\n      await test.roll();\r\n      if (test.failed)\r\n      {\r\n        args.actor.addCondition(\"unconscious\");\r\n      }\r\n    });",
  "WtbSIghR0q4euE7J": "if (args.effect.conditionId == \"ablaze\")\n{\n    args.data.formula = `(${args.data.formula}) * 2`;\n}",
  "WTRYAEzwxRuGENyI": "        // Every living creature within 10 yards, other than the wielder of the hammer,\n        // must make a Challenging (+0) Endurance Test \n\n        let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {\n            skipTargets: true, appendTitle :  \" - \" + this.effect.name,\n            fields: {difficulty: \"challenging\"}\n        })\n        \n        await test.roll();\n        if (test.failed)\n        {\n            // or gain a Deafened Condition \n            this.actor.addCondition(\"deafened\");\n            // and suffer 1d10 Wounds which bypass armour but not Toughness Bonus.\n            let damage = (await new Roll(\"1d10\").roll());\n            await damage.toMessage(this.script.getChatData());\n            this.script.message(await this.actor.applyBasicDamage(damage.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP, suppressMsg: true}))\n        }",
  "wUlYLBT59Efys5aS": "args.actor.addCondition(\"prone\");",
  "WwxXgsNxlccmqTze": "this.actor.addCondition(\"dead\")",
  "WY3DajPRGcMNt158": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.MVI0lXcg6vvtooAF\")\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id})",
  "wyTCozh9qGTx6yK0": "if (args.context.terror || args.extendedTest?.getFlag(\"wfrp4e\", \"fear\"))\r\n{\r\n\targs.abort = true;\r\n\tthis.script.notification(\"Nie musi robić testów strachu lub grozy\");\r\n}",
  "wzkxiKjxVEeNS1di": "let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nthis.script.message(await this.actor.applyBasicDamage(roll.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true}))\r\n\r\nawait this.actor.addCondition(\"deafened\", 3)\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty: \"average\" }, skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context : {failure: \"Otrzymano Stan Paniki\", success : \"Uniknięto Stanu Paniki\"}})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"broken\")\r\n}",
  "WzMmwjZbhyCbHxyZ": "this.actor.status.encumbrance.state += 2\r\nthis.actor.status.encumbrance.pct = 100;",
  "X08401eOhKJrhNf1": "const grim = this.actor.items.find(i => i.type === \"trait\" && i.name.includes(\"Grim\"));\n\nif (args.options?.deltaAdv > 0 && this.actor.hasCondition(\"engaged\") && grim.specification.value !== 4) {\n  grim.update({\"system.specification.value\": 4});\n}\n\nif (!this.actor.hasCondition(\"engaged\") && grim.specification.value !== 2) {\n  grim.update({\"system.specification.value\": 2});\n}",
  "x2RLUUNB7BiIDYCP": "let difficulty = \"\"\r\nif (this.effect.name.includes(\"Umiarkowany\"))\r\n    difficulty = \"easy\"\r\nelse if (this.effect.name.includes(\"Poważny\"))\r\n    difficulty = \"average\"\r\nelse\r\n    difficulty = \"veasy\"\r\n\r\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {context : {failure : this.actor.name + \" umiera z powodu uwiądu\"}, fields: {difficulty}, skipTargets: true, appendTitle :  \" - Uwiąd\"})\r\nawait test.roll();\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"dead\");\r\n}",
  "X3bLbOfcJAftOMa7": "return [\"ws\", \"bs\", \"ag\"].includes(args.characteristic)",
  "X3vpmNUj9SL2CDnF": "let item = args.actor.items.find(i => i.name.includes(\"Flying Jib\"));\nitem.name += ` (Disabled by ${this.item.name})`;",
  "x76tKw4L8dX00ikE": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.uqGxFOEqeurwkAO3\")\nlet data = item.toObject();\nfoundry.utils.setProperty(data, \"flags.wfrp4e.breath\", \"fire\")\ndata.system.specification.value = 5\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "X7ikFOGKYzTMr4d1": "args.fields.difficulty = \"difficult\"",
  "x8XK2fzzXCnSwfjt": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Athletics\"))\r\nawait test.roll();\r\n\r\nif (test.succeeded)\r\n{\r\n\tthis.actor.removeCondition(\"prone\");\r\n}",
  "x9G6Du5EWV6byf4C": "if (parseInt(this.effect.sourceTest.result.SL) >= 3)\n{\n     this.actor.modifyWounds(this.actor.system.characteristics.t.bonus * 2)\n}\nelse \n{\n   this.actor.modifyWounds(this.actor.system.characteristics.t.bonus)\n}",
  "x9iKFYYc4Ocy8PTS": "let item = this.effect.getCreatedItems()?.[0];\r\nChatMessage.create({content : \"<em>Gracja ponad stylem</em>\", speaker : ChatMessage.getSpeaker({token: this.actor.getActiveTokens()[0]?.document, actor: this.actor})}, {chatBubble : true})\r\n\r\nlet choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n    \"nobles\" : \"Szlachta\",\r\n    \"guilders\" : \"Gildie\",\r\n    \"servants\" : \"Słudzy\"\r\n}), 1, \"Wybierz grupę społeczną\")\r\n\r\nlet name = choice[0]?.name\r\n\r\nif (!name)\r\n{\r\n    return;\r\n}\r\n\r\nif (item)\r\n{\r\n    item.update({\r\n        name : item.name.split(\"(\")[0] + ` (${n})`, \r\n        \"system.tests.value\" : item.system.tests.value.split(\"(\")[0] + ` (${name}`\r\n    })\r\n}\r\nelse \r\n{\r\n    item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.sYbgpSnRqSZWgwFP\");\r\n    let data = item.toObject();\r\n    data.name += ` (${name})`\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect: this.effect.id})\r\n}",
  "xBpLQa7yBPczDMY8": "    let scythe = (await fromUuid(\"Compendium.wfrp4e-core.items.CXg7XOFJwu4LZ9LM\")).toObject();\r\n    scythe.name = \"Kosa Shyish\";\r\n    scythe.system.damage.value = \"WPB + 3\"\r\n    scythe.system.equipped = true;\r\n    scythe.img = this.effect.icon;\r\n    scythe.system.qualities.value.push({name : \"magical\"})\r\n    this.actor.createEmbeddedDocuments(\"Item\", [scythe], {fromEffect : this.effect.id})",
  "XCAfy460IotarQek": "return false;",
  "XClTZOjuhcxWLF51": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty: \"difficult\"}, skipTargets: true, appendTitle :  ` - ${this.effect.name}`})\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"stunned\")\r\n}\r\n\r\n\r\nlet item = await fromUuid(\"Compendium.wfrp4e-core.items.4lj1ik958mbgAlaF\")\r\nlet data = item.toObject();\r\ndata.system.location.key = this.item.system.location.key\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\r\n",
  "XcvDYNZgJ2rpAdDV": "let fatigued = this.actor.hasCondition(\"fatigued\")\r\nif (!fatigued)\r\n{\r\n    this.actor.addCondition(\"fatigued\")\r\n    ui.notifications.notify(\"Zmęczenie dodane do \" + this.actor.name + \", które nie może zostać usunięte, dopóki objaw Apatia nie zostanie uleczony.\")\r\n}",
  "xcy5GOUSZ0meIejZ": "if (args.test.isFumble)\n{\n    args.test.result.other.push(\"@Table[warp-grinder-fumble]\")\n}",
  "Xe8ijqWU3bbtq7ZY": "if (args.opposedTest.defenderTest.actor.Species.toLowerCase().includes(\"skaven\"))\n{\n    args.addImpact = true;\n    args.opposedTest.result.other.push(\"Impact against Skaven\")\n}",
  "Xf4FcZ4ZLdWmOXBa": "return args.skill?.name != game.i18n.localize(\"NAME.Perception\") && !args.skill?.name.includes(game.i18n.localize(\"NAME.Stealth\"));",
  "XfRvVBTVIuAm8RaZ": "return args.item?.name != game.i18n.localize(\"NAME.CharmAnimal\")",
  "XfSxXatjEYlPEbaK": "const broken = this.actor.hasCondition(\"broken\");\r\n\r\n//broken?.delete();",
  "Xg4qHLsyXGuUZfT8": "this.actor.hasCondition(\"ablaze\")?.delete();",
  "xgdhf0wlNP2cHIQx": "await this.actor.addCondition(\"entangled\", this.effect.sourceTest.result.overcast.usage.other.current)",
  "xgplXZMs459X7XXM": "// Apply changes when the mask is worn\n\nif (args.equipped) {  \n  this.actor.createEmbeddedDocuments(\"ActiveEffect\", [this.item.effects.contents[1]?.convertToApplied()])  \n  this.script.message(`${this.actor.name} dons the <strong>${this.item.name}</strong>. <br>\n        They suffer –20 to all attempts to resist Disease.<br>\n        If they wear the mask for more than an hour or benefit from any of its effects, they are exposed to @Corruption[moderate]{Moderate Corruption}. \n        `,\n      {whisper: ChatMessage.getWhisperRecipients(\"GM\")}) \n}\n\n// Notify of lingering effects when mask is removed\nelse if (!args.equipped)\n{\n    await this.item.effects.contents[0].delete();\n    await this.item.update({name : this.item.name += \" (Used)\"})\n    this.script.message(`<strong>${this.item.name}</strong> on ${this.actor.name} has been taken off and loses its properties. However, the effects last for [[1d10+4]] days, after which they should be manually removed.`, \n    {whisper: ChatMessage.getWhisperRecipients(\"GM\")}\n    )\n    \n}\n",
  "xihniGjgqOhuaKWc": "                 \n                            if (args.test.failed)\n                            {\n                                let applicableCharacteristics = [\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"];\n                                if (applicableCharacteristics.includes(args.test.characteristicKey))\n                                {\n                                    this.actor.addCondition(\"stunned\");\n                                }\n                            }",
  "xIRU2SaqLeWmqGDI": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.vMYEkrWj0ip6ZOdv\")\r\nlet data = item.toObject();\r\ndata.name += \" (Choroba)\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "xiyQSXozoLxt0MZs": "const uuids = [\r\n  \"Compendium.wfrp4e-core.items.Item.wMwSRDmgiF2IdCJr\",     // Painless\r\n  \"Compendium.wfrp4e-core.items.Item.IAWyzDfC286a9MPz\",       // Immunity to Psychology\r\n];\r\n\r\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\r\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "xJZKVGE04o84Gibo": "if (!this.item.actor.name.includes(\"Brunner\")) return;\r\n\r\nargs.item.system.damage.value += \"+1\";",
  "Xk9XPklxxTvFlwpI": "args.context.useOnesArgumentative = true;",
  "xkdQhZ9KKqmocNLO": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.Item.tXKX29QZBdHmyMc7\")\nlet data = item.toObject();\nawait this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "xklncIMwQIespDxS": "let test = await this.actor.setupCharacteristic(\"t\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"vhard\"}});\r\nawait test.roll();\r\nCorruptionMessageModel.createCorruptionMessage(\"minor\", this.script.getChatData())\r\n\r\nif (test.failed)\r\n{\r\n    this.actor.addCondition(\"unconscious\");\r\n}",
  "xL4S0H1RP8hhXW7c": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.xneBqGOs1QS7kfUr\")\nlet data = item.toObject();\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "xLKAuD6yzwjAL6tJ": "return !args.weapon || args.weapon?.system.properties?.qualities.shield || !this.item.system.usesLocation(args.weapon)",
  "xMhhVol8Is3DJ3gb": "if (this.effect.sourceTest.succeeded)\r\n{\r\n    let blinded = 1 + this.effect.sourceTest.result.overcast.usage.other.count\r\n    this.actor.addCondition(\"blinded\", blinded)\r\n}",
  "xnHobI9HojObLHMp": "args.applyTB = false;\nargs.applyAP = false;",
  "XO9m2AvFRAAeEuty": "if (args.test.options.fieldDressing && args.test.result.reversed)\r\n{\r\n\targs.test.data.result.SL = \"+\" + Math.min(1, Number(args.test.data.result.SL))\r\n\targs.test.result.other.push(`<b>${this.effect.name}</b>: PS ograniczone do 1`);\r\n}",
  "xobGBJbgFjQCrwvq": "let roll;\r\nif (this.actor.has(game.i18n.localize(\"NAME.Daemonic\")) || this.actor.has(game.i18n.localize(\"NAME.Undead\")) || [\"Goblin\", \"Ork\", \"Nieumarły\"].includes(this.actor.system.details.species.value))\r\n{\r\n    roll = await new Roll(`1d10 + ${this.effect.sourceTest.result.overcast.usage.other.current}`).roll()\r\n}\r\nelse \r\n{\r\n    roll = await new Roll(`1d10`).roll()\r\n}\r\n\r\nroll.toMessage(this.script.getChatData())\r\nawait this.actor.applyBasicDamage(roll.total, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg : true})\r\n\r\nif (this.actor.has(game.i18n.localize(\"NAME.Undead\")) || args.actor.has(game.i18n.localize(\"NAME.Daemonic\")))\r\n{\r\n  this.actor.addCondition(\"ablaze\")\r\n}",
  "xot4JWCRzLkobHtL": "args.actor.removeCondition(\"broken\", 1);",
  "xPDMpOvC1ZBVxrNg": "args.fields.modifier += 10;",
  "xpgXWoK2zDnG1uiF": "    let stunned = args.actor.hasCondition(\"stunned\")\r\n    if (stunned)\r\n    {\r\n        stunned.system.scriptData = stunned.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        stunned.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n    let poisoned = args.actor.hasCondition(\"poisoned\")\r\n    if (poisoned)\r\n    {\r\n        poisoned.system.scriptData = poisoned.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        poisoned.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n    let deafened = args.actor.hasCondition(\"deafened\")\r\n    if (deafened)\r\n    {\r\n        deafened.system.scriptData = deafened.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        deafened.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n\r\n    let entangled = args.actor.hasCondition(\"entangled\")\r\n    if (entangled)\r\n    {\r\n        entangled.system.scriptData = entangled.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        entangled.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n\r\n    let fatigued = args.actor.hasCondition(\"fatigued\")\r\n    if (fatigued)\r\n    {\r\n        fatigued.system.scriptData = fatigued.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        fatigued.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n    let blinded = args.actor.hasCondition(\"blinded\")\r\n    if (blinded)\r\n    {\r\n        blinded.system.scriptData = blinded.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        blinded.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n    let broken = args.actor.hasCondition(\"broken\")\r\n    if (broken)\r\n    {\r\n        broken.system.scriptData = broken.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        broken.system._scripts = null;\r\n    }\r\n\r\n\r\n\r\n    let prone = args.actor.hasCondition(\"prone\")\r\n    if (prone)\r\n    {\r\n        prone.system.scriptData = prone.system.scriptData.filter(s => s.trigger != \"dialog\")\r\n        prone.system._scripts = null;\r\n    }\r\n\r\n",
  "XPpHYTTT0hqYuSfa": "fromUuid(\"Compendium.wfrp4e-core.items.IAWyzDfC286a9MPz\").then(item => {\n   item = item.toObject()\n   this.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})\n})",
  "xPwa3NftkpMBc2AO": "return ![\"ws\", \"s\", \"ag\"].includes(args.characteristic)",
  "XPxAKqPpPYE4E6B5": "args.fields.modifier -= 10 * this.effect.conditionValue",
  "xq3RANOtmPhy77ne": "args.update({texture : {tint : \"#FFBF00\"}});",
  "xQ3xR2Wf0wHFa76H": "return [\"ws\", \"bs\", \"fel\", \"dex\"].includes(args.characteristic) || args.weapon",
  "xQnoRTHotZKrwPrx": "return args.type == \"cast\" && args.item?.system.lore?.value == \"shadow\"",
  "xqWxV9w5ezBQdJkZ": "return args.context.corruption;",
  "xRd6oA1QWLVpfoBm": "if (!this.actor.has(game.i18n.localize(\"NAME.NightVision\")))\r\n{\r\n    let item = await fromUuid(\"Compendium.wfrp4e-core.items.FmHDbCOy3pH8yKhm\");\r\n    let data = item.toObject();\r\n    this.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})\r\n}",
  "XRrGBbplNLZpXnCH": "let item;\r\nlet items = []\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.rOV2s6PQBBrhpMOv\")\r\n{\r\n    let data = item.toObject();\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.VUJUZVN3VYhOaPjj\")\r\n{\r\n    let data = item.toObject();\r\n    data.system.specification.value = 2\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.GbDyBCu8ZjDp6dkj\")\r\n{\r\n    let data = item.toObject();\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.a8MC97PLzl10WocT\")\r\n{\r\n    let data = item.toObject();\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\r\n{\r\n    let data = item.toObject();\r\n    data.system.specification.value = 1;\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.pTorrE0l3VybAbtn\")\r\n{\r\n    let data = item.toObject();\r\n    data.system.specification.value = 1;\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.fjd1u9VAgiYzhBRp\")\r\n{\r\n    let data = item.toObject();\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.mDgEMOoJpi8DkRYb\")\r\n{\r\n    let data = item.toObject();\r\n    items.push(data)\r\n}\r\nitem = await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")\r\n{\r\n    let data = item.toObject();\r\n    data.system.specification.value = 2;\r\n    items.push(data)\r\n}\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect : this.effect.id})\r\n",
  "xRTmMwNfdirjsi8X": "this.actor.addCondition(\"ablaze\");\r\n\r\nthis.actor.applyBasicDamage(this.effect.sourceTest.result.damage)",
  "xS2su09zcza9du09": "if ([game.i18n.localize(\"CORRUPTION.Minor\"), game.i18n.localize(\"CORRUPTION.Moderate\"), game.i18n.localize(\"CORRUPTION.Major\")].includes(this.item.system.specification.value))\r\n{\r\n\treturn\r\n}\r\n\r\nlet choice = await ItemDialog.create(ItemDialog.objectToArray({minor : game.i18n.localize(\"CORRUPTION.Minor\"), moderate : game.i18n.localize(\"CORRUPTION.Moderate\"), major : game.i18n.localize(\"CORRUPTION.Major\")}, this.item.img), 1, \"Wybierz poziom Zepsucia\");\r\n\r\nthis.item.updateSource({\"system.specification.value\" : choice[0]?.name || \"\"})",
  "XthZ3GCC3WhsEI2g": "args.update({light : {\r\n    \"dim\": 10,\r\n    \"bright\": 5,\r\n    \"alpha\": 0.5,\r\n    \"animation\": {\r\n        \"speed\": 4,\r\n        \"intensity\": 4,\r\n        \"type\": \"flame\",\r\n    },\r\n    \"color\": \"#ac9e6c\",\r\n}});",
  "Xu5cED1MhT4ba7da": "args.fields.modifier += 10\r\n",
  "XuFxKPYheYF4WMmQ": "return args.skill?.name != game.i18n.localize(\"NAME.Cool\");",
  "xUpKYT7BZCSmAfUy": "if (this.item.system.quantity.value)\r\n{\r\n\tthis.item.system.reduceQuantity();\r\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\r\n\tactor.applyEffect({effectData : [this.item.effects.contents[0].convertToApplied()]})\r\n}\r\nelse\r\n{\r\n\tthis.script.notification(\"Nic nie zostało!\", \"error\")\r\n}",
  "xvGxwv7X0Vq3vNqb": "args.fields.modifier -= 10;",
  "xvH4PKJasHcehOZz": "return args.skill?.name == `${game.i18n.localize(\"NAME.Lore\")} (${this.item.parenthesesText})`",
  "xVYVegD692CCv8Yl": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\n\nlet newFortune = Math.max(0, this.actor.status.fortune.value - 1)\nthis.actor.update({ \"system.status.fortune.value\": newFortune  });\n\nif (test.failed)\n{ \n  let char = this.effect.sourceActor.characteristics;\n  let duration = Math.floor((char.wp.initial + char.wp.advances)/10) ;\n  this.script.message(\"<strong>Fatethief</strong> has been applied for \" + duration + \" days\"); \n}",
  "xWPgIZOQLba5nZ23": "let nbFatigue = 1 + Number(this.effect.sourceTest.result.SL);\nthis.actor.addCondition(\"fatigued\", nbFatigue);  \n\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields : {difficulty : \"hard\"}, appendTitle : ` - ${this.effect.name}`})\nawait test.roll();\n\nif (test.succeeded)\n{\n  this.script.notification(this.actor.name + \"resisted !\")\n}\nelse if (test.failed)\n{\n  this.actor.addCondition(\"unconscious\", 1);\n}",
  "XXnzUdsIYQ9Wjyu0": "return args.item?.system.attackType != \"ranged\" || args.flags.howlingWarpGale || this.actor.sameSideAs(this.effect.sourceActor)",
  "XYaYeiVkc5GKYTjC": "return args.spell?.system.lore.value != \"fire\"",
  "xYTkj8jhSVOSoLbC": "this.actor.flags.useless[this.item.system.location.key[0] + \"Arm\"] = true;",
  "Y27MmN5KFw45d5vQ": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {difficulty: \"challenging\"})\r\nawait test.roll();\r\nif (!test.succeeded)\r\n{   \r\n    let rollResult = await (await fromUuid(\"RollTable.GL7rKOEThauPUK0E\")).roll({allowInteractive : false});\r\n    let diseaseId = rollResult.results[0].documentId;\r\n    let disease = await fromUuid(\"Item.\"+diseaseId);\r\n    obj = disease.toObject();\r\n    this.actor.createEmbeddedDocuments(\"Item\", [obj]);\r\n}",
  "y3agVFVBR8tVqWyx": "let test = await this.actor.setupCharacteristic(\"wp\", {skipTargets: true, appendTitle :  ` - ${this.effect.name}`});\nawait test.roll();",
  "y3F1K1sYBymPZCjz": "let characteristics = {\r\n    \"ws\" : 10,\r\n    \"bs\" : 0,\r\n    \"s\" : 5,\r\n    \"t\" : 0,\r\n    \"i\" : 5,\r\n    \"ag\" : 10,\r\n    \"dex\" : 0,\r\n    \"int\" : 0,\r\n    \"wp\" : 0,\r\n    \"fel\" : 0\r\n}\r\nlet skills = [\"Athletics\", \"Animal Care\", \"Language (Battle)\", \"Melee (Basic)\", \"Melee (Cavalry)\", \"Ride\"]\r\nlet skillAdvancements = [10,10, 10, 10, 10, 20]\r\n\r\nlet talents = [\"Roughrider\", \"Strike Mighty Blow\"]\r\nlet trappings = [\"Hand Weapon\",  \"Shield\", \"Lance\", \"Plate Breastplate\", \"Plate Bracers\", \"Plate Helm\", \"Plate Leggings\"]\r\nlet specialItems = [ \r\n    {name: \"Chaos Steed\", type: \"trapping\", trappingType: \"misc\" }, \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nconsole.log(\">>>>>>><\", items)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "Y6ppJBerpM3TtSic": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.g4Q6AtzZuo5iIvD4\");\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item.toObject()], {fromEffect : this.effect.id});",
  "y7hk7prQ0lLTyv1Y": "return args.item?.system?.isRanged && (args.item.system.weaponGroup.value !== \"blackpowder\" || args.item.system.weaponGroup.value !== \"engineering\")",
  "Y7McxsHFeGhwQx0J": "this.actor.createEmbeddedDocuments(\"Item\", [expandObject({\n    name : \"Ghostly Flame\",\n    type : \"weapon\",\n    img : this.effect.img,\n    system : {\n        \"weaponGroup.value\" : \"throwing\",\n        \"damage.value\" : \"SB + WPB\",\n        \"qualities.value\" : [{name : \"magical\"}],\n        \"equipped\" : true\n    }\n})], {fromEffect: this.effect.id})",
  "Y8J66v8VTKUASGuK": "if (!this.actor.effects.find(e => e.isCondition))\r\n{\r\n\treturn this.script.notification(\"Aktor nie posiada Stanów\");\r\n}\r\n\r\nlet choice = await ItemDialog.create(this.actor.effects.filter(i => i.isCondition), 1, \"Wybierz Stan\")\r\n\r\nif (choice[0])\r\n{\r\n\tawait this.actor.removeCondition(choice[0].conditionId);\r\n}\r\n\r\nif (this.actor.effects.find(e => e.isCondition))\r\n{\r\n    return false; // Delete the effect if there are still conditions, otherwise, effect remains and provides the bonus\r\n}",
  "YaKnYEbmmZZtByJc": "if (args.opposedTest.attackerTest.options.ballockKnife)\r\n{\r\n    args.weaponProperties.impale = true;\r\n    args.extraMessages.push(`<strong>${this.item.name}</strong>: Dodano Zaletę Nadziewająca`);\r\n}",
  "yAL0YwZWVm8o1nxa": "if (this.actor.hasCondition(\"dead\") && !this.actor.gardenOfCorpses)\r\n{\r\n    this.script.message(\"[[3d10]] @UUID[Compendium.wfrp4e-core.actors.T79RqnDOAQLn3I1s]{Zombie} powstają z martwych.\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    this.actor.gardenOfCorpses = true;\r\n    // local storage is sufficient to prevent multiple messages\r\n}",
  "yamap8V6Gx2Z9Smu": "const uuids = [\n  \"Compendium.wfrp4e-core.items.Item.nWLsoWQBCjPRKxYx\",     // Robust\n  \"Compendium.wfrp4e-core.items.Item.jviOQmy0luQOySC2\",         // Tenacious\n];\n\nconst items = await Promise.all(uuids.map(uuid => fromUuid(uuid)));\nawait this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect: this.effect.id});",
  "yatUu0cd7iKs50rq": "return args.skill?.name != game.i18n.localize(\"NAME.Track\");",
  "ybxDG2ezvRx02LYx": "return !args.context.corruption",
  "yCgH3N9AurIiAv0i": "if (!this.item.name.includes(\"(\") || this.item.system.tests.value.includes(\"(Zmysł)\") || this.item.system.tests.value.toLowerCase().includes(\"dowolny\"))\r\n{\r\n    let tests = this.item.system.tests.value\r\n    let name = this.item.name\r\n\r\n    // If name already specifies, make sure tests value reflects that\r\n    if (name.includes(\"(\") && !name.toLowerCase().includes(\"dowolny\"))\r\n    {\r\n        let sense = name.split(\"(\")[1].split(\")\")[0]\r\n        tests = `${tests.split(\"(\")[0].trim()} (${sense})`;\r\n    }\r\n    else // If no sense specified, provide dialog choice\r\n    {\r\n        let choice = await ItemDialog.create(ItemDialog.objectToArray({\r\n            taste : \"Smak\",\r\n            sight : \"Wzrok\",\r\n            smell : \"Węch\",\r\n            hearing : \"Słuch\",\r\n            touch : \"Dotyk\"\r\n        }, this.item.img), 1, {title : this.item.name, text : \"Wybierz Zmysł\"});\r\n        if (choice[0])\r\n        {\r\n            name = `${name.split(\"(\")[0].trim()} (${choice[0].name})`\r\n            tests = `${tests.split(\"(\")[0].trim()} (${choice[0].name})`\r\n        }\r\n    }\r\n\r\n        this.item.updateSource({name, \"system.tests.value\" : tests})\r\n}",
  "YDANERWYHyJ2ACeo": "args.fields.modifier -= 25",
  "YdiQFkm8j48Xs7gI": "if (args.totalWoundLoss > 0 && args.opposedTest.attackerTest.result.critical && args.opposedTest.result.hitloc.value == \"head\") {\n    let brainRot = await fromUuid(\"Compendium.wfrp4e-lustria.items.Item.IsNQH867Y58pZgq6\");\n    args.test.targets[0].createEmbeddedDocuments(\"Item\", [brainRot], {fromEffect : this.effect.id});\n    this.script.scriptMessage(`${args.test.targets[0].name} has been infected by Brain Rot`);\n}",
  "YDqpKJVy8ijEKdLX": "return !(this.actor.attacker && (args.skill?.name.includes == `${game.i18n.localize(\"NAME.Melee\")} (${game.i18n.localize(\"SPEC.Basic\")})` || (args.type == \"weapon\" && args.item?.system.weaponGroup.value == \"basic\")))",
  "yDvxF9llUYwJg0sE": "if (getProperty(args.data, \"system.loaded.value\") == true)\n{\n    let repeaterValue = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n    let qualities = foundry.utils.deepClone(this.item.system.qualities.value);\n    let repeater = qualities.find(i => i.name == \"repeater\")\n    if (repeater)\n    {\n        repeater.value = repeaterValue\n    }\n    else \n    {\n        qualities.push({name : \"repeater\", value : repeaterValue})\n    }\n    foundry.utils.setProperty(args.data, \"system.loaded.amt\", repeaterValue)\n    this.item.update({\"system.qualities.value\" : qualities});\n    this.script.notification(\"Repeater \" + repeaterValue);\n}\nelse if (getProperty(args.data, \"system.loaded.value\") == false)\n{\n   let qualities = foundry.utils.deepClone(this.item.system.qualities.value).filter(i => i.name != \"repeater\");\n   this.item.update({\"system.qualities.value\" : qualities});\n}",
  "YEBw2CzHYxsTpTy5": "return args.skill?.name == game.i18n.localize(\"NAME.Haggle\");",
  "Yf2MmOzazzMdmoPU": "let armour = await fromUuid(\"Compendium.wfrp4e-core.items.VUJUZVN3VYhOaPjj\")\nlet armourData = armour.toObject()\narmourData.system.specification.value = 1\n \nlet fury = await fromUuid(\"Compendium.wfrp4e-core.items.fjd1u9VAgiYzhBRp\");\nlet furyData = fury.toObject();\n\nlet horns = await fromUuid(\"Compendium.wfrp4e-core.items.BqPZn6q3VHn9HUrW\")\nlet hornsData = horns.toObject()\nhornsData.system.specification.value = 6\n\nthis.actor.createEmbeddedDocuments(\"Item\", [armourData, furyData, hornsData], {fromEffect : this.effect.id})",
  "yFMvxecXAZ6T2O0S": "if (args.totalWoundLoss >= 1)\r\n{\r\n    let roll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\n    await roll.toMessage(this.script.getChatData());\r\n    if (roll.total == 9)\r\n    {\r\n        this.script.message(`Dwa @UUID[Compendium.wfrp4e-eis.actors.cLOGeMqUty61nYB9]{Niebieskie Horrory Tzeentcha} wydostają się z ciała ${this.actor.name}, jednocześnie doprowadzając do śmierci.`, {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n    }\r\n}",
  "YFSgWRXel0bWE3EE": "return [\"ag\", \"ws\", \"bs\"].includes(args.characteristic) || args.skill?.name == game.i18n.localize(\"NAME.Climb\");",
  "YHEIkBKWXKNPqglh": "if (args.test.result.castOutcome == \"success\")\r\n{\r\n    CorruptionMessageModel.createCorruptionMessage(\"moderate\", this.script.getChatData())\r\n}\r\n",
  "YhhiWEQbox3WZA3Q": "return args.skill?.name == game.i18n.localize(\"NAME.Heal\") && game.combat?.active",
  "yIGItnshXI4W46cp": "return args.skill?.name != game.i18n.localize(\"NAME.Charm\");",
  "YjAIsFlxKTJvYs60": "this.item.system.reduceQuantity();",
  "YjJcRdytVRm88qLn": "args.context.additionalDamage = 1",
  "YJX7WnxzXXIVdH6P": "let lore = await ValueDialog.create({text : \"Choose Lore\", title:  \"Lore\"}, \"\", {\"fire\" : \"Fire\", \"death\" : \"Death\", \"metal\" : \"Metal\", \"shadow\" : \"Shadow\"});\r\n\r\nlet filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = await ItemDialog.createFromFilters(filters, 6, {title : this.effect.name, text : \"Choose 6 Petty Spells\"})\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : [\"\"]\r\n    }\r\n]\r\n\r\nlet arcane = await ItemDialog.createFromFilters(filters, 12, {title : this.effect.name, text : \"Choose 12 Arcane Spells\"})\r\n\r\nlet items = petty.map(i => i.toObject()).concat(arcane.map(i => {\r\n    let spell = i.toObject();\r\n    spell.img = `modules/wfrp4e-core/icons/spells/${lore}.png`\r\n    spell.system.lore.value = lore;\r\n    return spell;\r\n}));\r\n\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "YMaxpXnml01bLGpO": "return args.item?.name.includes(game.i18n.localize(\"NAME.Stealth\"))",
  "yMMzZ7daCqRlGT3N": "let item = args.opposedTest.attackerTest.item;\nif (!item.isMagical && (item.type == \"weapon\" || item.type == \"trait\"))\n{\n    args.modifiers.other.push({label : this.effect.name, details : \"Remove Damage Rating\", value : -1 * (args.totalWoundLoss - args.opposedTest.result.differenceSL)})\n}\n",
  "YN8719gme9AxYtyY": "let characteristics = {\r\n    \"ws\" : 10,\r\n    \"bs\" : 0,\r\n    \"s\" : 5,\r\n    \"t\" : 15,\r\n    \"i\" : 20,\r\n    \"ag\" : 15,\r\n    \"dex\" : 20,\r\n    \"int\" : 35,\r\n    \"wp\" : 30,\r\n    \"fel\" : 10\r\n}\r\nlet skills = [\"Channelling\", \"Cool\", \"Dodge\", \"Entertain (Storytelling)\", \"Intuition\", \"Language (Magick)\", \"Leadership\", \"Lore (Magic)\", \"Lore (Theology)\", \"Perception\"]\r\nlet skillAdvancements = [20, 25, 20, 25, 30, 25, 15, 20, 10, 30]\r\n\r\nlet talents = [\"Aethyric Attunement\", \"Instinctive Diction\", \"Instinctive Diction\", \"Luck\", \"Magical Sense\", \"Menacing\", \"Arcane Magic\", \"Petty Magic\", \"Second Sight\", \"Sixth Sense\"]\r\nlet trappings = [\"Hand Weapon\", \"Robes\", \"Quarterstaff\"]\r\nlet specialItems = [ \r\n    {name: \"Magic Item\", type: \"trapping\", trappingType: \"misc\" }, \r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWfrp4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nlet ride = await foundry.applications.api.DialogV2.confirm({window : {title : \"Skill\"}, content : \"Add Chaos Steed and +20 Ride (Horse)?\"})\r\n\r\nif (ride)\r\n{\r\n    let skill = await game.wfrp4e.utility.findSkill(\"Ride (Horse)\")\r\n    skill = skill.toObject();\r\n    skill.system.advances.value = 20;\r\n    items = items.concat({name : \"Chaos Steed\", type: \"trapping\", \"system.trappingType.value\" : \"misc\"}, skill)\r\n}\r\n\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "ynNCBAYwJFkTiXV1": "this.actor.system.status.addArmour(4, {source : this.effect})",
  "ynoHNXXCGRS6fTqF": "let msg = \"\"\r\n\r\nlet i_gain = (await new Roll(\"1d10\").roll()).total\r\n\r\nif (args.actor.characteristics.i.value <= 0)\r\n{\r\n   i_gain += (await new Roll(\"2d10\").roll()).total\r\n}\r\n\r\nmsg = `<b>${this.actor.prototypeToken.name}</b>: otrzymano punkty Inicjatywy w liczbie ${i_gain}`\r\n\r\nlet newValue = i_gain + args.actor.characteristics.i.modifier\r\n\r\nthis.actor.update({\"system.characteristics.i.modifier\" : newValue})\r\n\r\n\r\nlet hitloc = await game.wfrp4e.tables.rollTable(\"hitloc\")\r\n\r\nlet value = hitloc.result\r\nlet desc = hitloc.description\r\n\r\nthis.effect.updateSource({\"flags.wfrp4e.location\" : value})\r\n\r\nmsg += ` gdy nowe oczy pojawiają się w lokacji: ${desc}`\r\n\r\nthis.script.message(msg)",
  "ynV7tz0OdCwlsQp6": "let msg = \"\"\nmsg += `<p>${await this.actor.applyBasicDamage(8, {loc : \"roll\", suppressMsg: true, hideDSN: true})}</p>`\nmsg += `<p>${await this.actor.applyBasicDamage(8, {loc : \"roll\", suppressMsg: true, hideDSN: true})}</p>`\nmsg += `<p>${await this.actor.applyBasicDamage(8, {loc : \"roll\", suppressMsg: true, hideDSN: true})}</p>`\n\nthis.script.message(msg);",
  "YOKoZFlBEpFavfOS": "return args.type == \"channelling\"",
  "yPxYRObUiqAIhlNB": "this.actor.system.status.encumbrance.max += 1",
  "YQ2LnLxp0xgy3meI": "if (args.test.preData.options?.corruption && args.test.failed) {\r\n  args.test?.result?.other.push(\"Otrzymano dodatkowy Punkt Zepsucia pochodzący z \" + this.effect.name)\r\n}",
  "yQziCK8G8I1RYkTj": "let add;\r\nif (args.opposedTest?.attackerTest?.weapon?.isRanged && args.opposedTest?.result.hitloc?.value === \"head\") {\r\n    add = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content : \"Dodać 1 PP? basinet daje 4 PP zamiast 3 w przypadku frontalnych ataków zasięgowych\"})\r\n}\r\n\r\nif (add) {\r\n\r\n    args.modifiers.ap.metal++;\r\n    args.modifiers.ap.used++;\r\n    args.modifiers.ap.value++;\r\n    args.modifiers.ap.details.push(\"+1 PP za basinet\");\r\n}",
  "yr1FmaTY18JXWa8s": "return [\"witchcraft\", \"necromancy\", \"daemonology\", \"slaanesh\", \"nurgle\", \"tzeentch\", \"undivided\"].includes(args.spell?.system.lore.value);",
  "yRRzSKlcN3L7rEEe": "return args.skill?.name.includes(game.i18n.localize(\"NAME.Entertain\")) || args.skill?.name.includes(game.i18n.localize(\"NAME.Perform\")) || args.skill?.name.includes(game.i18n.localize(\"NAME.Play\"));",
  "YRUTliBzAQvncGNX": "this.actor.addCondition(\"fatigued\");\r\nthis.script.notification(\"Otrzymano Stan Zmęczenia\")",
  "YrXhk2YJaWSChMhp": "// Brawling management\nlet base = this.actor.characteristics.ws.value;\nlet melee = this.actor.has(\"Melee (Brawling)\", \"skill\");\nif (!melee) {\n  melee = await fromUuid(\"Compendium.wfrp4e-core.items.Item.jLyoyqwmBVPjRjhM\");\n  melee = melee.toObject();\n  melee.system.modifier.value = 55 - base;\n  await this.actor.createEmbeddedDocuments(\"Item\", [melee], {fromEffect : this.effect.id});\n} else {\n  //this.actor.updateEmbeddedDocuments(\"Item\", { _id: melee.id, 'system.modifier.value': 55-base});\n  await this.effect.update({\"flags.wfrp4e.fistsOfGork\" : 55 - base})\n}\n\n// Weapon management\nbase = this.actor.characteristics.s.bonus;\nweapon = await fromUuid(\"Compendium.wfrp4e-core.items.Item.AtpAudHA4ybXVlWM\");\nweapon = weapon.toObject();\nweapon.name = \"Fists of Gork\";\nweapon.img = this.effect.img;\nweapon.system.rollable.skill = \"Melee (Brawling)\";\nweapon.system.specification.value = 9 - base;\nawait this.actor.createEmbeddedDocuments(\"Item\", [weapon], {fromEffect : this.effect.id});\n\n//this.script.scriptMessage(`${this.actor.name} now has Melee (Brawling) 55 and Weapon (Fists) +9`);",
  "YsS2RZsl2ZsqjhWV": "return !args.fields.charging",
  "YsUdMhQ2AArcJIqy": "let choice1 = [\r\n    {\r\n        type: \"trait\",\r\n        name: \"Corruption (Minor)\",\r\n        diff : {\r\n            system : {\r\n                specification : {\r\n                    value : \"Minor\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Infected\",\r\n    },\r\n    {\r\n        type: \"trait\",\r\n        name: \"Territorial\",\r\n    }\r\n]\r\n\r\nlet updateObj;\r\nlet actor;\r\n\r\nasync function addTrait(c) {\r\n    let items = [];\r\n    let existing;\r\n    if (c.type == \"trait\") {\r\n        existing = updateObj.items.find(i => i.name == c.name && i.type == c.type);\r\n    }\r\n    if (!existing) {\r\n        let item = await game.wfrp4e.utility.find(c.name, c.type);\r\n        if (item) {\r\n            item = item.toObject();\r\n            foundry.utils.mergeObject(item, c.diff);\r\n            items.push(item);\r\n        }\r\n        else\r\n            ui.notifications.warn(`Could not find ${c}`, { permanent: true });\r\n    }\r\n    actor.createEmbeddedDocuments(\"Item\", items);\r\n}\r\n\r\nasync function dialogChoice() {\r\n    for (let c of choice1) \r\n    {\r\n        if (await foundry.applications.api.DialogV2.confirm({window : {title: \"Option\"}, content:`<p>Add Option?</p><ol><li>${c.name}</li></ol>`}))\r\n        {\r\n            addTrait(c)\r\n            c.valid = true;\r\n        }\r\n    }\r\n}\r\nupdateObj = this.actor.toObject();\r\nactor = this.actor\r\nawait dialogChoice();\r\n\r\n",
  "yTmRoUstxHMso91c": "if (args.item.name == game.i18n.localize(\"NAME.MagicResistanceTrait\") && args.item.type == \"trait\")\r\n{\r\n    args.item.system.specification.value = Number(args.item.system.specification.value) + 1\r\n}",
  "yvtF2t9aibxibAIM": "const test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Perception\"), {\r\n  skipTargets: true,\r\n  appendTitle: ` — ${this.effect.name}`,\r\n  fields: {difficulty: \"challenging\"},\r\n  context: {\r\n    failure: `Gained @Condition[Prone] Condition.`,\r\n    success: `Able to move.`\r\n  }\r\n});\r\n\r\nawait test.roll();\r\n\r\nif (test.failed)\r\n  this.actor.addCondition(\"prone\");",
  "YwLEw4BiKq4EMy57": "let i_gain = (await new Roll(\"2d10\").roll()).total\r\nlet fel_gain = 0\r\nif (args.actor.characteristics.fel.value <= 0)\r\n{\r\n   fel_gain += (await new Roll(\"2d10\").roll()).total\r\n}\r\n\r\nlet msg = `<b>${this.actor.prototypeToken.name}</b>: otrzymano punkty Inteligencji w liczbie: ${i_gain}`\r\n\r\nif (fel_gain)\r\n   msg += ` oraz Ogłady w liczbie: ${fel_gain}`\r\n\r\n\r\nlet newInt = i_gain + args.actor.characteristics.int.modifier\r\nlet newFel = fel_gain + args.actor.characteristics.fel.modifier\r\n\r\nargs.actor.update({\"system.characteristics.int.modifier\" : newInt, \"system.characteristics.fel.modifier\" : newFel})\r\n\r\nthis.script.message(msg)",
  "yXUPiWuQ5o0JBY4i": "return args.skill?.name == game.i18n.localize(\"NAME.Endurance\") || args.characteristic == \"int\"",
  "YyKU2rIRmFSCqSlW": "let newEffect = this.effect.sourceItem.effects?.contents[1]\n\nif (newEffect)\n{\n    this.actor.createEmbeddedDocuments(\"ActiveEffect\", [newEffect.convertToApplied()]);\n}",
  "yYNBZjmBnytXpRn3": "this.actor.reset();",
  "YySjPfSAPdMAfjsh": "let talents = [\"Berserk Charge\", \"Combat Aware\", \"Combat Reflexes\", \"Furious Assault\", \"Implacable\", \"Magic Resistance\", \"Resistance (Magic)\", \"Resolute\", \"Strike Mighty Blow\", \"Warrior Born\"];\nlet currentCareer = this.actor.system.currentCareer;\n\nif (!currentCareer) return;\n\nfor (let talent of talents) {\n  if (currentCareer.system.talents.includes(talent))\n    continue;\n  currentCareer.system.talents.push(talent);\t\n}\n\n",
  "yzN7ZNlgCiSVJqsU": "let sourceItem = this.effect.sourceItem;\r\n\r\nif (sourceItem)\r\n{\r\n\tthis.actor.applyEffect({effectUuids : [sourceItem.effects.contents[1].uuid]})\r\n\tthis.script.notification(\"Wywołano skutki uboczne Rozkoszy Ranalda\");\r\n}",
  "z14Tb2YKCjiE5ZTU": "this.actor.getActiveTokens().forEach(t => t.document.update({light : {\n      \"dim\": 30,\n      \"bright\": 20,\n      \"angle\": 90,\n      \"alpha\": 0.6,\n      \"animation\": {\n          \"speed\": 3,\n          \"intensity\": 3,\n          \"type\": \"torch\",\n      },\n      \"color\": \"#ffcc66\",\n  }}));",
  "Z1zriXibT0mAmdhb": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.BqPZn6q3VHn9HUrW\")\r\nitem = item.toObject()\r\nitem.name = this.effect.name\r\nitem.system.specification.value = this.actor.characteristics.s.bonus\r\nitem.system.description.value = \"\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [item], {fromEffect : this.effect.id})",
  "Z30zYayPryXOjT5N": "args.item.system.damage.value = \"SB + 6\";",
  "Z41L3MwOpJdAjVaj": "if (args.actorsystem.details.move.sail.value > 0)\n  args.actor.system.details.move.sail.value -= 2;\n",
  "Z4WrrlVGpPY4iUbG": "await this.actor.addCondition(\"ablaze\")",
  "Z52yZDm6lP6fOP3O": "let ablaze = this.actor.hasCondition(\"ablaze\")\r\nif (ablaze)\r\n{\r\n    this.script.notification(\"Niewrażliwość na Podpalenie\");\r\n    ablaze.delete()\r\n}",
  "z5HfNUrHy5MS3K7a": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, context : {failure: \"Dodatkowy Punkt Zepsucia\"}})\r\nawait test.roll();\r\nif (test.failed && this.actor.type == \"character\")\r\n{\r\n    this.actor.update({\"system.status.corruption.value\" : parseInt(this.actor.status.corruption.value) + 1})\r\n    this.script.message(\"Otrzymano Punkt Zepsucia\", {whisper : ChatMessage.getWhisperRecipients(\"GM\")})\r\n}",
  "Z6jNlyZMECkW4Hon": "let spells = await warhammer.utility.findAllItems(\"spell\", \"Wczytuję Zaklęcia...\", true);\r\n\r\nlet choice = await ItemDialog.create(spells, 1);\r\n\r\nif (choice[0])\r\n{\r\n    this.script.message(`Wybrano @UUID[${choice[0].uuid}]{${choice[0].name}}`)\r\n    let spell = (await fromUuid(choice[0].uuid)).toObject(); // Might be an index so retrieve item object for sure\r\n    setProperty(spell, \"flags.wfrp4e.boonOfTzeentch\", true);\r\n    spell.system.wind.value = \"Splatanie Magii (Dhar)\";\r\n    spell.system.memorized.value = true;\r\n    this.actor.createEmbeddedDocuments(\"Item\", [spell], {fromEffect: this.effect.id})\r\n}",
  "Z6OmmC0irJzxSnMH": "let chatData = { whisper: ChatMessage.getWhisperRecipients(\"GM\") }\r\nlet message = \"\"\r\n\r\nlet wounds = foundry.utils.duplicate(this.actor.status.wounds)\r\nlet regenRoll = await new Roll(\"1d10\").roll({allowInteractive : false});\r\nlet regen = regenRoll.total;\r\n\r\nif (wounds.value >= wounds.max)\r\n    return\r\n\r\nif (wounds.value > 0) \r\n{\r\n    wounds.value += regen\r\n    if (wounds.value > wounds.max)\r\n    {\r\n        wounds.value = wounds.max\r\n    }\r\n    message += `<b>${this.actor.name}</b>: Odzyskane punkty Żywotności: ${regen}.`\r\n\r\n    if (regen == 10)\r\n    {\r\n        message += `<br>Dodatkowo zregenerowano krytyczną ranę.`\r\n    }\r\n}\r\nelse if (regen >= 8) \r\n{\r\n    message += `<b>${this.actor.name}</b>: wylosowano ${regen} i odzyskano 1 punkt Żywotności.`\r\n    wounds.value += 1\r\n    if (regen == 10)\r\n    {\r\n        message += `<br>Dodatkowo zregenerowano krytyczną ranę.`\r\n    }\r\n}\r\nelse \r\n{\r\n    message += `<b>${this.actor.name}</b>: wylosowano ${regen} - brak efektu.`\r\n}\r\n\r\nawait this.actor.update({ \"system.status.wounds\": wounds })\r\nthis.script.message(message, { whisper: ChatMessage.getWhisperRecipients(\"GM\") })\r\n\r\nif (this.actor.Species != \"Ogr\")\r\n{\r\n   this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {skipTargets: true, appendTitle :  \" - \" + this.effect.name, fields : {difficulty : \"average\"}}).then(test => {\r\n       test.roll()\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "z8mwLihZQu0JtUHY": "\r\nlet characteristics = {\r\n    \"ws\" : 20,\r\n    \"bs\" : 20,\r\n    \"s\" : 0,\r\n    \"t\" : 20,\r\n    \"i\" : 30,\r\n    \"ag\" : 0,\r\n    \"dex\" : 10,\r\n    \"int\" : 65,\r\n    \"wp\" : 70,\r\n    \"fel\" : 20\r\n}\r\nlet skills = [\"Channelling\", \"Cool\", \"Intimidate\", \"Language (Magick)\", \"Language (Nehekharan)\", \"Leadership\", \"Lore (Magic)\", \"Perception\"]\r\nlet skillAdvancements = [20, 30, 25, 30, 20, 20, 30, 20]\r\nlet talents = [\"Aethyric Attunement\", \"Arcane Magic\", \"Hardy\", \"Instinctive Diction\", \"Magical Sense\", \"Menacing\", \"Menacing\", \"Petty Magic\", \"Read/Write\", \"Second Sight\", \"War Wizard\"]\r\nlet trappings = [\"Hand Weapon\"]\r\nlet specialItems = [ \r\n    {name: \"Mouldering Robes\", type: \"trapping\", trappingType: \"clothingAccessories\" }, \r\n    {name: \"Pouches containing ritual components\", type: \"trapping\", trappingType: \"clothingAccessories\" }, \r\n    {name: \"Staff\", type: \"weapon\", damage: \"SB+2\"}, \r\n    {name: \"Dark Magic (Necromancy)\", type: \"talent\"},\r\n]    \r\nlet items = [];\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let item of specialItems) {\r\n    let newItem\r\n    if (item.type == \"weapon\") {\r\n        newItem = new ItemWFRP4e({ name: item.name, type: item.type, system: { equipped: true, damage: {value: item.damage}}  })\r\n    } else if (item.type == \"trapping\") {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type, system: { worn: true, trappingType: { value: item.trappingType}  } } )\r\n    } else {\r\n        newItem = new ItemWFRP4e({ img: \"systems/wfrp4e/icons/blank.png\", name: item.name, type: item.type  })\r\n    }\r\n    items.push(newItem.toObject())\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\nupdateObj.name = updateObj.name += \" \" + this.effect.name\r\n\r\nawait this.actor.update(updateObj)\r\nconsole.log(\">>>>>>><\", items)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);\r\n",
  "z926Cl2vxUfyLY0V": "if (![\"rArm\", \"lArm\"].includes(this.effect.getFlag(\"wfrp4e\", \"location\")))\r\n\treturn true\r\n\r\nreturn [\"fel\", \"wp\", \"int\", \"t\"].includes(args.characteristic)",
  "z9NEbIUBsKMaTuCz": "if (args.opposedTest.result.hitloc && args.opposedTest.result.hitloc.value == \"head\") \n{\n    args.actor.addCondition(\"entangled\")\n}",
  "zA6TDttpwMSMl7D8": "// An imbiber must take a Consume Alcohol Test.\r\nthis.actor.setupSkill(game.i18n.localize(\"NAME.ConsumeAlcohol\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`}).then(async test => {\r\n  await test.roll()\r\n  // If they succeed, \r\n  // as a result of whatever potential futures they glimpse, \r\n  // they can spend a Fortune Point within the next hour to reverse the dice of any failed Test.\r\n  if (test.succeeded) {\r\n    this.script.message(`W wyniku wszelkich potencjalnych wydarzeń, <strong>${this.actor.prototypeToken.name}</strong> może wydać punkt Szczęścia w ciągu następnej godziny, aby odwrócić kości dowolnego nieudanego testu.`, \r\n    {\r\n      whisper: ChatMessage.getWhisperRecipients(\"GM\"), \r\n      blind: true \r\n    })    \r\n  }\r\n})",
  "zadppy7FEbXvgUON": " let characteristics = {\r\n                    \"ws\" : 5,\r\n                    \"bs\" : 0,\r\n                    \"s\" : 0,\r\n                    \"t\" : 0,\r\n                    \"i\" : 0,\r\n                    \"ag\" : 10,\r\n                    \"dex\" : 10,\r\n                    \"int\" : 0,\r\n                    \"wp\" : 0,\r\n                    \"fel\" : 5\r\n                }\r\nlet skills = [\"Percepcja\", \"Zwinne Palce\", \"Skradanie (Miasto)\"]\r\nlet skillAdvancements = [10, 10, 10]\r\nlet talents = [\"Przestępca\", \"Etykieta (Przestępcy)\"]\r\nlet trappings = [\"Lina, 10 metrów\", \"Wytrychy\", \"Maska\"]\r\nlet items = []\r\n\r\nlet updateObj = this.actor.toObject();\r\n\r\nfor (let ch in characteristics)\r\n{\r\n    updateObj.system.characteristics[ch].modifier += characteristics[ch];\r\n}\r\n\r\nfor (let index = 0; index < skills.length; index++)\r\n{\r\n    let skill = skills[index]\r\n    let skillItem;\r\n    skillItem = updateObj.items.find(i => i.name == skill && i.type == \"skill\")\r\n    if (skillItem)\r\n        skillItem.system.advances.value += skillAdvancements[index]\r\n    else \r\n    {\r\n        skillItem = await game.wfrp4e.utility.findSkill(skill)\r\n        skillItem = skillItem.toObject();\r\n        skillItem.system.advances.value = skillAdvancements[index];\r\n        items.push(skillItem);\r\n    }\r\n}\r\n\r\nfor (let talent of talents)\r\n{\r\n    let talentItem = await game.wfrp4e.utility.findTalent(talent)\r\n    if (talentItem)\r\n    {\r\n        items.push(talentItem.toObject());\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${talent}`, {permanent : true})\r\n    }\r\n}\r\n\r\nfor (let trapping of trappings) \r\n{\r\n    let trappingItem = await game.wfrp4e.utility.findItem(trapping)\r\n    if (trappingItem)\r\n    {\r\n        trappingItem = trappingItem.toObject()\r\n\r\n        trappingItem.system.equipped.value = true;\r\n\r\n        items.push(trappingItem);\r\n    }\r\n    else \r\n    {\r\n        ui.notifications.warn(`Could not find ${trapping}`, {permanent : true})\r\n    }\r\n}\r\n\r\n\r\nawait this.actor.update(updateObj)\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "zasFOZohkrdFIBwr": "let modifier = 0\n                            if (this.effect.name.includes(\"Moderate\"))\n                                modifier = -20\n                            else\n                                modifier = -10\n                            args.fields.modifier += modifier",
  "zBHTIBU8OlYj1YIO": "args.fields.modifier += this.effect.sourceActor?.system.characteristics.wp.value;",
  "ZbuW8y7t9Y8oUFWq": "return !((args.type == \"weapon\" && (args.item.system.weaponGroup.value == \"blackpowder\" || args.item.system.weaponGroup.value == \"engineering\")) || (args.type == \"cast\" && args.item.system.lore.value == \"fire\"))",
  "ZCBcwbVFHFTFRntb": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpentry)';\nconst difficulty = 'easy';\nconst target = 10;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "ZCkYe5XMVY1RWMXG": "args.context.wallcrawler = true;",
  "ZCrfdLPOxiNDCDSg": "this.actor.effects.get(this.effect.id).delete(); // can't use this.effect because it thinks it's parent is the item, but it actually is the actor",
  "ZCuOjLAeENKN1Q4L": "let halve;\r\nif (args.opposedTest.attackerTest.item?.type != \"spell\")\r\n{\r\n    halve = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content : \"Zmniejszyć obrażenia o połowę? (Zmniejsza obrażenia zadane od ognia o połowę)\"})\r\n}\r\nelse\r\n{\r\n    halve = args.opposedTest.attackerTest.item?.system.lore?.value == \"fire\";\r\n}\r\n\r\nif (halve)\r\n{\r\n    args.totalWoundLoss /= 2;\r\n    args.modifiers.other.push({label : this.effect.name, details : \"Zmniejszono o połowę\", value : \"× 0.5\"})\r\n}",
  "zdGAvfL7zJ7wpYxG": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Trade (Carpenter)';\nconst difficulty = 'easy';\nconst target = 40;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      \n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "ZdHvGvSJBsIuPphF": "return !args.data.dualWieldingOption && !args.context.dualWieldOffhand",
  "Ze9E2zR1GFGWGMVH": "return [game.i18n.localize(\"NAME.PickLock\"), game.i18n.localize(\"NAME.SleightOfHand\"), `${game.i18n.localize(\"NAME.Channelling\")} (Ulgu)`].includes(args.skill?.name)",
  "ZEdDcBka21rnMuz5": "let initiativeSetting = game.settings.get(\"wfrp4e\", \"initiativeRule\")\r\n\r\nswitch (initiativeSetting) {\r\n  case \"default\":\r\n    args.initiative += \"+10\"\r\n    break;\r\n\r\n  case \"sl\":\r\n    args.initiative += \"+1\"\r\n    break;\r\n\r\n  case \"d10Init\":\r\n    args.initiative += \"+10\"\r\n    break;\r\n\r\n  case \"d10InitAgi\":\r\n    args.initiative += \"+1\"\r\n    break;\r\n}",
  "ZEXhYJqqxF6QAixX": "return args.context.terror || args.extendedTest?.getFlag(\"wfrp4e\", \"fear\");",
  "zF1IKmobCB8ea58M": "return this.sourceActor.uuid === this.actor.uuid || ![\"ws\", \"ag\"].includes(args.characteristic);",
  "zFYCaGR0wbFWjl4T": "return args.skill?.name != game.i18n.localize(\"NAME.OutdoorSurvival\");",
  "ZgF1sYdbAKaOuHmK": "return args.skill?.name !== game.i18n.localize(\"NAME.Charm\");",
  "ZGlJnrIemqul24j7": "let infected = await fromUuid(\"Compendium.wfrp4e-core.items.V0c3qBU1CMm8bmsW\")\nlet bite = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\nlet biteData = bite.toObject();\nlet infectedData = infected.toObject();\n\nbiteData.system.specification.value = 4 - this.actor.characteristics.s.bonus\n\nthis.actor.createEmbeddedDocuments(\"Item\", [biteData, infectedData], {fromEffect : this.effect.id})",
  "ZhuitY1KOU1Xe7cP": "return !args.weapon?.system.properties.qualities.pummel",
  "ZI2YnAAGoLpmVDIL": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.aE3pyW20Orvdjzj0\")\r\nlet data = item.toObject();\r\ndata.system.specification.value = \"Religia\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "zI5hXv2NLGWqnmDD": "if (args.totalWoundLoss > 0)\n{\n\targs.actor.applyEffect({effectUuids : this.item.effects.contents[0].uuid})\n}",
  "zi8Z3NlwVj3IfgAW": "if (this.item.system.quantity.value)\n{\n\tthis.item.system.reduceQuantity();\n\tlet actor = Array.from(game.user.targets)[0]?.actor || this.actor;\n\tactor.applyEffect({effectData : [this.item.effects.contents[3].convertToApplied()]})\n}\nelse\n{\n\tthis.script.notification(\"None left!\", \"error\")\n}",
  "zIErcRiBmIZRbary": "if (args.test.failed)\r\n                            {\r\n                                let applicableCharacteristics = [\"ws\", \"bs\", \"s\", \"fel\", \"ag\", \"t\", \"dex\"];\r\n                                if (applicableCharacteristics.includes(args.test.characteristicKey))\r\n                                {\r\n                                    this.actor.addCondition(\"stunned\");\r\n                                }\r\n                            }",
  "ziG9H5Kdb7xC3dFE": "return !args.skill?.name.includes(game.i18n.localize(\"NAME.Art\"));",
  "zIpl3SkWv8zzlr2D": "let filters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"petty\"\r\n    }\r\n]\r\n\r\nlet petty = (await ItemDialog.createFromFilters(filters, 4, {text : \"Choose 4 Petty Spells\"})).map(i => i.toObject());\r\n\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : [\"death\"]\r\n    }\r\n]\r\n\r\nlet arcane = (await ItemDialog.createFromFilters(filters, 8, {text : \"Choose 8 Arcane Spells & Lore of Death\"})).map(i => i.toObject());\r\n\r\nfilters = [\r\n    {\r\n        property : \"type\",\r\n        value : \"spell\"\r\n    },\r\n    {\r\n        property : \"name\",\r\n        value: /^((?!\\().)*$/gm, // Remove all spells with parentheses (all arcane spells spells)\r\n        regex: true\r\n    },\r\n    {\r\n        property : \"system.lore.value\",\r\n        value : \"necromancy\"\r\n    }\r\n]\r\n\r\nlet necromancy = (await ItemDialog.createFromFilters(filters, 3, {text : \"Choose 3 from the Lore of Necromancy\"})).map(i => i.toObject());\r\n\r\nlet items = [...necromancy, ...petty, ...arcane]\r\n\r\nthis.actor.createEmbeddedDocuments(\"Item\", items);",
  "ZJy2rvpKmUHXGrAi": "args.actor.details.move.run *= 1.5",
  "zK38Rl5t9zbFi4Se": "if (args.opposedTest.result.hitloc.value == this.item.system.location.key && args.totalWoundLoss > 0)\r\n{\r\n    args.actor.addCondition(\"bleeding\", 1);\r\n    this.script.notification(\"Otrzymano Stan Krwawienia\")\r\n}",
  "zk44dFEGkylB7kW6": "        let modifier; let target = args.data.targets[0]\r\n        if (target.actor.details.size.value == \"tiny\")\r\n            modifier = 30\r\n        if (target.actor.details.size.value == \"ltl\")\r\n            modifier = 20\r\n        if (target.actor.details.size.value == \"sml\")\r\n            modifier = 10\r\n\t\r\n        args.fields.modifier += (modifier || 0); // Offset size modifier ",
  "zkc1gIPLj0VoAONT": "let AP = args.actor.status.armour;\n\nAP[\"head\"].value += 2;\nAP[\"rArm\"].value += 2;\nAP[\"lArm\"].value += 2;\nAP[\"body\"].value += 2;\nAP[\"lLeg\"].value += 2;\nAP[\"rLeg\"].value += 2;",
  "zL7ECmBBMAqf5Esn": "let hasMagazine = await foundry.applications.api.DialogV2.confirm({window : {title : this.effect.name}, content: \"<p>Czy statek ma magazyn lub inny rodzaj przechowalni dla Prochu?</p>\"});\r\n\r\nif (!hasMagazine) return;\r\n\r\nlet roll = new Roll(\"d10\");\r\nawait roll.evaluate();\r\n// await roll.toMessage();\r\nlet anchor = roll.toAnchor();\r\n\r\nlet crits = [];\r\n\r\nfor (let i = 0; i < roll.total; i++) {\r\n  let result = await WFRP_Tables.rollTable('crithull');\r\n  let collection = game.packs.get(result.object.documentCollection)\r\n\r\n  if (collection)\r\n    await collection.getDocuments()\r\n\r\n  if (!collection)\r\n    collection = game.items;\r\n\r\n    let item = collection.get(result.object.documentId)\r\n    if (item)\r\n      crits.push(item);\r\n}\r\n\r\nconst items = await this.actor.createEmbeddedDocuments(\"Item\", crits);\r\nconst speaker = ChatMessage.getSpeaker({actor: this.actor});\r\nconst uuids = items.map(i => `@UUID[${i.uuid}]`);\r\nthis.script.message(`<p><b>${this.item.name}</b> spowodował dodatkowo trafienia krytyczne w kadłub: ${anchor.outerHTML}!</p><ul><li>${uuids.join('<li>')}</ul>`)",
  "zLBLEDl3aGcAxai2": "const hasTraits = args.actor.has(\"Daemonic\") || args.actor.has(\"Undead\") || args.actor.has(\"Spellcaster\");\nconst hasSinOrCorruption = args.actor.status.sin.value > 0 || args.actor.status.corruption.value > 0;\nconst isSpellcaster = args.actor.itemTags.talent.some(i =>\n    i.name.includes(game.i18n.localize(\"NAME.ArcaneMagic\")) ||\n    i.name.includes(game.i18n.localize(\"NAME.ChaosMagic\")) ||\n    i.name.includes(game.i18n.localize(\"NAME.PettyMagic\"))\n  );\nconst shouldDamage = hasTraits || hasSinOrCorruption || isSpellcaster;\n\nif (shouldDamage) {\n  const roll = new Roll(\"1d10\");\n  await roll.evaluate();\n  let damage = roll.total;\n  await roll.toMessage();\n  await this.script.message(await this.actor.applyBasicDamage(damage, {damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, suppressMsg: true}));\n}",
  "ZLspFT2I3ZdWWr2H": "return args.skill?.name !== game.i18n.localize(\"NAME.Leadership\");",
  "ZMwJad6v4G13SgjR": "return args.type == \"cast\" || args.type == \"channelling\"",
  "ZNu4B0OdjkM9lmtu": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.9h82z72XGo9tfgQS\")\r\nlet data = item.toObject();\r\ndata.name = data.name += \" (Wzrok)\"\r\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "ZNW3ubbKIYXAyE48": "let wounds = this.actor.itemTypes.disease.filter(i => i.name == \"Ropiejąca Rana\" && i.system.duration.active);\r\nlet selected;\r\nif (wounds.length == 0)\r\n{\r\n    return this.script.scriptNotification(\"Brak Ropiejących Ran!\");\r\n}\r\nelse if (wounds.length == 1)\r\n{\r\n    selected = wounds[0];\r\n}\r\nelse if (wounds.length >= 2)\r\n{\r\n    selected = (await ItemDialog.create(wounds, 1))[0];\r\n}\r\n\r\nif (selected)\r\n{\r\n    let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Endurance\"), {fields: {difficulty : \"average\"}})\r\n    await test.roll();\r\n    if (test.succeeded)\r\n    {\r\n        let SL = parseInt(test.result.SL);\r\n        if (SL >= 0)\r\n        {\r\n            selected.update({\"system.duration.value\" : selected.system.duration.value - SL})\r\n            this.script.message(`<strong>${selected.name}</strong> czas trwania choroby zmniejszony o ${SL}!`)\r\n        }\r\n    }\r\n}",
  "ZOgtDW3mkTfeyc5M": "args.actor.system.details.price.gc += args.actor.system.details.price.gc * 0.1;",
  "zphxI8VSWbNQCMBy": "args.size = \"lrg\"",
  "zqShIJnrRReGgP94": "let {added, removed} = this.effect.getFlag(\"wfrp4e\", \"propertiesChanged\");\r\n\r\nfor(let property of (added || []))\r\n{\r\n    let hasValue = game.wfrp4e.config.propertyHasValue[property];\r\n    if (!args.item.system.qualities.value.find(i => i.name == property))\r\n    {\r\n        args.item.system.qualities.value.push({name : property, value : (hasValue ? 2 : null)})\r\n    }\r\n}\r\n\r\nfor(let property of (removed || []))\r\n{\r\n    args.item.system.flaws.value = args.item.system.flaws.value.filter(i => i.name != property)\r\n}",
  "ZqTW093qENOwGONP": "let msg = \"\"\n\nlet SL = parseInt(this.effect.sourceTest.result.SL);\n\nfor(let i = 0; i < SL; i++)\n{\n    msg += `<p>${await this.actor.applyBasicDamage(3, {suppressMsg : true, damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP})}</p>`\n}\n\nthis.script.message(msg);",
  "zR4WAjzXHTZuiu5G": "let actor = this.actor;\r\n                            let effect = this.effect;\r\n                            let bleedingAmt;\r\n                            let bleedingRoll;\r\n                            let msg = \"\"\r\n\r\n                            let damage = effect.conditionValue;\r\n                            let scriptArgs = {msg, damage};\r\n                            await Promise.all(actor.runScripts(\"preApplyCondition\", {effect, data : scriptArgs}))\r\n                            msg = scriptArgs.msg;\r\n                            damage = scriptArgs.damage;\r\n                            msg += await actor.applyBasicDamage(damage, {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne : false, suppressMsg : true})\r\n\r\n                            if (actor.status.wounds.value == 0 && !actor.hasCondition(\"unconscious\"))\r\n                            {\r\n                                await actor.addCondition(\"unconscious\")\r\n                                msg += \"<br>\" + game.i18n.format(\"BleedUnc\", {name: actor.prototypeToken.name })\r\n                            }\r\n\r\n                            if (actor.hasCondition(\"unconscious\"))\r\n                            {\r\n                                bleedingAmt = effect.conditionValue;\r\n                                bleedingRoll = (await new Roll(\"1d100\").roll()).total;\r\n                                if (bleedingRoll <= bleedingAmt * 10)\r\n                                {\r\n                                    msg += \"<br>\" + game.i18n.format(\"BleedFail\", {name: actor.prototypeToken.name}) + \" (\" + game.i18n.localize(\"Rolled\") + \" \" + bleedingRoll + \")\";\r\n                                    await actor.addCondition(\"dead\")\r\n                                }\r\n                                else if (bleedingRoll % 11 == 0)\r\n                                {\r\n                                    msg += \"<br>\" + game.i18n.format(\"BleedCrit\", { name: actor.prototypeToken.name } ) + \" (\" + game.i18n.localize(\"Rolled\") + bleedingRoll + \")\"\r\n                                    await actor.removeCondition(\"bleeding\")\r\n                                }\r\n                                else\r\n                                {\r\n                                    msg += \"<br>\" + game.i18n.localize(\"BleedRoll\") + \": \" + bleedingRoll;\r\n                                }\r\n                            }\r\n\r\n                            await Promise.all(actor.runScripts(\"applyCondition\", {effect, data : {bleedingRoll}}))\r\n                            if (args.suppressMessage)\r\n                            {\r\n                                let messageData = game.wfrp4e.utility.chatDataSetup(msg);\r\n                                messageData.speaker = {alias: this.effect.name}\r\n                                messageData.flavor = this.effect.name;\r\n                                return messageData\r\n                            }\r\n                            else\r\n                            {\r\n                                return this.script.message(msg)\r\n                            }\r\n                            ",
  "ZrePyV2spv3v65Tg": "return args.type != \"weapon\" && !this.actor.statuses.has(\"infighting\")",
  "ZRoG7GiMDQWso6gN": "const repaired_message = `<p>Zakończono naprawę: <em>${this.item.name}</em>.</p>`;\r\nconst test = 'Rzrmiosło (Stolarstwo)';\r\nconst difficulty = 'difficult';\r\nconst target = 30;\r\n\r\nconst extendedTestData = {\r\n  name: this.item.name,\r\n  type: \"extendedTest\",\r\n  img: this.item.img,\r\n  system: {\r\n    SL: {\r\n      current: 0,\r\n      target: target\r\n    },\r\n    test: {\r\n      value: test\r\n    },\r\n    completion: {\r\n      value: \"remove\"\r\n    },\r\n    difficulty: {\r\n      value: difficulty\r\n    }\r\n  },\r\n  effects: [\r\n    {\r\n      name: `Repair the ${this.item.name}`,\r\n      img: this.item.img,\r\n      system: {\r\n        transferData : {\r\n            type: \"document\",\r\n            documentType: \"Item\"\r\n          },\r\n          scriptData: [\r\n            {\r\n              label: this.item.name,\r\n              script: `\r\n              let id = this.item.flags.wfrp4e.fromEffect;\r\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\r\n              this.script.message(\"${repaired_message}\");\r\n              await effect.item.delete();\r\n            `,\r\n              trigger: \"deleteEffect\"\r\n            }\r\n          ]\r\n        }\r\n      \r\n      }\r\n  ]\r\n};\r\n\r\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\r\n",
  "zsiV6XEHlCNGLLPl": "return args.skill?.name ==  game.i18n.localize(\"NAME.SetTrap\");",
  "ZsOHDb7XwmuUUWPL": "return args.characteristic === 'fel';",
  "zsoTVkHe4nHY1M52": "this.script.message(await this.actor.applyBasicDamage(10 + parseInt(this.effect.sourceTest.result.SL), {damageType : game.wfrp4e.config.DAMAGE_TYPE.IGNORE_AP}))",
  "ZsQR3AVKi0v5U593": "args.actor.addCondition(\"ablaze\", 2)",
  "ZTE8LdRblyG4yYoE": "if (args.test.result.castOutcome == \"success\")\n{\n    // Wait till after chat card is posted\n    warhammer.utility.sleep(500).then(() => {\n        game.wfrp4e.utility.postTerror(1, this.effect.name)\n        game.wfrp4e.utility.postTerror(2, this.effect.name)\n    })\n}",
  "ztIkD5Zt6ko9D4Ca": "args.fields.modifier -= 10",
  "ZuoIVv3nmlGhhdx0": "let rating = parseInt(this.effect.name.match(/\\d+/)?.[0]) || 1;\nlet holed = this.actor.flags.holed || {holed: 0};\nholed.holed += rating;\nthis.actor.flags.holed = holed;\n",
  "ZURBQYTYcP5jci5k": "const broken = this.actor.hasCondition(\"broken\");\r\n\r\nbroken?.delete();",
  "zUv9e0A3OEXWY9Mv": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.pLW9SVX0TVTYPiPv\")\nlet data = item.toObject();\ndata.system.specification.value = 9 - this.actor.system.characteristics.s.bonus\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "ZvbBM4gTJHPdU8jU": "let test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\nawait test.roll();\nreturn test.failed",
  "zWZG8OmxqTpzHjFV": "args.actor.characteristics.ag.modifier -= 10;\r\n\r\n                            if (args.actor.details.move.value > 3)\r\n                            {\r\n                                args.actor.details.move.value -= 1;\r\n                                if (args.actor.details.move.value < 3)\r\n                                    args.actor.details.move.value = 3\r\n                            }",
  "zxG5KbliWE9xWNQD": "this.script.message(\"Automatycznie zdajesz: \" + this.script.label);\r\nargs.abort = true;",
  "Zxh4RAENoaAQAaNg": "return !this.actor.flags.useless.rEye || !this.actor.flags.useless.lEye || [\"wp\", \"t\", \"s\"].includes(args.characteristic)",
  "zXh8rgMxWoCLTxVd": "const repaired_message = `<p>Finished repairing <em>${this.item.name}</em>.</p>`;\nconst test = 'Sail';\nconst difficulty = 'challenging';\nconst target = 40;\n\nconst extendedTestData = {\n  name: this.item.name,\n  type: \"extendedTest\",\n  img: this.item.img,\n  system: {\n    SL: {\n      current: 0,\n      target: target\n    },\n    test: {\n      value: test\n    },\n    completion: {\n      value: \"remove\"\n    },\n    difficulty: {\n      value: difficulty\n    }\n  },\n  effects: [\n    {\n      name: `Repair the ${this.item.name}`,\n      img: this.item.img,\n      system: {\n        transferData : {\n            type: \"document\",\n            documentType: \"Item\"\n          },\n          scriptData: [\n            {\n              label: this.item.name,\n              script: `\n              let id = this.item.flags.wfrp4e.fromEffect;\n              let effect = this.actor.appliedEffects.find(e => e.id === id);\n              this.script.message(\"${repaired_message}\");\n              await effect.item.delete();\n            `,\n              trigger: \"deleteEffect\"\n            }\n          ]\n        }\n      }\n  ]\n};\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [extendedTestData], {fromEffect: this.effect.id});\n",
  "ZxtOdwsM2Sqj9Zam": "let item = await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")\nlet data = item.toObject();\ndata.system.specification.value = 0\ndata.name = this.effect.name;\nthis.actor.createEmbeddedDocuments(\"Item\", [data], {fromEffect : this.effect.id})",
  "zY4ZjY7uyKIKMYmX": "this.script.message(await game.wfrp4e.tables.formatChatRoll(\"fleshy-curse\"))\n\nlet test = await this.actor.setupSkill(game.i18n.localize(\"NAME.Cool\"), {skipTargets: true, appendTitle :  ` - ${this.effect.name}`, fields : {difficulty : \"hard\"}})\nawait test.roll();\nif (test.succeeded)\n{\n    this.effect.delete()\n}",
  "ZYsMgB4BwXBJcpYf": "// The wearer of the cloak causes Fear 2 \n// in Wolves, Lions, Goats, and Chimeras.\ngame.wfrp4e.utility.postFear(2, this.effect.name)\n",
  "zzk2uRSFjFHB5kjw": "   let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10)\r\n   if (args.test.isFumble && roll == 1 && !args.test.result.misfire)\r\n  {\r\n          args.test.result.misfire = game.i18n.localize(\"Misfire\") + \" (Wyrzucono 1)\"\r\n          args.test.result.misfireDamage = eval(parseInt(args.test.result.roll.toString().split('').pop()) + args.test.item.Damage)\r\n  }\r\n  else if (args.test.isFumble && roll != 1)\r\n      args.test.result.other.push(\"Rzut na Niewybuch: \" + roll)",
  "_DevilsCry": "debugger;\r\n\r\nlet advantage = game.settings.get(\"wfrp4e\", \"groupAdvantageValues\");\r\nif (advantage.enemies >= 2) {\r\n  advantage.enemies = 0;\r\n  game.wfrp4e.utility.updateGroupAdvantage(advantage);\r\n  let advances = this.effect.sourceItem.Advances;\r\n  await this.actor.addCondition(\"stunned\", 3);\r\n  if (advances > 1) {\r\n      await this.actor.applyBasicDamage((await new Roll(\"1d10\").roll()).total, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne: true, loc: \"body\", suppressMsg: false, hideDSN: true});\r\n  }\r\n   if (advances > 2) {\r\n      let test = await this.actor.setupSkill(\"Odporność\", {fields: {difficulty: \"average\" }});\r\n      await test.roll();\r\n      if (test.failed) {\r\n           await this.actor.applyBasicDamage((await new Roll(\"1d10\").roll()).total, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne: true, loc: \"body\", suppressMsg: false, hideDSN: true});\r\n           await this.actor.addCondition(\"broken\");\r\n     }\r\n   } \r\n   if (advances > 3) {\r\n      let formula = (advances - 3).toString() + \"d10\";\r\n      await this.actor.applyBasicDamage((await new Roll(formula).roll()).total, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne: true, loc: \"body\", suppressMsg: false, hideDSN: true});\r\n   }\r\n}",
  "_FuriousCharge": "debugger;\r\n// Check if charging attack\r\nif (args.opposeData.attackerTestResult.preData.extra.charging) {\r\n    // First increase the damage actually dealt by the value of the armor that no longer applies\r\n    args.totalWoundLoss += args.AP.value;\r\n  \r\n    // Then change the messaging to reflect that\r\n    args.messageElements[1] = \"0 PP\";\r\n  \r\n    args.updateMsg = `<b>Zadano obrażenia</b> (Ignorując pancerz ze względu na Wściekłą Szarżę)<span class = 'hide-option'>:`;\r\n  }",
  "_Hammer": "let changes = [];\r\nif (args.opposedTest.attackerTest.weapon) {\r\n    if (args.opposedTest.opposeResult.winner == \"attacker\") {\r\n        let modifier = 1; \r\n        let change = {  key: \"system.characteristics.s.calculationBonusModifier\",\r\n                        mode: 2,\r\n                        value: \"1\" };\r\n        if (this.effect.changes.length > 0) {\r\n            modifier = parseInt(this.effect.changes[0].value) + 1;\r\n            change = this.effect.changes[0];\r\n            change.value = modifier.toString();\r\n        }\r\n        changes.push(change);\r\n    }\r\n    this.effect.update({ changes: changes });\r\n}\r\n\r\nif (this.effect.changes.length > 0) {\r\n    this.effect.update({ changes: [] });\r\n}\r\nif (this.effect.sourceItem.parent.id == this.actor.id) {\r\n    let effect = this.effect.sourceItem.effects.find(x => x.name == 'Młot bojowy \"Furia Sigmara\"');\r\n    effect.update({changes: []});\r\n}\r\nif (this.effect.sourceItem.parent.system.characteristics.s.calculationBonusModifier > 0) {\r\n let damage = this.effect.sourceItem.parent.characteristics.s.bonus;\r\n  await this.actor.applyBasicDamage(damage, { damageType: game.wfrp4e.config.DAMAGE_TYPE.IGNORE_ALL, minimumOne: true, loc: \"body\", suppressMsg: false, hideDSN: true});\r\n  let test = await this.actor.setupCharacteristic(\"s\", {fields: {difficulty: \"average\" }});\r\n  await test.roll();\r\n  if (test.failed) {\r\n     await this.actor.addCondition(\"prone\");\r\n  }\r\n}",
  "_IronMuscles": "debugger;\r\nlet attackerTestType = args.attackerTest.result.characteristic;\r\nlet defenderTestType = args.defenderTest.result.characteristic;\r\n\r\nlet attackerTestCorrectType = attackerTestType === \"s\" || attackerTestType === \"ws\";\r\nlet defenderTestCorrectType = defenderTestType === \"s\" || defenderTestType === \"ws\";\r\n\r\n// Some information for a chat message\r\nlet attackerName = args.attackerTest.actor.name;\r\nlet defenderName = args.defenderTest.actor.name;\r\nlet messageContent = `${attackerName}: Żelazne Ścięgna zmniejszyły PS ${defenderName} o -2!`;\r\n\r\nif (attackerTestCorrectType && defenderTestCorrectType) {\r\n    // args.opposedTest.opposeResult.differenceSL += 2;\r\n    args.opposedTest.opposeResult.modifiers.defender.SL -= 2;\r\n    args.opposedTest.opposeResult.modifiers.message.push(messageContent);\r\n    this.script.scriptMessage(messageContent, this.script.getChatData());\r\n}\r\n\r\n",
  "_Niestrudzony": "debugger;\r\nif (!args.options.indefatigable) {\r\n    args.options.indefatigable = true;\r\n\r\n    let actorFatigueCondition = this.actor.hasCondition(\"fatigued\").conditionValue ?? 0;    \r\n    let actorIndefatigableTalentLevel = this.item.Advances;\r\n    \r\n    // Then take the difference, ensuring that if the talent level exceeds fatigue it's simply 0.\r\n    if (actorFatigueCondition > actorIndefatigableTalentLevel) {\r\n      args.prefillModifiers.modifier += actorIndefatigableTalentLevel * 10\r\n    } else {\r\n      args.prefillModifiers.modifier += actorFatigueCondition * 10;\r\n    }\r\n}",
  "_PrayerBonus": "let invocationBonus = isNaN(parseInt(this.item.flags.wfrp4e?.invocationBonus)) ? this.actor.characteristics.fel.bonus : parseInt(this.item.flags.wfrp4e?.invocationBonus);\r\nlet value = await ValueDialog.create(`Podaj liczbę dostępnych bonusów (domyślnie Bonus z Ogd - ${this.actor.characteristics.fel.bonus} `, this.effect.name, invocationBonus);\r\nif (parseInt(value) !== NaN){\r\n    this.item.setFlag(\"wfrp4e\", \"invocationBonus\", parseInt(value));\r\n}",
  "_TransformToDeer": "let tokenImg = \"/custom-images/Tokens/Combat/Eagle.webp\";\r\nlet transformToDeer = true;\r\nlet wounds = this.actor.status.wounds.value;\r\nlet maxWounds = this.actor.status.wounds.max;\r\nlet percent = (wounds / maxWounds).toFixed(2);\r\nif (tokenImg) {\r\n    let token = this.actor.getActiveTokens()[0];\r\n    if (token.document.texture.src == tokenImg) {\r\n        tokenImg = this.actor.prototypeToken.texture.src\r\n        transformToDeer = false;\r\n    }\r\n    new Sequence()\r\n    .effect()\r\n        .file(\"modules/jb2a_patreon/Library/2nd_Level/Misty_Step/MistyStep_02_Regular_Blue_400x400.webm\")\r\n        .atLocation(token)\r\n        .scaleToObject(2.5)\r\n        .randomRotation()\r\n    .wait(500)\r\n    .thenDo(() => {\r\n        token.document.update({ \"texture.src\": tokenImg });\r\n    })\r\n    .play()\r\n}\r\nif (transformToDeer ) {\r\n    let ugryzienie = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.pLW9SVX0TVTYPiPv\")).toObject();\r\n    let nightVision = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.FmHDbCOy3pH8yKhm\")).toObject();\r\n    let bron = (await fromUuid(\"Compendium.wfrp4e-core.items.AtpAudHA4ybXVlWM\")).toObject()\r\n    let rozmiar = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.8slW8CJ2oVTxeQ6q\")).toObject();\r\n    let latanie = (await fromUuid(\"Compendium.wfrp4e-core.items.Item.EO05HX7jql0g605A\")).toObject();\r\n    ugryzienie.system.specification.value = 5;\r\n    bron.system.specification.value = 7;\r\n    rozmiar.system.specification.value = \"Mały\";\r\n    latanie.system.specification.value = \"250\";\r\n\r\n    let items = [ugryzienie, bron, rozmiar, latanie, nightVision ];\r\n    \r\n    this.script.scriptNotification(`Dodano: ${items.map(i => i.name).join(\", \")}`);\r\n    await this.actor.createEmbeddedDocuments(\"Item\", items, {fromEffect : this.effect.id});\r\n\r\n    let char = {system: { \r\n        details: { move: {value: 8}},\r\n        characteristics: {\r\n            ag: {modifier: 20},\r\n            i: {modifier: 40}\r\n      }}}\r\n      await this.actor.update(char);\r\n} else {\r\n    await this.effect.deleteCreatedItems();\r\n    let char = {system: { \r\n        details: { move: {value: 4}},\r\n        characteristics: {\r\n            ag: {modifier: 0},\r\n            i: {modifier: 0}\r\n      }}}\r\n      await this.actor.update(char);\r\n}\r\nlet a = this.actor;\r\nsetTimeout(function() {\r\n    a.setWounds((a.status.wounds.max * percent).toFixed(0));\r\n}, (1000)); \r\n\r\n"
});
});